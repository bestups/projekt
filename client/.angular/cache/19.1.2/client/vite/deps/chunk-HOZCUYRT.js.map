{
  "version": 3,
  "sources": ["../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl_util.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/canvas_util.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/tex_util.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/flags_webgl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/glsl_version.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler_util.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/shader_compiler.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_math.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/decode_matrix_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_float_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/encode_matrix_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_util.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/gpgpu_context.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/shared.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Complex.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/zeros_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Identity.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Real.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cast.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/binary_utils.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BitwiseAnd.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/utils/unary_utils.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Equal.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FloorDiv.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherNd_Impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GreaterEqual.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LessEqual.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RaggedGather_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RaggedRange_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RaggedTensorToTensor_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Scatter_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sigmoid.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseFillEmptyRows_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseSegmentReduction_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sqrt.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StaticRegexReplace.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringNGrams_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringSplit_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StringToHashBucketFast_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/packing_util.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/pack_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/reshape_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/texture_manager.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/unaryop_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/unpack_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/backend_webgl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/version.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/webgl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/base.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Identity.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Complex.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LeakyRelu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prelu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/mulmat_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/binaryop_complex_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multiply.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reshape.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/mean_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/reduce_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/transpose_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transpose.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/_FusedMatMul.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Abs.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acos.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Acosh.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Add.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/addn_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AddN.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/All.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Any.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/argminmax_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/arg_min_max.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMax.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ArgMin.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asin.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Asinh.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atan2.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Atanh.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/pool_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/avg_pool_backprop_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPool3DGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/AvgPoolGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchMatMul.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/batchnorm_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchNorm.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/slice_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Slice.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BatchToSpaceND.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Bincount.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BitwiseAnd.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/BroadcastArgs.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NotEqual.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Real.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/int.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cast.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Ceil.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/clip_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ClipByValue.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/complex_abs_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ComplexAbs.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/concat_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Imag.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Concat.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/im2col_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropFilter.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv2DBackpropInput.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropFilterV2.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Conv3DBackpropInputV2.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cos.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cosh.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/crop_and_resize_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/CropAndResize.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/cum_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cum_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cumprod.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Cumsum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DenseBincount.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/depth_to_space_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthToSpace.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_gpu_depthwise.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_packed_gpu_depthwise.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNative.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/conv_backprop_gpu_depthwise.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropFilter.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/DepthwiseConv2dNativeBackpropInput.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/diag_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Diag.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/dilation_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Dilation2D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Einsum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Elu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/EluGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Equal.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Erf.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Exp.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ExpandDims.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Expm1.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/fft_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FFT.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/fill_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Fill.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/flip_left_right_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FlipLeftRight.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Floor.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FloorDiv.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels_utils/from_pixels_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FromPixels.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedConv2D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/FusedDepthwiseConv2D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_nd_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherNd.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/gather_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GatherV2.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Greater.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/GreaterEqual.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IFFT.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsFinite.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsInf.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/IsNaN.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Less.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LessEqual.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LinSpace.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Log1p.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalAnd.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalNot.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LogicalOr.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRN.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/lrn_grad_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/LRNGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Max.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Maximum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3D.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/max_pool_backprop_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPool3DGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MaxPoolWithArgmax.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mean.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Min.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Minimum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/mirror_pad_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/MirrorPad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Mod.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/multinomial_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RealDiv.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sub.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softmax.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Multinomial.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Neg.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV3.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV4.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/NonMaxSuppressionV5.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/onehot_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OneHot.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ZerosLike.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/OnesLike.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pack.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/pad_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/PadV2.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Pow.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Prod.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RaggedGather.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RaggedRange.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RaggedTensorToTensor.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Range.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reciprocal.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Relu6.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinear.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_bilinear_backprop_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeBilinearGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighbor.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/resize_nearest_neighbor_backprop_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ResizeNearestNeighborGrad.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/reverse_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Reverse.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/rotate_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/RotateWithOffset.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Round.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Rsqrt.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/scatter_packed_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/ScatterNd.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/search_sorted_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SearchSorted.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/select_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Select.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Selu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sigmoid.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sign.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sin.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sinh.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Softplus.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SpaceToBatchND.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseFillEmptyRows.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseReshape.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseSegmentMean.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseSegmentSum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SparseToDense.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SplitV.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Sqrt.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Square.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/SquaredDifference.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StaticRegexReplace.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Step.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/strided_slice_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StridedSlice.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringNGrams.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringSplit.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/StringToHashBucketFast.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tan.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tanh.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/TensorScatterUpdate.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/tile_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Tile.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/top_k_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/TopK.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/transform_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Transform.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unique.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/Unpack.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/segment_gpu.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/kernels/UnsortedSegmentSum.js", "../../../../../../node_modules/@tensorflow/tfjs-backend-webgl/dist/register_all_kernels.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { getTextureConfig } from './tex_util';\nexport function callAndCheck(gl, func) {\n  const returnValue = func();\n  if (env().getBool('DEBUG')) {\n    checkWebGLError(gl);\n  }\n  return returnValue;\n}\nfunction checkWebGLError(gl) {\n  const error = gl.getError();\n  if (error !== gl.NO_ERROR) {\n    throw new Error('WebGL Error: ' + getWebGLErrorMessage(gl, error));\n  }\n}\n// https://en.wikipedia.org/wiki/Half-precision_floating-point_format\nconst MIN_FLOAT16 = 5.96e-8;\nconst MAX_FLOAT16 = 65504;\nexport function canBeRepresented(num) {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED') || num === 0 || MIN_FLOAT16 < Math.abs(num) && Math.abs(num) < MAX_FLOAT16) {\n    return true;\n  }\n  return false;\n}\nexport function getWebGLErrorMessage(gl, status) {\n  switch (status) {\n    case gl.NO_ERROR:\n      return 'NO_ERROR';\n    case gl.INVALID_ENUM:\n      return 'INVALID_ENUM';\n    case gl.INVALID_VALUE:\n      return 'INVALID_VALUE';\n    case gl.INVALID_OPERATION:\n      return 'INVALID_OPERATION';\n    case gl.INVALID_FRAMEBUFFER_OPERATION:\n      return 'INVALID_FRAMEBUFFER_OPERATION';\n    case gl.OUT_OF_MEMORY:\n      return 'OUT_OF_MEMORY';\n    case gl.CONTEXT_LOST_WEBGL:\n      return 'CONTEXT_LOST_WEBGL';\n    default:\n      return `Unknown error code ${status}`;\n  }\n}\nexport function getExtensionOrThrow(gl, extensionName) {\n  return throwIfNull(gl, () => gl.getExtension(extensionName), 'Extension \"' + extensionName + '\" not supported on this browser.');\n}\nexport function createVertexShader(gl, vertexShaderSource) {\n  const vertexShader = throwIfNull(gl, () => gl.createShader(gl.VERTEX_SHADER), 'Unable to create vertex WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(vertexShader, vertexShaderSource));\n  callAndCheck(gl, () => gl.compileShader(vertexShader));\n  if (gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) === false) {\n    console.log(gl.getShaderInfoLog(vertexShader));\n    throw new Error('Failed to compile vertex shader.');\n  }\n  return vertexShader;\n}\nexport function createFragmentShader(gl, fragmentShaderSource) {\n  const fragmentShader = throwIfNull(gl, () => gl.createShader(gl.FRAGMENT_SHADER), 'Unable to create fragment WebGLShader.');\n  callAndCheck(gl, () => gl.shaderSource(fragmentShader, fragmentShaderSource));\n  callAndCheck(gl, () => gl.compileShader(fragmentShader));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return fragmentShader;\n  }\n  if (gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) === false) {\n    logShaderSourceAndInfoLog(fragmentShaderSource, gl.getShaderInfoLog(fragmentShader));\n    throw new Error('Failed to compile fragment shader.');\n  }\n  return fragmentShader;\n}\nconst lineNumberRegex = /ERROR: [0-9]+:([0-9]+):/g;\nexport function logShaderSourceAndInfoLog(shaderSource, shaderInfoLog) {\n  const lineNumberRegexResult = lineNumberRegex.exec(shaderInfoLog);\n  if (lineNumberRegexResult == null) {\n    console.log(`Couldn't parse line number in error: ${shaderInfoLog}`);\n    console.log(shaderSource);\n    return;\n  }\n  const lineNumber = +lineNumberRegexResult[1];\n  const shaderLines = shaderSource.split('\\n');\n  const pad = shaderLines.length.toString().length + 2;\n  const linesWithLineNumbers = shaderLines.map((line, lineNumber) => util.rightPad((lineNumber + 1).toString(), pad) + line);\n  let maxLineLength = 0;\n  for (let i = 0; i < linesWithLineNumbers.length; i++) {\n    maxLineLength = Math.max(linesWithLineNumbers[i].length, maxLineLength);\n  }\n  const beforeErrorLines = linesWithLineNumbers.slice(0, lineNumber - 1);\n  const errorLine = linesWithLineNumbers.slice(lineNumber - 1, lineNumber);\n  const afterErrorLines = linesWithLineNumbers.slice(lineNumber);\n  console.log(beforeErrorLines.join('\\n'));\n  console.log(shaderInfoLog.split('\\n')[0]);\n  console.log(`%c ${util.rightPad(errorLine[0], maxLineLength)}`, 'border:1px solid red; background-color:#e3d2d2; color:#a61717');\n  console.log(afterErrorLines.join('\\n'));\n}\nexport function createProgram(gl) {\n  return throwIfNull(gl, () => gl.createProgram(), 'Unable to create WebGLProgram.');\n}\nexport function linkProgram(gl, program) {\n  callAndCheck(gl, () => gl.linkProgram(program));\n  if (env().get('ENGINE_COMPILE_ONLY')) {\n    return;\n  }\n  if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Failed to link vertex and fragment shaders.');\n  }\n}\n/// validateProgram is effectively \"If we `useProgram(program); drawArrays();`,\n/// give feedback in log about perf/correctness warnings or errors that would\n/// occur.\"\n/// So make sure we set up all vertex/texture/sampler/uniform data before\n/// calling validateProgram!\nexport function validateProgram(gl, program) {\n  callAndCheck(gl, () => gl.validateProgram(program));\n  if (gl.getProgramParameter(program, gl.VALIDATE_STATUS) === false) {\n    console.log(gl.getProgramInfoLog(program));\n    throw new Error('Shader program validation failed.');\n  }\n}\nexport function createStaticVertexBuffer(gl, data) {\n  const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\nexport function createStaticIndexBuffer(gl, data) {\n  const buffer = throwIfNull(gl, () => gl.createBuffer(), 'Unable to create WebGLBuffer');\n  callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW));\n  return buffer;\n}\nexport function getNumChannels() {\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    return 1;\n  }\n  return 4;\n}\nexport function createTexture(gl) {\n  return throwIfNull(gl, () => gl.createTexture(), 'Unable to create WebGLTexture.');\n}\nexport function validateTextureSize(width, height) {\n  const maxTextureSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  if (width <= 0 || height <= 0) {\n    const requested = `[${width}x${height}]`;\n    throw new Error('Requested texture size ' + requested + ' is invalid.');\n  }\n  if (width > maxTextureSize || height > maxTextureSize) {\n    const requested = `[${width}x${height}]`;\n    const max = `[${maxTextureSize}x${maxTextureSize}]`;\n    throw new Error('Requested texture size ' + requested + ' greater than WebGL maximum on this browser / GPU ' + max + '.');\n  }\n}\nexport function createFramebuffer(gl) {\n  return throwIfNull(gl, () => gl.createFramebuffer(), 'Unable to create WebGLFramebuffer.');\n}\nexport function bindVertexBufferToProgramAttribute(gl, program, attribute, buffer, arrayEntriesPerItem, itemStrideInBytes, itemOffsetInBytes) {\n  const loc = gl.getAttribLocation(program, attribute);\n  if (loc === -1) {\n    // The GPU compiler decided to strip out this attribute because it's unused,\n    // thus no need to bind.\n    return false;\n  }\n  callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, buffer));\n  callAndCheck(gl, () => gl.vertexAttribPointer(loc, arrayEntriesPerItem, gl.FLOAT, false, itemStrideInBytes, itemOffsetInBytes));\n  callAndCheck(gl, () => gl.enableVertexAttribArray(loc));\n  return true;\n}\nexport function bindTextureUnit(gl, texture, textureUnit) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n}\nexport function unbindTextureUnit(gl, textureUnit) {\n  validateTextureUnit(gl, textureUnit);\n  callAndCheck(gl, () => gl.activeTexture(gl.TEXTURE0 + textureUnit));\n  callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function getProgramUniformLocationOrThrow(gl, program, uniformName) {\n  return throwIfNull(gl, () => gl.getUniformLocation(program, uniformName), 'uniform \"' + uniformName + '\" not present in program.');\n}\nexport function getProgramUniformLocation(gl, program, uniformName) {\n  return gl.getUniformLocation(program, uniformName);\n}\nexport function bindTextureToProgramUniformSampler(gl, texture, uniformSamplerLocation, textureUnit) {\n  callAndCheck(gl, () => bindTextureUnit(gl, texture, textureUnit));\n  callAndCheck(gl, () => gl.uniform1i(uniformSamplerLocation, textureUnit));\n}\nexport function bindCanvasToFramebuffer(gl) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n  callAndCheck(gl, () => gl.viewport(0, 0, gl.canvas.width, gl.canvas.height));\n  callAndCheck(gl, () => gl.scissor(0, 0, gl.canvas.width, gl.canvas.height));\n}\nexport function bindColorTextureToFramebuffer(gl, texture, framebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0));\n}\nexport function unbindColorTextureFromFramebuffer(gl, framebuffer) {\n  callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer));\n  callAndCheck(gl, () => gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0));\n}\nexport function validateFramebuffer(gl) {\n  const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n  if (status !== gl.FRAMEBUFFER_COMPLETE) {\n    throw new Error('Error binding framebuffer: ' + getFramebufferErrorMessage(gl, status));\n  }\n}\nexport function getFramebufferErrorMessage(gl, status) {\n  switch (status) {\n    case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n      return 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT';\n    case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n      return 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS';\n    case gl.FRAMEBUFFER_UNSUPPORTED:\n      return 'FRAMEBUFFER_UNSUPPORTED';\n    default:\n      return `unknown error ${status}`;\n  }\n}\nfunction throwIfNull(gl, returnTOrNull, failureMessage) {\n  const tOrNull = callAndCheck(gl, () => returnTOrNull());\n  if (tOrNull == null) {\n    throw new Error(failureMessage);\n  }\n  return tOrNull;\n}\nfunction validateTextureUnit(gl, textureUnit) {\n  const maxTextureUnit = gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1;\n  const glTextureUnit = textureUnit + gl.TEXTURE0;\n  if (glTextureUnit < gl.TEXTURE0 || glTextureUnit > maxTextureUnit) {\n    const textureUnitRange = `[gl.TEXTURE0, gl.TEXTURE${maxTextureUnit}]`;\n    throw new Error(`textureUnit must be in ${textureUnitRange}.`);\n  }\n}\nexport function getBatchDim(shape, dimsToSkip = 2) {\n  return util.sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\nexport function getRowsCols(shape) {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function getShapeAs3D(shape) {\n  let shapeAs3D = [1, 1, 1];\n  const isScalar = shape.length === 0 || shape.length === 1 && shape[0] === 1;\n  if (!isScalar) {\n    shapeAs3D = [getBatchDim(shape), ...getRowsCols(shape)];\n  }\n  return shapeAs3D;\n}\nexport function getTextureShapeFromLogicalShape(logShape, isPacked = false) {\n  let maxTexSize = env().getNumber('WEBGL_MAX_TEXTURE_SIZE');\n  let maxSizeForNarrowTex = env().getNumber('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE');\n  if (maxSizeForNarrowTex === Infinity && env().getBool('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE')) {\n    maxSizeForNarrowTex = maxTexSize / 2;\n  }\n  if (isPacked) {\n    maxTexSize = maxTexSize * 2;\n    maxSizeForNarrowTex = maxSizeForNarrowTex * 2;\n    // This logic ensures we accurately count the number of packed texels needed\n    // to accommodate the tensor. We can only pack values in the same texel if\n    // they are from adjacent pairs of rows/cols within the same batch. So if a\n    // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n    // fact that the texels containing the third row are half empty.\n    logShape = logShape.map((d, i) => i >= logShape.length - 2 ? util.nearestLargerEven(logShape[i]) : logShape[i]);\n    // Packed texture height is at least 2 (the channel height of a single\n    // texel).\n    if (logShape.length === 1) {\n      logShape = [2, logShape[0]];\n    }\n  }\n  // If logical shape is 2, we don't squeeze, since we want to match physical.\n  if (logShape.length !== 2) {\n    const squeezeResult = util.squeezeShape(logShape);\n    logShape = squeezeResult.newShape;\n  }\n  let size = util.sizeFromShape(logShape);\n  let textureShape = null;\n  if (logShape.length <= 1 && size <= maxTexSize) {\n    textureShape = [1, size];\n  } else if (logShape.length === 2 && logShape[0] <= maxTexSize && logShape[1] <= maxTexSize) {\n    textureShape = logShape;\n  } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTexSize && logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1], logShape[2]];\n  } else if (logShape.length === 3 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2]];\n  } else if (logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTexSize && logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n  } else if (logShape.length === 4 && logShape[0] <= maxTexSize && logShape[1] * logShape[2] * logShape[3] <= maxTexSize) {\n    textureShape = [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n  }\n  // true if one edge length is 1 (1 or 2, if packed), while another edge\n  // length exceeds maxSizeForNarrowTex.\n  const isLongNarrowTex = textureShape != null && Math.max(...textureShape) > maxSizeForNarrowTex && Math.min(...textureShape) <= (isPacked ? 2 : 1) && Math.min(...textureShape) > 0;\n  if (textureShape == null || isLongNarrowTex) {\n    if (isPacked) {\n      // For packed textures size equals the number of channels required to\n      // accommodate the texture data. However in order to squarify such that\n      // inner dimensions stay even, we rewrite size to equal the number of\n      // texels. Then in the return statement we rehydrate the squarified\n      // dimensions to channel units.\n      const batchDim = getBatchDim(logShape);\n      let rows = 2,\n        cols = 2;\n      if (logShape.length) {\n        [rows, cols] = getRowsCols(logShape);\n      }\n      size = batchDim * (rows / 2) * (cols / 2);\n      textureShape = util.sizeToSquarishShape(size).map(d => d * 2);\n    } else {\n      textureShape = util.sizeToSquarishShape(size);\n    }\n  }\n  return textureShape;\n}\nfunction isEven(n) {\n  return n % 2 === 0;\n}\n/**\n * This determines whether reshaping a packed texture requires rearranging\n * the data within the texture, assuming 2x2 packing.\n */\nexport function isReshapeFree(shape1, shape2) {\n  shape1 = shape1.slice(-2);\n  shape2 = shape2.slice(-2);\n  if (util.arraysEqual(shape1, shape2)) {\n    return true;\n  }\n  if (!shape1.length || !shape2.length) {\n    // One of the shapes is a scalar.\n    return true;\n  }\n  if (shape1[0] === 0 || shape1[1] === 0 || shape2[0] === 0 || shape2[1] === 0) {\n    return true;\n  }\n  if (shape1.length !== shape2.length) {\n    // One of the shapes is a vector.\n    const shape1Cols = shape1[shape1.length - 1];\n    const shape2Cols = shape2[shape2.length - 1];\n    if (shape1Cols === shape2Cols) {\n      return true;\n    }\n    if (isEven(shape1Cols) && isEven(shape2Cols) && (shape1[0] === 1 || shape2[0] === 1)) {\n      return true;\n    }\n  }\n  return shape1[1] === shape2[1] && isEven(shape1[0]) && isEven(shape2[0]);\n}\n// We cache webgl params because the environment gets reset between\n// unit tests and we don't want to constantly query the WebGLContext for\n// MAX_TEXTURE_SIZE.\nlet MAX_TEXTURE_SIZE;\nlet MAX_TEXTURES_IN_SHADER;\nexport function getWebGLMaxTextureSize(webGLVersion) {\n  if (MAX_TEXTURE_SIZE == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n  }\n  return MAX_TEXTURE_SIZE;\n}\nexport function resetMaxTextureSize() {\n  MAX_TEXTURE_SIZE = null;\n}\nexport function resetMaxTexturesInShader() {\n  MAX_TEXTURES_IN_SHADER = null;\n}\nexport function getMaxTexturesInShader(webGLVersion) {\n  if (MAX_TEXTURES_IN_SHADER == null) {\n    const gl = getWebGLContext(webGLVersion);\n    MAX_TEXTURES_IN_SHADER = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n  }\n  // We cap at 16 to avoid spurious runtime \"memory exhausted\" error.\n  return Math.min(16, MAX_TEXTURES_IN_SHADER);\n}\nexport function getWebGLDisjointQueryTimerVersion(webGLVersion) {\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  let queryTimerVersion;\n  const gl = getWebGLContext(webGLVersion);\n  if (hasExtension(gl, 'EXT_disjoint_timer_query_webgl2') && webGLVersion === 2) {\n    queryTimerVersion = 2;\n  } else if (hasExtension(gl, 'EXT_disjoint_timer_query')) {\n    queryTimerVersion = 1;\n  } else {\n    queryTimerVersion = 0;\n  }\n  return queryTimerVersion;\n}\nexport function hasExtension(gl, extensionName) {\n  const ext = gl.getExtension(extensionName);\n  return ext != null;\n}\nexport function isWebGLVersionEnabled(webGLVersion) {\n  try {\n    const gl = getWebGLContext(webGLVersion);\n    if (gl != null) {\n      return true;\n    }\n  } catch (e) {\n    console.log('Error when getting WebGL context: ', e);\n    return false;\n  }\n  return false;\n}\nexport function isCapableOfRenderingToFloatTexture(webGLVersion) {\n  if (webGLVersion === 0) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n  } else {\n    if (!hasExtension(gl, 'EXT_color_buffer_float')) {\n      return false;\n    }\n  }\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\n/**\n * Check if we can download values from a float/half-float texture.\n *\n * Note that for performance reasons we use binding a texture to a framebuffer\n * as a proxy for ability to download float values later using readPixels. The\n * texture params of this texture will not match those in readPixels exactly\n * but if we are unable to bind some kind of float texture to the frameBuffer\n * then we definitely will not be able to read float values from it.\n */\nexport function isDownloadFloatTextureEnabled(webGLVersion) {\n  if (webGLVersion === 0) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n  if (webGLVersion === 1) {\n    if (!hasExtension(gl, 'OES_texture_float')) {\n      return false;\n    }\n    if (!hasExtension(gl, 'WEBGL_color_buffer_float')) {\n      return false;\n    }\n  } else {\n    if (hasExtension(gl, 'EXT_color_buffer_float')) {\n      return createFloatTextureAndBindToFramebuffer(gl);\n    }\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    if (hasExtension(gl, COLOR_BUFFER_HALF_FLOAT)) {\n      const textureHalfFloatExtension = gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      return createHalfFloatTextureAndBindToFramebuffer(gl, textureHalfFloatExtension);\n    }\n    return false;\n  }\n  const isFrameBufferComplete = createFloatTextureAndBindToFramebuffer(gl);\n  return isFrameBufferComplete;\n}\nfunction createFloatTextureAndBindToFramebuffer(gl) {\n  const texConfig = getTextureConfig(gl);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeFloat, null);\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n  const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n  return isFrameBufferComplete;\n}\nfunction createHalfFloatTextureAndBindToFramebuffer(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n  const texConfig = getTextureConfig(gl, textureHalfFloatExtension);\n  const texture = gl.createTexture();\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  const width = 1;\n  const height = 1;\n  gl.texImage2D(gl.TEXTURE_2D, 0, texConfig.internalFormatHalfFloat, width, height, 0, texConfig.textureFormatFloat, texConfig.textureTypeHalfFloat, null);\n  const frameBuffer = gl.createFramebuffer();\n  gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n  const isFrameBufferComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n  gl.bindTexture(gl.TEXTURE_2D, null);\n  gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n  gl.deleteTexture(texture);\n  gl.deleteFramebuffer(frameBuffer);\n  return isFrameBufferComplete;\n}\nexport function isWebGLFenceEnabled(webGLVersion) {\n  if (webGLVersion !== 2) {\n    return false;\n  }\n  const gl = getWebGLContext(webGLVersion);\n  // tslint:disable-next-line:no-any\n  const isEnabled = gl.fenceSync != null;\n  return isEnabled;\n}\nexport function assertNotComplex(tensor, opName) {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors ` + 'in the WebGL backend.');\n    }\n  });\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nconst contexts = {};\nconst WEBGL_ATTRIBUTES = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\nexport function clearWebGLContext(webGLVersion) {\n  delete contexts[webGLVersion];\n}\nexport function setWebGLContext(webGLVersion, gl) {\n  contexts[webGLVersion] = gl;\n}\nexport function getWebGLContext(webGLVersion, customCanvas) {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n  return contexts[webGLVersion];\n}\nfunction createCanvas(webGLVersion) {\n  // Use canvas element for Safari, since its offscreen canvas does not support\n  // fencing.\n  if (!env().getBool('IS_SAFARI') && typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\nfunction getWebGLRenderingContext(webGLVersion, customCanvas) {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas = customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n  canvas.addEventListener('webglcontextlost', ev => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (env().getBool('SOFTWARE_WEBGL_ENABLED')) {\n    WEBGL_ATTRIBUTES.failIfMajorPerformanceCaveat = false;\n  }\n  if (webGLVersion === 1) {\n    return (\n      // tslint:disable-next-line\n      canvas.getContext('webgl', WEBGL_ATTRIBUTES) || canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)\n    );\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nexport var PackingScheme;\n(function (PackingScheme) {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme || (PackingScheme = {}));\nexport var TextureUsage;\n(function (TextureUsage) {\n  TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\n  TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\n  TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\n  TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage || (TextureUsage = {}));\nexport var PhysicalTextureType;\n(function (PhysicalTextureType) {\n  PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n  PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType || (PhysicalTextureType = {}));\nexport function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n  return [columns, rows];\n}\nexport function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n  return matrixSize * channelsPerTexture;\n}\nexport function getColorMatrixTextureShapeWidthHeight(rows, columns) {\n  return [columns * 4, rows];\n}\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape) {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\nexport function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` + `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\nexport function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\nexport function getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n  return [Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))];\n}\nexport function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\nexport function getTextureConfig(\n// tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n  // tslint:disable-next-line:no-any\n  const glany = gl;\n  let internalFormatFloat;\n  let internalFormatHalfFloat;\n  let internalFormatPackedHalfFloat;\n  let internalFormatPackedFloat;\n  let textureFormatFloat;\n  let downloadTextureFormat;\n  let downloadUnpackNumChannels;\n  let defaultNumChannels;\n  let textureTypeHalfFloat;\n  let textureTypeFloat;\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n    downloadTextureFormat = glany.RGBA8;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ? textureHalfFloatExtension.HALF_FLOAT_OES : null;\n    textureTypeFloat = gl.FLOAT;\n    downloadTextureFormat = gl.RGBA;\n  }\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { device_util, env } from '@tensorflow/tfjs-core';\nimport { getMaxTexturesInShader, getWebGLDisjointQueryTimerVersion, getWebGLMaxTextureSize, isCapableOfRenderingToFloatTexture, isDownloadFloatTextureEnabled, isWebGLFenceEnabled, isWebGLVersionEnabled } from './webgl_util';\nconst ENV = env();\n/**\n * This file contains WebGL-specific flag registrations.\n */\n/**\n * True if WebGL is supported.\n */\nENV.registerFlag('HAS_WEBGL', () => ENV.getNumber('WEBGL_VERSION') > 0);\n/** 0: No WebGL, 1: WebGL 1.0, 2: WebGL 2.0. */\nENV.registerFlag('WEBGL_VERSION', () => {\n  if (isWebGLVersionEnabled(2)) {\n    return 2;\n  } else if (isWebGLVersionEnabled(1)) {\n    return 1;\n  }\n  return 0;\n});\n/** Whether to check for numerical representation problems. */\nENV.registerFlag('WEBGL_CHECK_NUMERICAL_PROBLEMS', () => false);\nENV.registerFlag('WEBGL_BUFFER_SUPPORTED', () => ENV.get('WEBGL_VERSION') === 2);\n/** Whether the WebGL backend will sometimes forward ops to the CPU. */\nENV.registerFlag('WEBGL_CPU_FORWARD', () => true);\n/** Whether the WebGL backend will always use f16 textures for rendering. */\nENV.registerFlag('WEBGL_FORCE_F16_TEXTURES', () => false);\n/** Whether to turn all packing related flags on. */\nENV.registerFlag('WEBGL_PACK', () => ENV.getBool('HAS_WEBGL'));\n/** Whether we will pack the batchnormalization op. */\nENV.registerFlag('WEBGL_PACK_NORMALIZATION', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the clip op. */\nENV.registerFlag('WEBGL_PACK_CLIP', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack the depthwise conv op. */\nENV.registerFlag('WEBGL_PACK_DEPTHWISECONV', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack binary ops. */\nENV.registerFlag('WEBGL_PACK_BINARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack unary ops. */\nENV.registerFlag('WEBGL_PACK_UNARY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack array ops. */\nENV.registerFlag('WEBGL_PACK_ARRAY_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack image ops. */\nENV.registerFlag('WEBGL_PACK_IMAGE_OPERATIONS', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack reduce ops. */\nENV.registerFlag('WEBGL_PACK_REDUCE', () => ENV.getBool('WEBGL_PACK'));\n/** Whether packed WebGL kernels lazily unpack their outputs. */\nENV.registerFlag('WEBGL_LAZILY_UNPACK', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will use the im2col algorithm to speed up convolutions. */\nENV.registerFlag('WEBGL_CONV_IM2COL', () => ENV.getBool('WEBGL_PACK'));\n/** Whether we will pack conv2dTranspose op. */\nENV.registerFlag('WEBGL_PACK_CONV2DTRANSPOSE', () => ENV.getBool('WEBGL_PACK'));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURE_SIZE', () => getWebGLMaxTextureSize(ENV.getNumber('WEBGL_VERSION')));\n/** The maximum texture dimension. */\nENV.registerFlag('WEBGL_MAX_TEXTURES_IN_SHADER', () => getMaxTexturesInShader(ENV.getNumber('WEBGL_VERSION')));\n/**\n * The disjoint_query_timer extension version.\n * 0: disabled, 1: EXT_disjoint_timer_query, 2:\n * EXT_disjoint_timer_query_webgl2.\n * In Firefox with WebGL 2.0,\n * EXT_disjoint_timer_query_webgl2 is not available, so we must use the\n * WebGL 1.0 extension.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION', () => {\n  const webGLVersion = ENV.getNumber('WEBGL_VERSION');\n  if (webGLVersion === 0) {\n    return 0;\n  }\n  return getWebGLDisjointQueryTimerVersion(webGLVersion);\n});\n/**\n * Whether the timer object from the disjoint_query_timer extension gives\n * timing information that is reliable.\n */\nENV.registerFlag('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE', () => ENV.getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0 && !device_util.isMobile());\n/**\n * Whether the device is physically capable of rendering to float32 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_CAPABLE', () => isCapableOfRenderingToFloatTexture(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Whether rendering to float32 textures is enabled. If disabled, renders to\n * float16 textures.\n */\nENV.registerFlag('WEBGL_RENDER_FLOAT32_ENABLED', () => {\n  return ENV.getBool('WEBGL_FORCE_F16_TEXTURES') ? false : ENV.getBool('WEBGL_RENDER_FLOAT32_CAPABLE');\n});\n/**\n * Whether downloading float textures is enabled (16 or 32 bit). If disabled,\n * uses IEEE 754 encoding of the float32 values to 4 uint8 when downloading.\n */\nENV.registerFlag('WEBGL_DOWNLOAD_FLOAT_ENABLED', () => isDownloadFloatTextureEnabled(ENV.getNumber('WEBGL_VERSION')));\n/** Whether the fence API is available. */\nENV.registerFlag('WEBGL_FENCE_API_ENABLED', () => isWebGLFenceEnabled(ENV.getNumber('WEBGL_VERSION')));\n/**\n * Tensors with size <= than this will be uploaded as uniforms, not textures.\n */\nENV.registerFlag('WEBGL_SIZE_UPLOAD_UNIFORM', () => {\n  // Use uniform uploads only when 32bit floats are supported. In\n  // 16bit\n  // environments there are problems with comparing a 16bit texture value\n  // with a 32bit uniform value.\n  const useUniforms = ENV.getBool('WEBGL_RENDER_FLOAT32_ENABLED');\n  return useUniforms ? 4 : 0;\n});\n/**\n * If the total number of bytes allocated on the GPU is greater than this\n * number, we will aggressively delete textures upon disposal with\n * gl.deleteMatrixTexture, rather than making them available for reuse.\n *\n * Default value -1 indicates that we will never aggressively delete textures.\n */\nENV.registerFlag('WEBGL_DELETE_TEXTURE_THRESHOLD', () => {\n  return -1;\n}, threshold => {\n  if (!(typeof threshold === 'number')) {\n    throw new Error('WEBGL_DELETE_TEXTURE_THRESHOLD must be a number but ' + `got ${threshold}.`);\n  }\n  if (threshold < 0 && threshold !== -1) {\n    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never ` + `delete) or at least 0, but got ${threshold}.`);\n  }\n});\n/**\n * Trigger a manual GL command flush if the threshold of time has passed since\n * previous Kernel execution. This can be useful for Andorid device where GL\n * command flush are delayed un til the end of javascript task. This value is\n * measured in millisecond. Typically you want to set this value to close to 1.\n *\n * Default value 1 for mobile chrome, and -1 for rest cases. -1 indicates that\n * we will not enforce manual flush and depend on system default flush schedule.\n */\nENV.registerFlag('WEBGL_FLUSH_THRESHOLD', () => {\n  return device_util.isMobile() ? 1 : -1;\n}, threshold => {\n  if (!(typeof threshold === 'number')) {\n    throw new Error('WEBGL_FLUSH_THRESHOLD must be a number but got ' + `${threshold}.`);\n  }\n  if (threshold < 0 && threshold !== -1) {\n    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never ` + `manual flush) or at least 0, but got ${threshold}.`);\n  }\n});\n/**\n * Threshold for input tensor size that determines whether WebGL backend will\n * delegate computation to CPU.\n *\n * Default value is 128.\n */\nENV.registerFlag('CPU_HANDOFF_SIZE_THRESHOLD', () => 128);\n/** Whether we will use shapes uniforms. */\nENV.registerFlag('WEBGL_USE_SHAPES_UNIFORMS', () => false);\n/**\n * Threshold for last dimension of input tensor that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If input\n * is smaller than threshold then CPU will be used\n *\n * Default value is 100000.\n */\nENV.registerFlag('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD', () => 100000);\n/**\n * Threshold for K that determines whether\n * WebGL backend for the Top K op will delegate computation to CPU. If k\n * is larger than threshold then CPU will be used\n *\n * Default value is 128.\n */\nENV.registerFlag('TOPK_K_CPU_HANDOFF_THRESHOLD', () => 128);\n/** Whether we will use the experimental conv op. */\nENV.registerFlag('WEBGL_EXP_CONV', () => false);\n/**\n * If the device performance is low or if no hardware GPU is available, whether\n * software WebGL will be used.\n */\nENV.registerFlag('SOFTWARE_WEBGL_ENABLED', () => ENV.getBool('IS_TEST'));\n/**\n * For narrow texture (physical height or physical width is 1), if the length of\n * any texture edges exceed the threshold, the texture will be reshaped to be\n * more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE', () => Infinity);\n/**\n * If the flag is set to true, the max size of the narrow texture will be auto\n * computed and it will be considerred as a threshold to reshape the narrow\n * texture to be more squarish.\n *\n * This flag is used to help some GPUs that could not provide correct\n * interpolations for long skinny triangles. We found Mali GPU probably has this\n * problem: https://github.com/tensorflow/tfjs/issues/6775.\n */\nENV.registerFlag('WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE', () => false);\n/**\n * Whether to use the customized isnan. It's only useful for webgl2 since webgl1\n * doesn't have the builtin isnan.\n */\nENV.registerFlag('WEBGL2_ISNAN_CUSTOM', () => false);\n/** Experimental flag, whether enter compile only phase. */\nENV.registerFlag('ENGINE_COMPILE_ONLY', () => false);\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nexport function getGlslDifferences() {\n  let version;\n  let attribute;\n  let varyingVs;\n  let varyingFs;\n  let texture2D;\n  let output;\n  let defineOutput;\n  let defineSpecialNaN;\n  let defineSpecialInf;\n  let defineRound;\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    version = '#version 300 es';\n    attribute = 'in';\n    varyingVs = 'out';\n    varyingFs = 'in';\n    texture2D = 'texture';\n    output = 'outputColor';\n    defineOutput = 'out vec4 outputColor;';\n    // Use custom isnan definition to work across differences between\n    // implementations on various platforms. While this should happen in ANGLE\n    // we still see differences between android and windows (on chrome) when\n    // using isnan directly. Since WebGL2 supports uint type and\n    // floatBitsToUinT built-in function, we could implment isnan following\n    // IEEE 754 rules.\n    // NaN defination in IEEE 754-1985 is :\n    //   - sign = either 0 or 1.\n    //   - biased exponent = all 1 bits.\n    //   - fraction = anything except all 0 bits (since all 0 bits represents\n    //   infinity).\n    // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers\n    defineSpecialNaN = env().getBool('WEBGL2_ISNAN_CUSTOM') ? `\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ` : '';\n    // In webgl 2 we do not need to specify a custom isinf so there is no\n    // need for a special INFINITY constant.\n    defineSpecialInf = ``;\n    defineRound = `\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  } else {\n    version = '';\n    attribute = 'attribute';\n    varyingVs = 'varying';\n    varyingFs = 'varying';\n    texture2D = 'texture2D';\n    output = 'gl_FragColor';\n    defineOutput = '';\n    // WebGL1 has no built in isnan so we define one here.\n    defineSpecialNaN = `\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    `;\n    defineSpecialInf = `\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    `;\n    defineRound = `\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    `;\n  }\n  return {\n    version,\n    attribute,\n    varyingVs,\n    varyingFs,\n    texture2D,\n    output,\n    defineOutput,\n    defineSpecialNaN,\n    defineSpecialInf,\n    defineRound\n  };\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(coords, shape, index = 'index') {\n  const strides = util.computeStrides(shape);\n  return strides.map((stride, i) => {\n    const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n    const line2 = i === strides.length - 1 ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` : `index -= ${coords[i]} * ${stride}`;\n    return `${line1}; ${line2};`;\n  }).join('');\n}\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(coords, shape, index = 'index') {\n  const strides = util.computeStrides(shape);\n  return strides.map((_, i) => {\n    const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n    const line2 = i === strides.length - 1 ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${i}]` : `index -= ${coords[i]} * outShapeStrides[${i}]`;\n    return `${line1}; ${line2};`;\n  }).join('');\n}\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(indicesArr, variableName) {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n  return strides;\n}\nexport function getLogicalCoordinatesFromFlatIndexByUniform(coords, variableName, index = 'index') {\n  const indicesArray = coords.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides.map((_, i) => {\n    const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n    const line2 = i === strides.length - 1 ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` : `index -= ${coords[i]} * ${strides[i]}`;\n    return `${line1}; ${line2};`;\n  }).join('');\n}\nfunction buildVec(x) {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x, y) {\n  if (x.length !== y.length) {\n    throw new Error(`Vectors to be dotted must be of the same length -` + `got ${x.length} and ${y.length}`);\n  }\n  const slices = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape) {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\nexport function getFlatIndexFrom3DOutput() {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst {\n  getBroadcastDims\n} = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, program) {\n  const prefixSnippets = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n    if (program.enableShapeUniforms) {\n      const {\n        uniformShape\n      } = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach(d => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n  const inputSamplingSnippet = inputsInfo.map(x => getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms)).join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet;\n  let floatTextureSetOutputSnippet;\n  let shaderPrefix = getShaderPrefix(glsl);\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n  const source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, program.userCode].join('\\n');\n  return source;\n}\nfunction getSamplerFromInInfo(inInfo, enableShapeUniforms = false) {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(`${shape.length}-D input sampling` + ` is not yet supported`);\n  }\n}\nfunction getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\nfunction getInputSamplingSnippet(inInfo, outShapeInfo, usesPackedTextures = false, enableShapeUniforms) {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);\n  }\n}\nfunction getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n    default:\n      throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n  }\n}\nfunction getFloatTextureSampleSnippet(glsl) {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\nfunction getFloatTextureSetRSnippet(glsl) {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\nfunction getShaderPrefix(glsl) {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n  return SHADER_PREFIX;\n}\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\nfunction getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\nfunction getOutput1DCoords(shape, texShape, enableShapeUniforms) {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\nfunction getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\nfunction getOutput3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\nfunction getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\nfunction getOutput4DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\nfunction getOutput5DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\nfunction getOutput6DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\nfunction getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n  }\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getOutput2DCoords(shape, texShape, enableShapeUniforms) {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\nfunction getFlatOffsetUniformName(texName) {\n  return `offset${texName}`;\n}\nfunction getPackedSamplerScalar(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\nfunction getSamplerScalar(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getPackedSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\nfunction getPackedSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * stride0 + col * stride1 + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\nfunction getPackedSamplerND(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler4D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler5D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getSampler6D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\nfunction getUniformSampler(inputInfo) {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n  }\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` + `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n  }\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\nexport function getUniformInfoFromShape(isPacked, shape, texShape) {\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape = !isPacked && rank > 1 && !util.arraysEqual(shape, texShape) && newShape.length < rank || useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {\n    useSqueezeShape,\n    uniformShape,\n    keptDims\n  };\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(inInfo, squeezedShape) {\n  // Deep copy.\n  const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map(d => params[d]).join(', ');\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport * as shader_compiler from './shader_compiler';\nimport { createFragmentShader } from './webgl_util';\nexport function compileProgram(gpgpu, program, inputs, output) {\n  const inputInfos = inputs.map((input, i) => {\n    const shapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null && input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {\n      name: program.variableNames[i],\n      shapeInfo\n    };\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n  const fragmentShader = createFragmentShader(gpgpu.gl, source);\n  const webGLProgram = gpgpu.createProgram(fragmentShader);\n  if (!env().get('ENGINE_COMPILE_ONLY')) {\n    gpgpu.buildVao(webGLProgram);\n    return Object.assign({\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo\n    }, getUniformLocations(gpgpu, program, webGLProgram));\n  } else {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      variablesLocations: null,\n      customUniformLocations: null,\n      infLoc: null,\n      nanLoc: null,\n      outShapeLocation: null,\n      outShapeStridesLocation: null,\n      outTexShapeLocation: null\n    };\n  }\n}\nexport function getUniformLocations(gpgpu, program, webGLProgram) {\n  const variablesLocations = [];\n  const customUniformLocations = [];\n  let outShapeLocation;\n  let outTexShapeLocation;\n  let outShapeStridesLocation;\n  let infLoc = null;\n  let nanLoc = null;\n  // Add special uniforms (NAN, INFINITY)\n  nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  for (const varName of program.variableNames) {\n    const varLocs = {\n      name: varName,\n      uniform: gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow),\n      offset: gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow)\n    };\n    if (program.enableShapeUniforms) {\n      varLocs.shape = gpgpu.getUniformLocation(webGLProgram, `${varName}Shape`, shouldThrow);\n      varLocs.texShape = gpgpu.getUniformLocation(webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n    variablesLocations.push(varLocs);\n  }\n  if (program.enableShapeUniforms) {\n    outShapeLocation = gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation = gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation = gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n  if (program.customUniforms) {\n    for (const d of program.customUniforms) {\n      customUniformLocations.push(gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow));\n    }\n  }\n  return {\n    variablesLocations,\n    customUniformLocations,\n    infLoc,\n    nanLoc,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` + `was executed with ${inputs.length} inputs`);\n  }\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(`Binary was compiled with different shapes than ` + `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(`Binary was compiled with different texture shapes than the` + ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\nexport function runProgram(gpgpu, binary, inputs, output, customUniformValues) {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n  gpgpu.bindVertexArray(binary.webGLProgram.vao);\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n  // Set user-defined inputs\n  for (let i = 0; i < inputs.length; ++i) {\n    const input = inputs[i];\n    const {\n      uniform: varLoc,\n      offset: varOffsetLoc,\n      shape: varShapeLoc,\n      texShape: varTexShapeLoc\n    } = binary.variablesLocations[i];\n    if (varShapeLoc) {\n      const {\n        uniformShape\n      } = shader_compiler.getUniformInfoFromShape(binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      continue;\n    }\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      continue;\n    }\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n    gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n  }\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(binary.outTexShapeLocation, output.texData.texShape[0], output.texData.texShape[1]);\n  }\n  if (binary.program.customUniforms && customUniformValues) {\n    for (let i = 0; i < binary.program.customUniforms.length; ++i) {\n      const d = binary.program.customUniforms[i];\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    }\n  }\n  gpgpu.executeProgram();\n}\nexport function makeShaderKey(program, inputs, output) {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null && x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {\n        useSqueezeShape,\n        uniformShape,\n        keptDims\n      } = shader_compiler.getUniformInfoFromShape(program.packedInputs, x.shape, xTexShape);\n      let rank1 = '',\n        rank2 = '',\n        rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape = [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual = uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims = backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs && xRank === output.shape.length && util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne = program.packedInputs || uniformShape.length > 2 ? '' : `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode + `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\nexport function useShapeUniforms(rank) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport { PackingScheme } from './tex_util';\nexport class DecodeMatrixProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    this.outPackingScheme = PackingScheme.DENSE;\n    this.customUniforms = [{\n      name: 'texShape',\n      type: 'ivec2'\n    }];\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms ? shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], outputShape) : shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nimport { PackingScheme } from './tex_util';\nexport class DecodeMatrixPackedProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outPackingScheme = PackingScheme.DENSE;\n    this.customUniforms = [{\n      name: 'texShape',\n      type: 'ivec2'\n    }];\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms ? shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], outputShape) : shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], outputShape)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { ENCODE_FLOAT_SNIPPET } from './shader_compiler_util';\nimport { TextureUsage } from './tex_util';\nexport class EncodeFloatProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.outTexUsage = TextureUsage.DOWNLOAD;\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { ENCODE_FLOAT_SNIPPET } from './shader_compiler_util';\nimport { TextureUsage } from './tex_util';\nexport class EncodeFloatPackedProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = false;\n    this.outTexUsage = TextureUsage.DOWNLOAD;\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.userCode = `\n      ${ENCODE_FLOAT_SNIPPET}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${glsl.output} = encode_float(x);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nconst CHANNEL_CHAR_TO_INDEX_MAP = {\n  'R': 0,\n  'G': 1,\n  'B': 2,\n  'A': 3\n};\nexport class EncodeMatrixProgram {\n  constructor(outputShape, inputIsUnsignedByte = false, usedChannels = 'RGBA') {\n    this.variableNames = ['A'];\n    this.customUniforms = [{\n      name: 'texShape',\n      type: 'ivec2'\n    }];\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n    let mainLoop = '';\n    for (let usedChannelIndex = 0; usedChannelIndex < usedChannels.length; usedChannelIndex++) {\n      const curChannel = usedChannels[usedChannelIndex];\n      mainLoop += `\n          if(offset == ${usedChannelIndex}) {\n            result = values[${CHANNEL_CHAR_TO_INDEX_MAP[curChannel]}];\n          }`;\n    }\n    this.userCode = `\n      ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int flatIndex = getFlatIndex(coords);\n        float result = 0.;\n        int offset = imod(flatIndex, ${usedChannels.length});\n\n        flatIndex = idiv(flatIndex, ${usedChannels.length}, 1.);\n\n        int r = flatIndex / texShape[1];\n        if (r < texShape[0]) {\n          int c = imod(flatIndex, texShape[1]);\n          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n          vec4 values = ${glsl.texture2D}(A, uv);\n          ${mainLoop}\n        }\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n/*\nThis is how the shader encodes a tensor with shape = [2, 3, 5]\n(indices are [batch, row, col]).\n\n000|001   002|003   004|xxx   020|021   022|023   024|xxx\n-------   -------   -------   -------   -------   -------\n010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\n100|101   102|103   104|xxx   120|121   122|123   124|xxx\n-------   -------   -------   -------   -------   -------\n110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n\nSingle texels contain only values from the same batch, and from adjacent rows\nand columns.\n */\nexport class EncodeMatrixPackedProgram {\n  constructor(outputShape, inputIsUnsignedByte = false) {\n    this.variableNames = ['A'];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'texShape',\n      type: 'ivec2'\n    }];\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    let mainLoop = '';\n    let output = 'result';\n    if (inputIsUnsignedByte) {\n      output = 'floor(result * 255. + 0.5)';\n    }\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        const channel = row * 2 + col;\n        mainLoop += `\n          localCoords = coords;\n          if(localCoords[2] + ${col} < ${this.enableShapeUniforms ? 'outShape[2]' : `${outputShape[2]}`}) {\n          localCoords[2] += ${col};\n          if (localCoords[1] + ${row} < ${this.enableShapeUniforms ? 'outShape[1]' : `${outputShape[1]}`}) {\n            localCoords[1] += ${row};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${glsl.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${channel}] = values[0];\n            } else if (offset == 1) {\n              result[${channel}] = values[1];\n            } else if (offset == 2) {\n              result[${channel}] = values[2];\n            } else {\n              result[${channel}] = values[3];\n            }\n          }\n        }\n        `;\n      }\n    }\n    this.userCode = `\n        ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${mainLoop}\n\n          ${glsl.output} = ${output};\n        }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getGlslDifferences } from './glsl_version';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport function createVertexShader(gl) {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexport function createVertexBuffer(gl) {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexport function createIndexBuffer(gl) {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));\n  } else {\n    webgl_util.callAndCheck(gl, () => gl.texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return {\n    texture,\n    texShape: [height, width]\n  };\n}\nexport function getInternalFormatForFloat32MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatFloat;\n}\nexport function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\nexport function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexport function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\nexport function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexport function getInternalFormatForPackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\nexport function createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\nexport function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nexport function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n  const posOffset = 0; // x is the first buffer element\n  const uvOffset = 3 * 4; // uv comes after [x y z]\n  const stride = 3 * 4 + 2 * 4; // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success && webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexport function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  let dataForUpload, texelDataType, internalFormat;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n  dataForUpload.set(data);\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType, dataForUpload));\n  } else {\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function uploadPixelDataToTexture(gl, texture, pixels) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if (pixels.data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    } else {\n      webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    } else {\n      webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    }\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n  webgl_util.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n  webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n  return buffer;\n}\nexport function downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n  const gl2 = gl;\n  const downloadTarget = new Float32Array(size);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n  const [w, h] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n  webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget));\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\nexport function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n  const gl2 = gl;\n  const downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nexport function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n  return packedRGBA;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext, setWebGLContext } from './canvas_util';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport class GPGPUContext {\n  constructor(gl) {\n    this.outputTexture = null;\n    this.program = null;\n    this.disposed = false;\n    this.itemsToPoll = [];\n    const glVersion = env().getNumber('WEBGL_VERSION');\n    if (gl != null) {\n      this.gl = gl;\n      setWebGLContext(glVersion, gl);\n    } else {\n      this.gl = getWebGLContext(glVersion);\n    }\n    gl = this.gl;\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      const gl2 = gl;\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl2, () => gl2.createVertexArray());\n      };\n      this.bindVertexArray = vao => {\n        return webgl_util.callAndCheck(gl2, () => gl2.bindVertexArray(vao));\n      };\n      this.deleteVertexArray = vao => {\n        return webgl_util.callAndCheck(gl2, () => gl2.deleteVertexArray(vao));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(gl2, () => gl2.getParameter(gl2.VERTEX_ARRAY_BINDING));\n      };\n    } else if (gl != null) {\n      const ext = gl.getExtension('OES_vertex_array_object');\n      if (ext == null) {\n        throw new Error('All WebGL1 implementations are expected to offer' + ' OES_vertex_array_object.');\n      }\n      this.createVertexArray = () => {\n        return webgl_util.callAndCheck(gl, () => ext.createVertexArrayOES());\n      };\n      this.bindVertexArray = vao => {\n        return webgl_util.callAndCheck(gl, () => ext.bindVertexArrayOES(vao));\n      };\n      this.deleteVertexArray = vao => {\n        return webgl_util.callAndCheck(gl, () => ext.deleteVertexArrayOES(vao));\n      };\n      this.getVertexArray = () => {\n        return webgl_util.callAndCheck(gl, () => gl.getParameter(ext.VERTEX_ARRAY_BINDING_OES));\n      };\n    }\n    // WebGL 2.0 enables texture floats without an extension.\n    let COLOR_BUFFER_FLOAT = 'WEBGL_color_buffer_float';\n    const COLOR_BUFFER_HALF_FLOAT = 'EXT_color_buffer_half_float';\n    this.parallelCompilationExtension = this.gl.getExtension('KHR_parallel_shader_compile');\n    if (env().getNumber('WEBGL_VERSION') === 1) {\n      const TEXTURE_FLOAT = 'OES_texture_float';\n      const TEXTURE_HALF_FLOAT = 'OES_texture_half_float';\n      this.textureFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_FLOAT);\n      if (webgl_util.hasExtension(this.gl, TEXTURE_HALF_FLOAT)) {\n        this.textureHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, TEXTURE_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support half float textures, yet the ' + 'environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n      this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = webgl_util.getExtensionOrThrow(this.gl, COLOR_BUFFER_HALF_FLOAT);\n      } else if (env().get('WEBGL_FORCE_F16_TEXTURES')) {\n        throw new Error('GL context does not support color renderable half floats, yet ' + 'the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.');\n      }\n    } else {\n      COLOR_BUFFER_FLOAT = 'EXT_color_buffer_float';\n      if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_FLOAT)) {\n        this.colorBufferFloatExtension = this.gl.getExtension(COLOR_BUFFER_FLOAT);\n      } else if (webgl_util.hasExtension(this.gl, COLOR_BUFFER_HALF_FLOAT)) {\n        this.colorBufferHalfFloatExtension = this.gl.getExtension(COLOR_BUFFER_HALF_FLOAT);\n      } else {\n        throw new Error('GL context does not support color renderable floats');\n      }\n    }\n    this.vertexBuffer = gpgpu_util.createVertexBuffer(this.gl);\n    this.indexBuffer = gpgpu_util.createIndexBuffer(this.gl);\n    this.framebuffer = webgl_util.createFramebuffer(this.gl);\n    this.textureConfig = tex_util.getTextureConfig(this.gl, this.textureHalfFloatExtension);\n  }\n  get debug() {\n    return env().getBool('DEBUG');\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    if (this.program != null) {\n      console.warn('Disposing a GPGPUContext that still has a bound WebGLProgram.' + ' This is probably a resource leak, delete the program with ' + 'GPGPUContext.deleteProgram before disposing.');\n    }\n    if (this.outputTexture != null) {\n      console.warn('Disposing a GPGPUContext that still has a bound output matrix ' + 'texture.  This is probably a resource leak, delete the output ' + 'matrix texture with GPGPUContext.deleteMatrixTexture before ' + 'disposing.');\n    }\n    const gl = this.gl;\n    webgl_util.callAndCheck(gl, () => gl.finish());\n    webgl_util.callAndCheck(gl, () => gl.bindFramebuffer(gl.FRAMEBUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteFramebuffer(this.framebuffer));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null));\n    webgl_util.callAndCheck(gl, () => gl.deleteBuffer(this.indexBuffer));\n    this.disposed = true;\n  }\n  createFloat32MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat32MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createFloat16MatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16MatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createUnsignedBytesMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createUnsignedBytesMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  uploadPixelDataToTexture(texture, pixels) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadPixelDataToTexture(this.gl, texture, pixels);\n  }\n  uploadDenseMatrixToTexture(texture, width, height, data) {\n    this.throwIfDisposed();\n    gpgpu_util.uploadDenseMatrixToTexture(this.gl, texture, width, height, data, this.textureConfig);\n  }\n  createFloat16PackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createFloat16PackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  createPackedMatrixTexture(rows, columns) {\n    this.throwIfDisposed();\n    return gpgpu_util.createPackedMatrixTexture(this.gl, rows, columns, this.textureConfig);\n  }\n  deleteMatrixTexture(texture) {\n    this.throwIfDisposed();\n    if (this.outputTexture === texture) {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n      this.outputTexture = null;\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.deleteTexture(texture));\n  }\n  downloadByteEncodedFloatMatrixFromOutputTexture(texture, rows, columns) {\n    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadByteEncodedFloatMatrixFromOutputTexture(this.gl, rows, columns, this.textureConfig));\n  }\n  downloadPackedMatrixFromBuffer(buffer, batch, rows, columns, physicalRows, physicalCols) {\n    return gpgpu_util.downloadPackedMatrixFromBuffer(this.gl, buffer, batch, rows, columns, physicalRows, physicalCols, this.textureConfig);\n  }\n  downloadFloat32MatrixFromBuffer(buffer, size) {\n    return gpgpu_util.downloadFloat32MatrixFromBuffer(this.gl, buffer, size);\n  }\n  createBufferFromTexture(texture, rows, columns) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = gpgpu_util.createBufferFromOutputTexture(this.gl, rows, columns, this.textureConfig);\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n  createAndWaitForFence() {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n  createFence(gl) {\n    let query;\n    let isFencePassed;\n    if (env().getBool('WEBGL_FENCE_API_ENABLED')) {\n      const gl2 = gl;\n      const sync = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n      gl.flush();\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(sync, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n      query = sync;\n    } else if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') > 0) {\n      query = this.beginQuery();\n      this.endQuery();\n      isFencePassed = () => this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n    } else {\n      // If we have no way to fence, return true immediately. This will fire in\n      // WebGL 1.0 when there is no disjoint query timer. In this case, because\n      // the fence passes immediately, we'll immediately ask for a download of\n      // the texture, which will cause the UI thread to hang.\n      isFencePassed = () => true;\n    }\n    return {\n      query,\n      isFencePassed\n    };\n  }\n  downloadMatrixFromPackedTexture(texture, physicalRows, physicalCols) {\n    return this.downloadMatrixDriver(texture, () => gpgpu_util.downloadMatrixFromPackedOutputTexture(this.gl, physicalRows, physicalCols));\n  }\n  createProgram(fragmentShader) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    if (this.vertexShader == null) {\n      this.vertexShader = gpgpu_util.createVertexShader(gl);\n    }\n    const program = webgl_util.createProgram(gl);\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, this.vertexShader));\n    webgl_util.callAndCheck(gl, () => gl.attachShader(program, fragmentShader));\n    webgl_util.linkProgram(gl, program);\n    const program2 = Object.assign(program, {\n      vao: this.createVertexArray()\n    });\n    if (this.debug) {\n      webgl_util.validateProgram(gl, program2);\n    }\n    return program2;\n  }\n  buildVao(program) {\n    this.setProgram(program);\n    this.bindVertexArray(program.vao);\n    const gl = this.gl;\n    // Bind index buffer, and vertex buffers based on program attrib\n    // locations.\n    webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer));\n    gpgpu_util.bindVertexProgramAttributeStreams(gl, program, this.vertexBuffer);\n  }\n  deleteProgram(program) {\n    this.throwIfDisposed();\n    if (program === this.program) {\n      this.program = null;\n    }\n    if (program != null) {\n      webgl_util.callAndCheck(this.gl, () => this.gl.deleteProgram(program));\n      this.deleteVertexArray(program.vao);\n    }\n  }\n  setProgram(program) {\n    this.throwIfDisposed();\n    this.program = program;\n    if (this.program != null) {\n      if (this.debug) {\n        webgl_util.validateProgram(this.gl, this.program);\n      }\n    }\n    webgl_util.callAndCheck(this.gl, () => this.gl.useProgram(program));\n  }\n  getUniformLocation(program, uniformName, shouldThrow = true) {\n    this.throwIfDisposed();\n    if (shouldThrow) {\n      return webgl_util.getProgramUniformLocationOrThrow(this.gl, program, uniformName);\n    } else {\n      return webgl_util.getProgramUniformLocation(this.gl, program, uniformName);\n    }\n  }\n  getAttributeLocation(program, attribute) {\n    this.throwIfDisposed();\n    return webgl_util.callAndCheck(this.gl, () => this.gl.getAttribLocation(program, attribute));\n  }\n  getUniformLocationNoThrow(program, uniformName) {\n    this.throwIfDisposed();\n    return this.gl.getUniformLocation(program, uniformName);\n  }\n  setInputMatrixTexture(inputMatrixTexture, uniformLocation, textureUnit) {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    webgl_util.bindTextureToProgramUniformSampler(this.gl, inputMatrixTexture, uniformLocation, textureUnit);\n  }\n  setOutputMatrixTexture(outputMatrixTexture, rows, columns) {\n    this.setOutputMatrixTextureDriver(outputMatrixTexture, columns, rows);\n  }\n  setOutputPackedMatrixTexture(outputPackedMatrixTexture, rows, columns) {\n    this.throwIfDisposed();\n    const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n    this.setOutputMatrixTextureDriver(outputPackedMatrixTexture, width, height);\n  }\n  setOutputMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    this.setOutputMatrixWriteRegionDriver(startColumn, startRow, numColumns, numRows);\n  }\n  setOutputPackedMatrixWriteRegion(startRow, numRows, startColumn, numColumns) {\n    throw new Error('setOutputPackedMatrixWriteRegion not implemented.');\n  }\n  debugValidate() {\n    if (this.program != null) {\n      webgl_util.validateProgram(this.gl, this.program);\n    }\n    webgl_util.validateFramebuffer(this.gl);\n  }\n  executeProgram() {\n    this.throwIfDisposed();\n    this.throwIfNoProgram();\n    const gl = this.gl;\n    if (this.debug) {\n      const boundVao = this.getVertexArray();\n      console.assert(boundVao === this.program.vao, 'VAO changed between setProgram and executeProgram!');\n      this.debugValidate();\n    }\n    webgl_util.callAndCheck(gl, () => gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0));\n  }\n  blockUntilAllProgramsCompleted() {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.finish());\n  }\n  getQueryTimerExtension() {\n    if (this.disjointQueryTimerExtension == null) {\n      this.disjointQueryTimerExtension = webgl_util.getExtensionOrThrow(this.gl, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2 ? 'EXT_disjoint_timer_query_webgl2' : 'EXT_disjoint_timer_query');\n    }\n    return this.disjointQueryTimerExtension;\n  }\n  getQueryTimerExtensionWebGL2() {\n    return this.getQueryTimerExtension();\n  }\n  getQueryTimerExtensionWebGL1() {\n    return this.getQueryTimerExtension();\n  }\n  beginQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      const query = gl2.createQuery();\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    const query = ext.createQueryEXT();\n    ext.beginQueryEXT(ext.TIME_ELAPSED_EXT, query);\n    return query;\n  }\n  endQuery() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION') === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    }\n    const ext = this.getQueryTimerExtensionWebGL1();\n    ext.endQueryEXT(ext.TIME_ELAPSED_EXT);\n  }\n  async waitForQueryAndGetTime(query) {\n    await util.repeatedTry(() => this.disposed ||\n    // while testing contexts are created / disposed\n    // in rapid succession, so without this check we\n    // may poll for the query timer indefinitely\n    this.isQueryAvailable(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION')));\n    return this.getQueryTime(query, env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION'));\n  }\n  getQueryTime(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return null;\n    }\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const timeElapsedNanos = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const timeElapsedNanos = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_EXT);\n      // Return milliseconds.\n      return timeElapsedNanos / 1000000;\n    }\n  }\n  isQueryAvailable(query, queryTimerVersion) {\n    if (queryTimerVersion === 0) {\n      return true;\n    }\n    if (queryTimerVersion === 2) {\n      const gl2 = this.gl;\n      const ext = this.getQueryTimerExtensionWebGL2();\n      const available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n      return available && !this.disjoint;\n    } else {\n      const ext = this.getQueryTimerExtensionWebGL1();\n      const available = ext.getQueryObjectEXT(query, ext.QUERY_RESULT_AVAILABLE_EXT);\n      if (this.disjoint == null) {\n        this.disjoint = this.gl.getParameter(ext.GPU_DISJOINT_EXT);\n      }\n      return available && !this.disjoint;\n    }\n  }\n  pollFence(fenceContext) {\n    return new Promise(resolve => {\n      this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n  pollItems() {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {\n        resolveFn\n      } = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n  addItemToPoll(isDoneFn, resolveFn) {\n    this.itemsToPoll.push({\n      isDoneFn,\n      resolveFn\n    });\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    let scheduleFn = undefined;\n    if ('setTimeoutCustom' in env().platform) {\n      scheduleFn = env().platform.setTimeoutCustom.bind(env().platform);\n    }\n    util.repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    }, () => 0, null, scheduleFn);\n  }\n  bindTextureToFrameBuffer(texture) {\n    this.throwIfDisposed();\n    webgl_util.bindColorTextureToFramebuffer(this.gl, texture, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(this.gl);\n    }\n  }\n  unbindTextureToFrameBuffer() {\n    if (this.outputTexture != null) {\n      webgl_util.bindColorTextureToFramebuffer(this.gl, this.outputTexture, this.framebuffer);\n      if (this.debug) {\n        webgl_util.validateFramebuffer(this.gl);\n      }\n    } else {\n      webgl_util.unbindColorTextureFromFramebuffer(this.gl, this.framebuffer);\n    }\n  }\n  downloadMatrixDriver(texture, downloadAndDecode) {\n    this.bindTextureToFrameBuffer(texture);\n    const result = downloadAndDecode();\n    this.unbindTextureToFrameBuffer();\n    return result;\n  }\n  setOutputMatrixTextureDriver(outputMatrixTextureMaybePacked, width, height) {\n    this.throwIfDisposed();\n    const gl = this.gl;\n    webgl_util.bindColorTextureToFramebuffer(gl, outputMatrixTextureMaybePacked, this.framebuffer);\n    if (this.debug) {\n      webgl_util.validateFramebuffer(gl);\n    }\n    this.outputTexture = outputMatrixTextureMaybePacked;\n    webgl_util.callAndCheck(gl, () => gl.viewport(0, 0, width, height));\n    webgl_util.callAndCheck(gl, () => gl.scissor(0, 0, width, height));\n  }\n  setOutputMatrixWriteRegionDriver(x, y, width, height) {\n    this.throwIfDisposed();\n    webgl_util.callAndCheck(this.gl, () => this.gl.scissor(x, y, width, height));\n  }\n  throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error('Attempted to use disposed GPGPUContext.');\n    }\n  }\n  throwIfNoProgram() {\n    if (this.program == null) {\n      throw new Error('No GPU program is currently set.');\n    }\n  }\n}\n/**\n * Finds the index of the last true element using linear search.\n * Note: We can't do binary search because Chrome expects us to explicitly\n * test all fences before download:\n * https://github.com/tensorflow/tfjs/issues/1145\n */\nexport function linearSearchLastTrue(arr) {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Shared functionality among backends.\nexport { simpleAbsImpl } from './kernels/Abs';\nexport { addImpl } from './kernels/Add';\nexport { bincountImpl, bincountReduceImpl } from './kernels/Bincount_impl';\nexport { bitwiseAndImpl } from './kernels/BitwiseAnd';\nexport { castImpl } from './kernels/Cast';\nexport { ceilImpl } from './kernels/Ceil';\nexport { concatImpl } from './kernels/Concat_impl';\nexport { equalImpl } from './kernels/Equal';\nexport { expImpl } from './kernels/Exp';\nexport { expm1Impl } from './kernels/Expm1';\nexport { floorImpl } from './kernels/Floor';\nexport { floorDivImpl } from './kernels/FloorDiv';\nexport { gatherNdImpl } from './kernels/GatherNd_Impl';\nexport { gatherV2Impl } from './kernels/GatherV2_impl';\nexport { greaterImpl } from './kernels/Greater';\nexport { greaterEqualImpl } from './kernels/GreaterEqual';\nexport { lessImpl } from './kernels/Less';\nexport { lessEqualImpl } from './kernels/LessEqual';\nexport { linSpaceImpl } from './kernels/LinSpace_impl';\nexport { logImpl } from './kernels/Log';\nexport { maxImpl } from './kernels/Max_impl';\nexport { maximumImpl } from './kernels/Maximum';\nexport { minimumImpl } from './kernels/Minimum';\nexport { multiplyImpl } from './kernels/Multiply';\nexport { negImpl } from './kernels/Neg';\nexport { notEqualImpl } from './kernels/NotEqual';\nexport { prodImpl } from './kernels/Prod';\nexport { raggedGatherImpl } from './kernels/RaggedGather_impl';\nexport { raggedRangeImpl } from './kernels/RaggedRange_impl';\nexport { raggedTensorToTensorImpl } from './kernels/RaggedTensorToTensor_impl';\nexport { rangeImpl } from './kernels/Range_impl';\nexport { rsqrtImpl } from './kernels/Rsqrt';\nexport { scatterImpl } from './kernels/Scatter_impl';\nexport { sigmoidImpl } from './kernels/Sigmoid';\nexport { sliceImpl } from './kernels/Slice';\nexport { sparseFillEmptyRowsImpl } from './kernels/SparseFillEmptyRows_impl';\nexport { sparseReshapeImpl } from './kernels/SparseReshape_impl';\nexport { sparseSegmentReductionImpl } from './kernels/SparseSegmentReduction_impl';\nexport { sqrtImpl } from './kernels/Sqrt';\nexport { squaredDifferenceImpl } from './kernels/SquaredDifference';\nexport { staticRegexReplaceImpl } from './kernels/StaticRegexReplace';\nexport { stridedSliceImpl } from './kernels/StridedSlice_impl';\nexport { stringNGramsImpl } from './kernels/StringNGrams_impl';\nexport { stringSplitImpl } from './kernels/StringSplit_impl';\nexport { stringToHashBucketFastImpl } from './kernels/StringToHashBucketFast_impl';\nexport { subImpl } from './kernels/Sub';\nexport { tileImpl } from './kernels/Tile_impl';\nexport { topKImpl } from './kernels/TopK_impl';\nexport { transposeImpl } from './kernels/Transpose_impl';\nexport { uniqueImpl } from './kernels/Unique_impl';\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function assertNotComplex(tensor, opName) {\n  if (!Array.isArray(tensor)) {\n    tensor = [tensor];\n  }\n  tensor.forEach(t => {\n    if (t != null) {\n      util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors in the CPU backend.`);\n    }\n  });\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function simpleAbsImpl(vals) {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\nexport const abs = args => {\n  const {\n    x\n  } = args.inputs;\n  const cpuBackend = args.backend;\n  assertNotComplex(x, 'abs');\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values;\n  resultValues = simpleAbsImpl(values);\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\nexport const absConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op) {\n  return (aShape, bShape, aVals, bVals, dtype) => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n    const result = util.getTypedArrayFromDType(dtype, resultSize);\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n    return [result, newShape];\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nexport function complex(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    real,\n    imag\n  } = inputs;\n  const realVals = backend.data.get(real.dataId).values;\n  const imagVals = backend.data.get(imag.dataId).values;\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.data.get(complexInfo.dataId);\n  // The complex tensor owns the underlying real and imag tensorInfos, only the\n  // complex tensor tracks refCount, when complexData is disposed the\n  // underlying tensorData will be disposed.\n  complex.complexTensorInfos = {\n    real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n    imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n  };\n  return complexInfo;\n}\nexport const complexConfig = {\n  kernelName: Complex,\n  backendName: 'cpu',\n  kernelFunc: complex\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { complex } from '../kernels/Complex';\n/**\n * Generates a tensorInfo with all zeros value.\n * @param backend cpu backend.\n * @param shape Shape for the zeros tensor.\n * @param dtype Optional. If set, the result has this dtype.\n */\nexport function zeros(backend, shape, dtype = 'float32') {\n  if (dtype === 'complex64') {\n    const real = zeros(backend, shape, 'float32');\n    const imag = zeros(backend, shape, 'float32');\n    return complex({\n      inputs: {\n        real,\n        imag\n      },\n      backend\n    });\n  }\n  const values = util.makeZerosTypedArray(util.sizeFromShape(shape), dtype);\n  return backend.makeTensorInfo(shape, dtype, values);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Identity } from '@tensorflow/tfjs-core';\nexport function identity(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  backend.incRef(x.dataId);\n  return {\n    dataId: x.dataId,\n    shape: x.shape,\n    dtype: x.dtype\n  };\n}\nexport const identityConfig = {\n  kernelName: Identity,\n  backendName: 'cpu',\n  kernelFunc: identity\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Real } from '@tensorflow/tfjs-core';\nexport function real(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\nexport const realConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { zeros } from '../utils/zeros_impl';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { real } from './Real';\nexport function castImpl(values, shape, inputType, dtype) {\n  if (dtype === 'int32') {\n    const resultValues = Int32Array.from(values);\n    return [shape, 'int32', resultValues];\n  }\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const zero = util.toTypedArray([0], inputType);\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl((a, b) => a !== b ? 1 : 0)(shape, [], values, zero, 'bool');\n    return [resultShape, 'bool', resultData];\n  }\n  throw new Error(`Error in Cast: failed to cast ${inputType} to ${dtype}`);\n}\nexport function cast(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dtype\n  } = attrs;\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x\n        },\n        backend\n      });\n    }\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    const result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensorInfo\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n    return result;\n  }\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend,\n      attrs: {\n        dtype\n      }\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n    return {\n      dataId: result.dataId,\n      shape: result.shape,\n      dtype\n    };\n  }\n  const values = backend.data.get(x.dataId).values;\n  const [resultShape, resultType, resultData] = castImpl(values, x.shape, x.dtype, dtype);\n  return backend.makeTensorInfo(resultShape, resultType, resultData);\n}\nexport const castConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from '../kernels/Cast';\nimport { complex } from '../kernels/Complex';\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n  if (complexImpl == null) {\n    return ({\n      inputs,\n      backend\n    }) => {\n      const {\n        a,\n        b\n      } = inputs;\n      const cpuBackend = backend;\n      assertNotComplex([a, b], name);\n      const aVals = cpuBackend.data.get(a.dataId).values;\n      const bVals = cpuBackend.data.get(b.dataId).values;\n      const decodedAVals = a.dtype === 'string' ?\n      // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(aVals) : aVals;\n      const decodedBVals = a.dtype === 'string' ?\n      // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(bVals) : bVals;\n      const $dtype = dtype || a.dtype;\n      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n  return ({\n    inputs,\n    backend\n  }) => {\n    const {\n      a,\n      b\n    } = inputs;\n    const cpuBackend = backend;\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast({\n        inputs: {\n          x: a\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n      const aRealVals = cpuBackend.data.get(aReal.dataId).values;\n      const aImagVals = cpuBackend.data.get(aImag.dataId).values;\n      const $bComplex = cast({\n        inputs: {\n          x: b\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n      const bRealVals = cpuBackend.data.get(bReal.dataId).values;\n      const bImagVals = cpuBackend.data.get(bImag.dataId).values;\n      const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n      const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n      const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n      const result = complex({\n        inputs: {\n          real: resultReal,\n          imag: resultImag\n        },\n        backend: cpuBackend\n      });\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values;\n      const bVals = cpuBackend.data.get(b.dataId).values;\n      const $dtype = dtype || a.dtype;\n      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op) {\n  return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n        const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n        const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const addImpl = createSimpleBinaryKernelImpl((a, b) => a + b);\nexport const addComplexImpl = createComplexBinaryKernelImpl((aReal, aImag, bReal, bImag) => {\n  return {\n    real: aReal + bReal,\n    imag: aImag + bImag\n  };\n});\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\nexport const addConfig = {\n  kernelName: Add,\n  backendName: 'cpu',\n  kernelFunc: add\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype);\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n    if (value >= size) {\n      continue;\n    }\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n  return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n      if (value >= size) {\n        continue;\n      }\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n  return outBuf;\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BitwiseAnd } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const bitwiseAndImpl = createSimpleBinaryKernelImpl((a, b) => a & b);\nexport const bitwiseAnd = binaryKernelFunc(BitwiseAnd, bitwiseAndImpl);\nexport const bitwiseAndConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'cpu',\n  kernelFunc: bitwiseAnd\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for unary op.\n */\nexport function createSimpleUnaryImpl(op) {\n  return (values, dtype, attrs) => {\n    const newValues = util.getArrayFromDType(dtype, values.length);\n    for (let i = 0; i < values.length; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return newValues;\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { createSimpleUnaryImpl } from './unary_impl';\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(name, op, dtype) {\n  const impl = createSimpleUnaryImpl(op);\n  return unaryKernelFuncFromImpl(name, impl, dtype);\n}\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n  return ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    assertNotComplex(x, name);\n    const cpuBackend = backend;\n    const values = cpuBackend.data.get(x.dataId).values;\n    let decoded;\n    if (x.dtype === 'string') {\n      if (!Array.isArray(values)) {\n        throw new Error('String tensor\\'s value was not an instance of Array');\n      }\n      decoded = backend_util.fromUint8ToStringArray(values);\n    } else {\n      decoded = values;\n    }\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(decoded, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const ceilImpl = createSimpleUnaryImpl(xi => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\nexport const ceilConfig = {\n  kernelName: Ceil,\n  backendName: 'cpu',\n  kernelFunc: ceil\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function concatImpl(inputs, outShape, dtype, simplyConcat) {\n  const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n  if (simplyConcat && dtype !== 'string') {\n    // Use built-in TypedArray.set() method for speed.\n    let offset = 0;\n    inputs.forEach(input => {\n      const size = util.sizeFromShape(input.shape);\n      outVals.set(input.vals, offset);\n      offset += size;\n    });\n  } else {\n    let colOffset = 0;\n    inputs.forEach(input => {\n      const decodedData = dtype === 'string' ? backend_util.fromUint8ToStringArray(input.vals) : input.vals;\n      let tIdx = 0;\n      for (let row = 0; row < input.shape[0]; ++row) {\n        const resIdx = row * outShape[1] + colOffset;\n        for (let col = 0; col < input.shape[1]; ++col) {\n          outVals[resIdx + col] = decodedData[tIdx++];\n        }\n      }\n      colOffset += input.shape[1];\n    });\n  }\n  return outVals;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Equal } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const equalImpl = createSimpleBinaryKernelImpl((a, b) => a === b ? 1 : 0);\nexport const equal = binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\nexport const equalConfig = {\n  kernelName: Equal,\n  backendName: 'cpu',\n  kernelFunc: equal\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expImpl = createSimpleUnaryImpl(xi => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl, 'float32');\nexport const expConfig = {\n  kernelName: Exp,\n  backendName: 'cpu',\n  kernelFunc: exp\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expm1Impl = createSimpleUnaryImpl(xi => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\nexport const expm1Config = {\n  kernelName: Expm1,\n  backendName: 'cpu',\n  kernelFunc: expm1\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const floorImpl = createSimpleUnaryImpl(xi => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\nexport const floorConfig = {\n  kernelName: Floor,\n  backendName: 'cpu',\n  kernelFunc: floor\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FloorDiv } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const floorDivImpl = createSimpleBinaryKernelImpl((a, b) => Math.floor(a / b));\nexport const floorDiv = binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\nexport const floorDivConfig = {\n  kernelName: FloorDiv,\n  backendName: 'cpu',\n  kernelFunc: floorDiv\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherNdImpl(indicesData, paramsBuf, dtype, numSlices, sliceRank, sliceSize, strides, paramsShape, paramsSize) {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] = paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n  return outBuf;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n    const originalLoc = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex];\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n  return outBuf;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Greater } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterImpl = createSimpleBinaryKernelImpl((a, b) => a > b ? 1 : 0);\nexport const greater = binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\nexport const greaterConfig = {\n  kernelName: Greater,\n  backendName: 'cpu',\n  kernelFunc: greater\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GreaterEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterEqualImpl = createSimpleBinaryKernelImpl((a, b) => a >= b ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\nexport const greaterEqualConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'cpu',\n  kernelFunc: greaterEqual\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Less } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessImpl = createSimpleBinaryKernelImpl((a, b) => a < b ? 1 : 0);\nexport const less = binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\nexport const lessConfig = {\n  kernelName: Less,\n  backendName: 'cpu',\n  kernelFunc: less\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LessEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessEqualImpl = createSimpleBinaryKernelImpl((a, b) => a <= b ? 1 : 0);\nexport const lessEqual = binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\nexport const lessEqualConfig = {\n  kernelName: LessEqual,\n  backendName: 'cpu',\n  kernelFunc: lessEqual\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function linSpaceImpl(start, stop, num) {\n  const step = (stop - start) / (num - 1);\n  const values = util.makeZerosTypedArray(num, 'float32');\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const logImpl = createSimpleUnaryImpl(xi => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\nexport const logConfig = {\n  kernelName: Log,\n  backendName: 'cpu',\n  kernelFunc: log\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n  const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) || value > max) {\n        // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const maximumImpl = createSimpleBinaryKernelImpl((aValue, bValue) => Math.max(aValue, bValue));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\nexport const maximumConfig = {\n  kernelName: Maximum,\n  backendName: 'cpu',\n  kernelFunc: maximum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const minimumImpl = createSimpleBinaryKernelImpl((aValue, bValue) => Math.min(aValue, bValue));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\nexport const minimumConfig = {\n  kernelName: Minimum,\n  backendName: 'cpu',\n  kernelFunc: minimum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multiply } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const multiplyImpl = createSimpleBinaryKernelImpl((aValue, bValue) => aValue * bValue);\nexport const multiplyComplexImpl = createComplexBinaryKernelImpl((aReal, aImag, bReal, bImag) => {\n  return {\n    real: aReal * bReal - aImag * bImag,\n    imag: aReal * bImag + aImag * bReal\n  };\n});\nexport const multiply = binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\nexport const multiplyConfig = {\n  kernelName: Multiply,\n  backendName: 'cpu',\n  kernelFunc: multiply\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { multiplyImpl } from './Multiply';\nexport function negImpl(xVals, xShape, xDtype) {\n  const minusOne = util.createScalarValue(-1, xDtype);\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\nexport function neg(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  assertNotComplex(x, 'neg');\n  const xVals = backend.data.get(x.dataId).values;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\nexport const negConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NotEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const notEqualImpl = createSimpleBinaryKernelImpl((a, b) => a !== b ? 1 : 0);\nexport const notEqual = binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\nexport const notEqualConfig = {\n  kernelName: NotEqual,\n  backendName: 'cpu',\n  kernelFunc: notEqual\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n  const xRank = xShape.length;\n  const xSize = util.sizeFromShape(xShape);\n  const xStrides = util.computeStrides(xShape);\n  const newStrides = util.computeStrides(newShape);\n  const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n  for (let i = 0; i < xSize; ++i) {\n    const loc = util.indexToLoc(i, xRank, xStrides);\n    // Permute location.\n    const newLoc = new Array(loc.length);\n    for (let i = 0; i < newLoc.length; i++) {\n      newLoc[i] = loc[perm[i]];\n    }\n    const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n    result[newIndex] = xVals[i];\n  }\n  return result;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transposeImpl } from './Transpose_impl';\nexport function transpose(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    perm\n  } = attrs;\n  assertNotComplex(x, 'transpose');\n  const xRank = x.shape.length;\n  const newShape = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n  const values = backend.data.get(x.dataId).values;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {\n    dataId,\n    shape: newShape,\n    dtype: x.dtype\n  };\n}\nexport const transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n  const outDtype = upcastType(xDtype, 'int32');\n  const outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  for (let i = 0; i < outVals.length; ++i) {\n    const offset = i * reduceSize;\n    let prod = 1;\n    for (let j = 0; j < reduceSize; ++j) {\n      prod *= xVals[offset + j];\n    }\n    outVals[i] = prod;\n  }\n  return {\n    outVals,\n    outShape,\n    outDtype\n  };\n}\nexport function prod(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  assertNotComplex(x, 'prod');\n  const xRank = x.shape.length;\n  const axes = util.parseAxisParam(axis, x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = x;\n  const intermediateTensorInfos = [];\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    intermediateTensorInfos.push(permutedX);\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n  const xVals = backend.data.get(permutedX.dataId).values;\n  const {\n    outVals,\n    outShape,\n    outDtype\n  } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n  let resultShape = outShape;\n  if (keepDims) {\n    resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n  }\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport const prodConfig = {\n  kernelName: Prod,\n  backendName: 'cpu',\n  kernelFunc: prod\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nfunction validateIndices(indices, indicesShape, numParams) {\n  indices.forEach((index, i) => {\n    if (index < 0 || index >= numParams) {\n      const locString = util.indexToLoc(i, indicesShape.length, util.computeStrides(indicesShape)).join(',');\n      throw new Error(`indices[${locString}] = ${index} is not in [0, ${numParams})`);\n    }\n  });\n}\nfunction validateSplits(paramsNestedSplits, numParamsDenseValues) {\n  // Validate\n  for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n    const splits = paramsNestedSplits[dim];\n    const lastSplit = dim === paramsNestedSplits.length - 1 ? numParamsDenseValues : paramsNestedSplits[dim + 1].length;\n    if (splits.length === 0) {\n      throw new Error('Ragged splits may not be empty');\n    }\n    if (splits[0] < 0) {\n      throw new Error('Ragged splits must be non-negative');\n    }\n    if (splits[splits.length - 1] > lastSplit) {\n      throw new Error('Ragged splits must not point past values');\n    }\n    for (let i = 1; i < splits.length; ++i) {\n      if (splits[i - 1] > splits[i]) {\n        throw new Error('Ragged splits must be sorted in ascending order');\n      }\n    }\n  }\n}\n// Construct the `splits` output tensors, encoded using a nested vector.\n// Also find the slices of values that need to be copied, and store them\n// in `valueSlices`.  The total number of values that will be copied (which\n// we need for allocating the output values tensor) is stored in `numValues`.\nfunction makeSplits(indices, indicesShape, paramsNestedSplits, numParamsDenseValues) {\n  const valueSlices = [];\n  let numValues = 0;\n  const numSplits = indicesShape.length - 1 + paramsNestedSplits.length;\n  const outSplits = new Array(numSplits).fill(null).map(() => [0]);\n  validateSplits(paramsNestedSplits, numParamsDenseValues);\n  // Add `splits` that come from all but the last dimension of the dense\n  // Tensor `indices`.  In particular, for each dimension D, we add a\n  // splits tensor whose values are:\n  //   range(reduceProd(splits.shape[:D]) + 1) * splits.shape[D+1]\n  // E.g., if indices.shape=[2, 3, 4] then we will add splits tensors:\n  //   [0, 3, 6]                    # length=2+1, stride=3\n  //   [0, 4, 8, 12, 16, 20, 24]    # length=2*3+1, stride=4\n  let nrows = 1;\n  for (let dim = 0; dim < indicesShape.length - 1; ++dim) {\n    nrows *= indicesShape[dim];\n    const rowLength = indicesShape[dim + 1];\n    for (let i = 1; i < nrows + 1; ++i) {\n      outSplits[dim].push(i * rowLength);\n    }\n  }\n  // Add `splits` that come from `paramsNestedSplits`.  Starting with the\n  // outermost ragged dimension (i.e., the first `splits` tensor), we work\n  // our way in, finding the range of values that should be copied.  As we\n  // go, we update the output `splits` for each dimension with the appropriate\n  // values.  In particular, the *lengths* of the slices from `param_splits`\n  // should be copied to generate corresponding slice lengths in the output\n  // splits.  E.g., if we are copying a ragged row with length 4, then we\n  // should add a new split point to outSplits that is 4 greater than the\n  // previous split point in outSplits.\n  for (let i = 0; i < indices.length; ++i) {\n    let start = indices[i];\n    let limit = indices[i] + 1;\n    // Copy splits.\n    for (let dim = 0; dim < paramsNestedSplits.length; ++dim) {\n      const splits = paramsNestedSplits[dim];\n      const outDim = dim + indicesShape.length - 1;\n      if (outDim >= 0) {\n        const outSplitsOutDim = outSplits[outDim];\n        const delta = outSplitsOutDim[outSplitsOutDim.length - 1] - splits[start];\n        for (let j = start; j < limit; ++j) {\n          outSplits[outDim].push(splits[j + 1] + delta);\n        }\n      }\n      start = splits[start];\n      limit = splits[limit];\n    }\n    if (limit !== start) {\n      valueSlices.push([start, limit]);\n      numValues += limit - start;\n    }\n  }\n  return {\n    outSplits,\n    valueSlices,\n    numValues\n  };\n}\nfunction getSplits(outSplits) {\n  const splitsOut = [];\n  for (let i = 0; i < outSplits.length; ++i) {\n    const numSplits = outSplits[i].length;\n    const splits = util.getArrayFromDType('int32', numSplits);\n    splitsOut.push(splits);\n    outSplits[i].forEach((value, j) => splits[j] = value);\n  }\n  return splitsOut;\n}\nfunction computeFlatOuterDims(orig, numOutDims) {\n  const outDims = orig.slice(0, numOutDims);\n  while (outDims.length < numOutDims) {\n    outDims.push(1);\n  }\n  for (let inDim = numOutDims; inDim < orig.length; inDim++) {\n    outDims[numOutDims - 1] *= orig[inDim];\n  }\n  return outDims;\n}\n// For each slice in `(start, limit)` in `valueSlices`, append\n// `paramsDenseValues[start,...,limit] to `values`.  `valueSize` indicates\n// the number of scalars contained in each value paramsDenseValues[i].\nfunction writeValueSlices(paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize, values, valuesShape) {\n  const denseM = computeFlatOuterDims(paramsDenseValuesShape, 2)[1];\n  const valuesM = computeFlatOuterDims(valuesShape, 2)[1];\n  let outPos = 0;\n  for (const slice of valueSlices) {\n    for (let i = slice[0]; i < slice[1]; ++i) {\n      for (let j = 0; j < valueSize; ++j) {\n        values[outPos * valuesM + j] = paramsDenseValues[i * denseM + j];\n      }\n      ++outPos;\n    }\n  }\n}\nfunction getValues(paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType, valueSlices, numValues) {\n  const valuesShape = paramsDenseValuesShape.slice();\n  valuesShape[0] = numValues;\n  const valuesOut = util.getArrayFromDType(paramsDenseValuesDType, util.sizeFromShape(valuesShape));\n  const numElements = paramsDenseValues.length;\n  const valueSize = numElements === 0 ? 0 : numElements / paramsDenseValuesShape[0];\n  writeValueSlices(paramsDenseValues, paramsDenseValuesShape, valueSlices, valueSize, valuesOut, valuesShape);\n  return [valuesOut, valuesShape];\n}\nexport function raggedGatherImpl(paramsNestedSplits, paramsNestedSplitsShapes, paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType, indices, indicesShape, outputRaggedRank) {\n  if (paramsNestedSplits.length === 0) {\n    throw new Error('paramsNestedSplits must be non empty');\n  }\n  if (paramsNestedSplitsShapes[0].length === 0) {\n    throw new Error('Split tensors must not be scalars');\n  }\n  const numParams = paramsNestedSplitsShapes[0][0] - 1;\n  validateIndices(indices, indicesShape, numParams);\n  if (paramsDenseValuesShape.length === 0) {\n    throw new Error('params.rank must be nonzero');\n  }\n  const numParamsDenseValues = paramsDenseValuesShape[0];\n  // Calculate the `splits`, and store the value slices that we need to\n  // copy in `valueSlices`.\n  const {\n    outSplits,\n    valueSlices,\n    numValues\n  } = makeSplits(indices, indicesShape, paramsNestedSplits, numParamsDenseValues);\n  // Write the output tensors.\n  const outputNestedSplits = getSplits(outSplits);\n  const outputDenseValues = getValues(paramsDenseValues, paramsDenseValuesShape, paramsDenseValuesDType, valueSlices, numValues);\n  return [outputNestedSplits, outputDenseValues[0], outputDenseValues[1]];\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nconst INT32_MAX = 2147483647;\nexport function raggedRangeImpl(starts, startsShape, startsDType, limits, limitsShape, deltas, deltasShape) {\n  // Check input tensor shapes.\n  if (startsShape.length > 1) {\n    throw new Error('starts must be a scalar or vector');\n  }\n  if (limitsShape.length > 1) {\n    throw new Error('limits must be a scalar or vector');\n  }\n  if (deltasShape.length > 1) {\n    throw new Error('deltas must be a scalar or vector');\n  }\n  // Determine which tensors we need to broadcast.\n  const broadcastStarts = startsShape.length === 0;\n  const broadcastLimits = limitsShape.length === 0;\n  const broadcastDeltas = deltasShape.length === 0;\n  // nRows (number of output rows) is the size of the non-broadcast inputs,\n  // or 1 if all inputs are scalars.\n  const inSizes = [];\n  if (!broadcastStarts) {\n    inSizes.push(startsShape[0]);\n  }\n  if (!broadcastLimits) {\n    inSizes.push(limitsShape[0]);\n  }\n  if (!broadcastDeltas) {\n    inSizes.push(deltasShape[0]);\n  }\n  for (let i = 1; i < inSizes.length; ++i) {\n    if (inSizes[i] !== inSizes[i - 1]) {\n      throw new Error('starts, limits, and deltas must have the same shape');\n    }\n  }\n  const nRows = inSizes.length === 0 ? 1 : inSizes[0];\n  // Construct the rtNestedSplits tensor.\n  const rtNestedSplits = util.getArrayFromDType('int32', nRows + 1);\n  rtNestedSplits[0] = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const start = broadcastStarts ? starts[0] : starts[row];\n    const limit = broadcastLimits ? limits[0] : limits[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    if (delta === 0) {\n      throw new Error('Requires delta != 0');\n    }\n    let size; // The number of elements in the specified range.\n    if (delta > 0 && limit < start || delta < 0 && limit > start) {\n      size = 0;\n    } else {\n      size = Math.ceil(Math.abs((limit - start) / delta));\n      if (size > INT32_MAX) {\n        throw new Error(`Requires ((limit - start) / delta) <= ${INT32_MAX}`);\n      }\n    }\n    rtNestedSplits[row + 1] = rtNestedSplits[row] + size;\n  }\n  const nVals = rtNestedSplits[nRows];\n  // Construct the rtDenseValues tensor.\n  const rtDenseValues = util.getArrayFromDType(startsDType, nVals);\n  let valueIndex = 0;\n  for (let row = 0; row < nRows; ++row) {\n    const rowSize = rtNestedSplits[row + 1] - rtNestedSplits[row];\n    let value = broadcastStarts ? starts[0] : starts[row];\n    const delta = broadcastDeltas ? deltas[0] : deltas[row];\n    for (let i = 0; i < rowSize; ++i) {\n      rtDenseValues[valueIndex++] = value;\n      value += delta;\n    }\n  }\n  return [rtNestedSplits, rtDenseValues];\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, broadcastTo, reshape, tidy, util } from '@tensorflow/tfjs-core';\nvar RowPartitionType = backend_util.RowPartitionType;\n// Based on\n// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/ragged_tensor_to_tensor_op.cc\nclass RaggedTensorToTensorOp {\n  constructor(shape, shapeShape, values, valuesShape, valuesDType, defaultValue, defaultValueShape, rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypeStrings) {\n    this.shape = shape;\n    this.shapeShape = shapeShape;\n    this.values = values;\n    this.valuesShape = valuesShape;\n    this.valuesDType = valuesDType;\n    this.defaultValue = defaultValue;\n    this.defaultValueShape = defaultValueShape;\n    this.rowPartitionValues = rowPartitionValues;\n    this.rowPartitionValuesShapes = rowPartitionValuesShapes;\n    this.rowPartitionTypes = backend_util.getRowPartitionTypesHelper(rowPartitionTypeStrings);\n    this.raggedRank = backend_util.getRaggedRank(this.rowPartitionTypes);\n  }\n  getRowPartitionTypeByDimension(dimension) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionTypes[dimension + 1];\n    } else {\n      return this.rowPartitionTypes[dimension];\n    }\n  }\n  // Returns the relationship between dimension and dimension + 1.\n  getRowPartitionTensor(dimension) {\n    if (this.rowPartitionTypes[0] === RowPartitionType.FIRST_DIM_SIZE) {\n      return this.rowPartitionValues[dimension + 1];\n    } else {\n      return this.rowPartitionValues[dimension];\n    }\n  }\n  getMaxWidth(dimension) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension - 1);\n    switch (this.getRowPartitionTypeByDimension(dimension - 1)) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return RaggedTensorToTensorOp.getMaxWidthValueRowID(rowPartitionTensor);\n      case RowPartitionType.ROW_SPLITS:\n        return RaggedTensorToTensorOp.getMaxWidthRowSplit(rowPartitionTensor);\n      default:\n        throw new Error(`Cannot handle partition type ${RowPartitionType[this.getRowPartitionTypeByDimension(dimension - 1)]}`);\n    }\n  }\n  static getMaxWidthRowSplit(rowSplit) {\n    const tensorLength = rowSplit.length;\n    if (tensorLength === 0 || tensorLength === 1) {\n      return 0;\n    }\n    let maxWidth = 0;\n    for (let i = 0; i < tensorLength - 1; ++i) {\n      const currentWidth = rowSplit[i + 1] - rowSplit[i];\n      if (currentWidth > maxWidth) {\n        maxWidth = currentWidth;\n      }\n    }\n    return maxWidth;\n  }\n  static getMaxWidthValueRowID(valueRowIds) {\n    const indexLength = valueRowIds.length;\n    if (indexLength === 0) {\n      return 0;\n    }\n    let firstEqualIndex = 0;\n    let firstEqualIndexValue = valueRowIds[0];\n    let maxWidth = 0;\n    for (let i = 1; i < indexLength; ++i) {\n      const value = valueRowIds[i];\n      if (value !== firstEqualIndexValue) {\n        firstEqualIndexValue = value;\n        maxWidth = Math.max(i - firstEqualIndex, maxWidth);\n        firstEqualIndex = i;\n      }\n    }\n    return Math.max(indexLength - firstEqualIndex, maxWidth);\n  }\n  tensorShapeFromTensor(t, tShape, isPartial = true) {\n    if (tShape.length === 0) {\n      if (t[0] === -1) {\n        return [];\n      }\n      throw new Error(`The only valid scalar shape tensor is the fully unknown shape specified as -1.`);\n    }\n    // MakePartialShape/MakeShapeHelper.\n    return makeShape(t, isPartial);\n  }\n  calculateOutputSize(firstDim) {\n    const valueShape = this.valuesShape;\n    const defaultValueShape = this.defaultValueShape;\n    backend_util.validateDefaultValueShape(defaultValueShape, valueShape);\n    const shape = this.tensorShapeFromTensor(this.shape, this.shapeShape);\n    const outputShape = backend_util.combineRaggedTensorToTensorShapes(this.raggedRank, shape, valueShape);\n    const result = outputShape;\n    if (result[0] < 0) {\n      result[0] = firstDim;\n    }\n    for (let i = 1; i <= this.raggedRank; ++i) {\n      if (result[i] < 0) {\n        result[i] = this.getMaxWidth(i);\n      }\n    }\n    return result;\n  }\n  /**\n   * The outputIndex represents the index in the output tensor\n   * where the first element of a particular dimension would be written.\n   * If it is -1, it indicates that the index is out of scope.\n   * Example, given firstDimension = 10, firstDimensionOutput = 6,\n   * and outputIndexMultiplier = 100:\n   * result = [0 100 200 300 400 500 -1 -1 -1 -1]\n   * If firstDimensionOutput = 11 instead, then:\n   * result = [0 100 200 300 400 500 600 700 800 900]\n   */\n  calculateFirstParentOutputIndex(firstDimension, outputIndexMultiplier, firstDimensionOutput) {\n    const minDimension = Math.min(firstDimension, firstDimensionOutput);\n    const result = [];\n    let currentOutputIndex = 0;\n    for (let i = 0; i < minDimension; ++i, currentOutputIndex += outputIndexMultiplier) {\n      result.push(currentOutputIndex);\n    }\n    for (let i = minDimension; i < firstDimension; ++i) {\n      result.push(-1);\n    }\n    util.assert(result.length === firstDimension, () => 'Final length of result must be equal to firstDimension.');\n    return result;\n  }\n  calculateOutputIndexRowSplit(rowSplit, parentOutputIndex, outputIndexMultiplier, outputSize) {\n    const rowSplitSize = rowSplit.length;\n    const result = [];\n    for (let i = 0; i < rowSplitSize - 1; ++i) {\n      const rowLength = rowSplit[i + 1] - rowSplit[i];\n      let realLength = Math.min(outputSize, rowLength);\n      let parentOutputIndexCurrent = parentOutputIndex[i];\n      if (parentOutputIndexCurrent === -1) {\n        realLength = 0;\n      }\n      for (let j = 0; j < realLength; ++j) {\n        result.push(parentOutputIndexCurrent);\n        parentOutputIndexCurrent += outputIndexMultiplier;\n      }\n      for (let j = 0; j < rowLength - realLength; ++j) {\n        result.push(-1);\n      }\n    }\n    if (rowSplitSize > 0 && result.length !== rowSplit[rowSplitSize - 1]) {\n      throw new Error('Invalid row split size.');\n    }\n    return result;\n  }\n  // Calculate the output index of the first element of a list.\n  // The parentOutputIndex is the same computation for the previous list.\n  // -1 indicates an element or list that is out of range.\n  // The outputIndexMultiplier is the number of output indices one moves\n  // forward for each column.\n  // E.g., given:\n  // valueRowIds:[0 1 2 2 2 3 5 5 6]\n  // parentOutputIndex:[1000 1100 2000 2100 -1 3000 4000]\n  // outputIndexMultiplier: 10\n  // outputSize: 2\n  // You get:\n  // result = [1000 1100 2000 2010 -1 2100 -1 -1 3000]\n  // result[0] = parentOutputIndex[valueRowIds[0]]\n  // result[1] = parentOutputIndex[valueRowIds[1]]\n  // result[2] = parentOutputIndex[valueRowIds[2]]\n  // result[3] = parentOutputIndex[valueRowIds[2] + 10]\n  // result[4] = -1 because it is the third element the size is 2.\n  // result[5] = parentOutputIndex[valueRowIds[3]]\n  // result[6] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[7] = -1 because parentOutputIndex[valueRowIds[6]] == -1\n  // result[8] = parentOutputIndex[valueRowIds[7]]\n  calculateOutputIndexValueRowID(valueRowIds, parentOutputIndex, outputIndexMultiplier, outputSize) {\n    const indexSize = valueRowIds.length;\n    const result = [];\n    if (indexSize === 0) {\n      return [];\n    }\n    let currentOutputColumn = 0;\n    let currentValueRowId = valueRowIds[0];\n    if (currentValueRowId >= parentOutputIndex.length) {\n      throw new Error(`Got currentValueRowId=${currentValueRowId}, which is not less than ${parentOutputIndex.length}`);\n    }\n    let currentOutputIndex = parentOutputIndex[currentValueRowId];\n    result.push(currentOutputIndex);\n    for (let i = 1; i < indexSize; ++i) {\n      const nextValueRowId = valueRowIds[i];\n      if (nextValueRowId === currentValueRowId) {\n        if (currentOutputIndex >= 0) {\n          ++currentOutputColumn;\n          if (currentOutputColumn < outputSize) {\n            currentOutputIndex += outputIndexMultiplier;\n          } else {\n            currentOutputIndex = -1;\n          }\n        }\n      } else {\n        currentOutputColumn = 0;\n        currentValueRowId = nextValueRowId;\n        if (nextValueRowId >= parentOutputIndex.length) {\n          throw new Error(`Got nextValueRowId=${nextValueRowId} which is not less than ${parentOutputIndex.length}`);\n        }\n        currentOutputIndex = parentOutputIndex[nextValueRowId];\n      }\n      result.push(currentOutputIndex);\n    }\n    if (result.length !== valueRowIds.length) {\n      throw new Error('Invalid row ids.');\n    }\n    return result;\n  }\n  calculateOutputIndex(dimension, parentOutputIndex, outputIndexMultiplier, outputSize) {\n    const rowPartitionTensor = this.getRowPartitionTensor(dimension);\n    const partitionType = this.getRowPartitionTypeByDimension(dimension);\n    switch (partitionType) {\n      case RowPartitionType.VALUE_ROWIDS:\n        return this.calculateOutputIndexValueRowID(rowPartitionTensor, parentOutputIndex, outputIndexMultiplier, outputSize);\n      case RowPartitionType.ROW_SPLITS:\n        if (rowPartitionTensor.length - 1 > parentOutputIndex.length) {\n          throw new Error(`Row partition size is greater than output size: ${rowPartitionTensor.length - 1} > ${parentOutputIndex.length}`);\n        }\n        return this.calculateOutputIndexRowSplit(rowPartitionTensor, parentOutputIndex, outputIndexMultiplier, outputSize);\n      default:\n        throw new Error(`Unsupported partition type: ${RowPartitionType[partitionType]}`);\n    }\n  }\n  getFirstDimensionSize() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (this.rowPartitionTypes.length === 0) {\n      throw new Error('No row_partition_types given.');\n    }\n    const firstPartitionType = this.rowPartitionTypes[0];\n    switch (firstPartitionType) {\n      case RowPartitionType.FIRST_DIM_SIZE:\n        return firstPartitionTensor[0];\n      case RowPartitionType.VALUE_ROWIDS:\n        throw new Error('Cannot handle VALUE_ROWIDS in first dimension.');\n      case RowPartitionType.ROW_SPLITS:\n        return this.rowPartitionValuesShapes[0][0] - 1;\n      default:\n        throw new Error(`Cannot handle type ${RowPartitionType[firstPartitionType]}`);\n    }\n  }\n  compute() {\n    const firstPartitionTensor = this.rowPartitionValues[0];\n    if (firstPartitionTensor.length <= 0) {\n      throw new Error('Invalid first partition input. ' + 'Tensor requires at least one element.');\n    }\n    const firstDimension = this.getFirstDimensionSize();\n    const outputSize = this.calculateOutputSize(firstDimension);\n    const multiplier = new Array(this.raggedRank + 1);\n    multiplier[multiplier.length - 1] = 1;\n    for (let i = multiplier.length - 2; i >= 0; --i) {\n      multiplier[i] = multiplier[i + 1] * outputSize[i + 1];\n    }\n    // Full size of the tensor.\n    const outputShape = makeShape(outputSize, false);\n    const outputTensor = util.getArrayFromDType(this.valuesDType, util.sizeFromShape(outputShape));\n    const fullSize = multiplier[0] * outputSize[0];\n    if (fullSize > 0) {\n      let outputIndex = this.calculateFirstParentOutputIndex(firstDimension, multiplier[0], outputSize[0]);\n      for (let i = 1; i <= this.raggedRank; ++i) {\n        const newOutputIndex = this.calculateOutputIndex(i - 1, outputIndex, multiplier[i], outputSize[i]);\n        outputIndex = newOutputIndex;\n      }\n      this.setOutput(this.raggedRank, outputIndex, outputTensor, outputShape);\n    }\n    return [outputShape, outputTensor];\n  }\n  setOutput(raggedRank, outputIndex, outputTensor, outputShape) {\n    if (outputTensor.length === 0) {\n      return;\n    }\n    const valuesBase = this.values;\n    const outputBase = outputTensor;\n    let elementShape = outputShape.slice();\n    elementShape = elementShape.slice(raggedRank + 1);\n    const valueElementSize = util.sizeFromShape(elementShape);\n    const outputIndexSize = outputIndex.length;\n    // Broadcast the default value to value_element_size.  (We can skip this\n    // if defaultValueTensor.size == 1, since we use fill when that's true.)\n    let defaultValue = this.defaultValue;\n    if (defaultValue.length !== valueElementSize && defaultValue.length !== 1) {\n      const srcShape = this.defaultValueShape;\n      tidy(() => {\n        const defaultValueTensor = reshape(defaultValue, srcShape);\n        const bCastDefault = broadcastTo(defaultValueTensor, elementShape);\n        defaultValue = bCastDefault.dataSync();\n      });\n    }\n    // Loop through the outputIndex array, finding contiguous regions that\n    // should be copied.  Once we find the end of a contiguous region, copy it\n    // and add any necessary padding (with defaultValue).\n    let srcStart = 0; // Start of contiguous region (in values)\n    let dstStart = 0; // Destination for contiguous region (in output)\n    let dstEnd = 0; // Destination for contiguous region (in output)\n    for (let srcI = 0; srcI <= outputIndexSize; ++srcI) {\n      // dstI is the destination where the value at srcI should be copied.\n      let dstI = srcI < outputIndexSize ? outputIndex[srcI] : -1;\n      // If we're still in a contiguous region, then update dstEnd go to the\n      // next srcI.\n      if (dstI === dstEnd) {\n        ++dstEnd;\n        continue;\n      }\n      // We found the end of contiguous region.  This can be because we found\n      // a gap (dstI > dstEnd), or a source value that shouldn't be copied\n      // because it's out-of-bounds (dstI == -1), or the end of the tensor\n      // (dstI === -1).\n      if (dstStart < dstEnd) {\n        // Copy the contiguous region.\n        const src = valuesBase.subarray(srcStart * valueElementSize);\n        const dst = outputBase.subarray(dstStart * valueElementSize);\n        const nVals = (dstEnd - dstStart) * valueElementSize;\n        copyArray(dst, src, nVals);\n      }\n      // Add any necessary padding (w/ defaultValue).\n      if (srcI >= outputIndexSize) {\n        // We reached the end of values: pad to the end of output.\n        const outputSize = outputTensor.length;\n        dstI = Math.floor(outputSize / valueElementSize);\n      }\n      if (dstI > dstEnd) {\n        if (this.defaultValue.length === 1) {\n          outputBase.subarray(dstEnd * valueElementSize, dstI * valueElementSize).fill(this.defaultValue[0]);\n          dstEnd = dstI;\n        } else {\n          while (dstI > dstEnd) {\n            const dst = outputBase.slice(dstEnd * valueElementSize);\n            copyArray(dst, defaultValue, valueElementSize);\n            ++dstEnd;\n          }\n        }\n      }\n      // Update indices.\n      if (dstI < 0) {\n        // srcI should be skipped -- leave it out of the contiguous region.\n        srcStart = srcI + 1;\n        dstStart = dstEnd;\n      } else {\n        // srcI should be copied -- include it in the contiguous region.\n        srcStart = srcI;\n        dstStart = dstEnd;\n        dstEnd = dstStart + 1;\n      }\n    }\n  }\n}\nfunction copyArray(dst, src, size) {\n  for (let i = 0; i < size; i++) {\n    dst[i] = src[i];\n  }\n}\nfunction makeShape(shape, isPartial) {\n  const out = [];\n  for (let dim of shape) {\n    if (dim < 0) {\n      if (!isPartial) {\n        throw new Error(`Dimension ${dim} must be >= 0`);\n      }\n      if (dim < -1) {\n        throw new Error(`Dimension ${dim} must be >= -1`);\n      }\n      dim = -1;\n    }\n    out.push(dim);\n  }\n  return out;\n}\nexport function raggedTensorToTensorImpl(shape, shapesShape, values, valuesShape, valuesDType, defaultValue, defaultValueShape, rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes) {\n  return new RaggedTensorToTensorOp(shape, shapesShape, values, valuesShape, valuesDType, defaultValue, defaultValueShape, rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes).compute();\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function rangeImpl(start, stop, step, dtype) {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n  if (sameStartStop || increasingRangeNegativeStep || decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const rsqrtImpl = createSimpleUnaryImpl(xi => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\nexport const rsqrtConfig = {\n  kernelName: Rsqrt,\n  backendName: 'cpu',\n  kernelFunc: rsqrt\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, TensorBuffer } from '@tensorflow/tfjs-core';\nexport function scatterImpl(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  const indicesData = indices.values;\n  const updatesData = updates.values;\n  if (outputSize === 0) {\n    return buffer(shape, updates.dtype);\n  }\n  const outBuf = defaultValue instanceof TensorBuffer ? defaultValue : buffer(flattenShape, updates.dtype);\n  if (typeof defaultValue === 'string') {\n    outBuf.values.fill(defaultValue);\n  } else if (typeof defaultValue === 'number') {\n    outBuf.values.fill(defaultValue);\n  } else if (typeof defaultValue === 'boolean') {\n    outBuf.values.fill(+defaultValue);\n  }\n  for (let i = 0; i < numUpdates; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      index.push(dim);\n      flattenIndex += dim * strides[j];\n    }\n    if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n    }\n    for (let k = 0; k < sliceSize; k++) {\n      if (sumDupeIndices) {\n        outBuf.values[flattenIndex * sliceSize + k] += updatesData[i * sliceSize + k];\n      } else {\n        outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ? updatesData[0] : updatesData[i * sliceSize + k];\n      }\n    }\n  }\n  return outBuf;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sigmoid } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sigmoidImpl = createSimpleUnaryImpl(xi => 1 / (1 + Math.exp(-xi)));\nexport const sigmoid = unaryKernelFunc(Sigmoid, xi => 1 / (1 + Math.exp(-xi)));\nexport const sigmoidConfig = {\n  kernelName: Sigmoid,\n  backendName: 'cpu',\n  kernelFunc: sigmoid\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n    if (dtype === 'string') {\n      return vals.slice(flatOffset, flatOffset + length);\n    }\n    return vals.subarray(flatOffset, flatOffset + length);\n  }\n  const decodedData = dtype === 'string' ? backend_util.fromUint8ToStringArray(vals) : vals;\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values);\n  }\n  return outBuf.values;\n}\nexport function slice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    size\n  } = attrs;\n  assertNotComplex(x, 'slice');\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n  const emptyRowIndicator = new Array(denseRows);\n  const reverseIndexMap = new Array(indicesCount);\n  const rank = indicesShape[1];\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0);\n    const outputValues = util.getArrayFromDType(valuesDType, 0);\n    return [outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap];\n  }\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset = new Array(denseRows).fill(0);\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && row >= lastIndicesRow;\n    lastIndicesRow = row;\n  }\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = csrOffset[row] === 0;\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices = indices;\n    const outputValues = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator, reverseIndexMap];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices = util.getArrayFromDType(indicesDType, fullIndicesCount * rank);\n    const outputValues = util.getArrayFromDType(valuesDType, fullIndicesCount);\n    const filledCount = new Array(denseRows).fill(0);\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = (row === 0 ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++; // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {\n        // We haven't filled this row\n        const startingIndex = row === 0 ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator, reverseIndexMap];\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(backend_util.getSparseReshapeNegativeOutputDimErrorMessage(d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(backend_util.getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape));\n    }\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(backend_util.getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape));\n  }\n  const inputRank = inputShape.length;\n  const inputStrides = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n  const outputStrides = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n  const newIndices = util.getArrayFromDType(inputDType, nnz * outputRank);\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function sparseSegmentReductionImpl(input, inputShape, inputDType, indices, segmentIds, isMean = false, defaultValue = 0) {\n  const numIndices = indices.length;\n  // Flatten the array to two dimensions\n  const inputFlat = [inputShape[0], input.length / inputShape[0]];\n  const numCol = inputFlat[1];\n  // Note that the current implementation assumes that segmentIds values are\n  // sorted.\n  const lastSegmentIdPlusOne = numIndices > 0 ? segmentIds[numIndices - 1] + 1 : 0;\n  const outputRows = lastSegmentIdPlusOne;\n  if (outputRows < 0) {\n    throw new Error(backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n  const outputShape = inputShape.slice();\n  outputShape[0] = outputRows;\n  const outputLength = outputShape.reduce((product, value) => product * value, 1);\n  // Output array is initialized with the value 0 by default.\n  const output = util.getArrayFromDType(inputDType, outputLength);\n  // Note that we do not initialize the output buffer with a default value, so\n  // we need to explicitly set missing indices to the default value.\n  if (numIndices === 0) {\n    if (outputRows > 0) {\n      output.fill(defaultValue);\n    }\n    return [output, outputShape];\n  }\n  if (outputRows <= 0) {\n    throw new Error(backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());\n  }\n  let start = 0,\n    end = 1;\n  // Index from which the output is not initialized.\n  let uninitializedIndex = 0;\n  let outIndex = segmentIds[start];\n  while (true) {\n    // We initialize nextIndex to 0 to avoid may be uninitialized warning\n    let nextIndex = 0;\n    if (end < numIndices) {\n      nextIndex = segmentIds[end];\n      if (outIndex === nextIndex) {\n        ++end;\n        continue;\n      }\n      // We have a new segment here.  Verify that the segment ids are growing.\n      if (outIndex >= nextIndex) {\n        throw new Error(backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());\n      }\n    }\n    if (outIndex < 0 || outIndex >= outputRows) {\n      throw new Error(backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(outIndex, outputRows));\n    }\n    // If there is a gap between two indices, we need to set that gap to the\n    // default value.\n    if (outIndex > uninitializedIndex) {\n      output.fill(defaultValue, uninitializedIndex * numCol, outIndex * numCol);\n    }\n    for (let i = start; i < end; ++i) {\n      const index = indices[i];\n      if (index < 0 || index >= inputFlat[0]) {\n        throw new Error(backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(i, indices[i], inputFlat[0]));\n      }\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] += input[index * numCol + j];\n      }\n    }\n    if (isMean) {\n      for (let j = 0; j < numCol; j++) {\n        output[outIndex * numCol + j] /= end - start;\n      }\n    }\n    start = end;\n    ++end;\n    uninitializedIndex = outIndex + 1;\n    outIndex = nextIndex;\n    if (end > numIndices) {\n      break;\n    }\n  }\n  // Fill the gap at the end with the default value.\n  if (uninitializedIndex < outputRows) {\n    output.fill(defaultValue, uninitializedIndex * numCol, outputRows * numCol);\n  }\n  return [output, outputShape];\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sqrt } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sqrtImpl = createSimpleUnaryImpl(xi => Math.sqrt(xi));\nexport const sqrt = unaryKernelFunc(Sqrt, xi => Math.sqrt(xi));\nexport const sqrtConfig = {\n  kernelName: Sqrt,\n  backendName: 'cpu',\n  kernelFunc: sqrt\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const squaredDifferenceImpl = createSimpleBinaryKernelImpl((a, b) => {\n  const diff = a - b;\n  return diff * diff;\n});\nexport const squaredDifference = binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\nexport const squaredDifferenceConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'cpu',\n  kernelFunc: squaredDifference\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StaticRegexReplace } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const staticRegexReplaceImpl = createSimpleUnaryImpl((x, attrs) => {\n  const {\n    pattern,\n    replaceGlobal,\n    rewrite\n  } = attrs;\n  // TODO(mattSoulanille): Don't create a regex each time.\n  return x.replace(new RegExp(pattern, replaceGlobal ? 'g' : ''), rewrite);\n});\nconst staticRegexReplace = unaryKernelFuncFromImpl(StaticRegexReplace, staticRegexReplaceImpl);\nexport const staticRegexReplaceConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'cpu',\n  kernelFunc: staticRegexReplace\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function stridedSliceImpl(outShape, xBuf, strides, begin) {\n  const outBuf = buffer(outShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; i++) {\n    const loc = outBuf.indexToLoc(i);\n    const newLoc = new Array(loc.length);\n    for (let j = 0; j < newLoc.length; j++) {\n      newLoc[j] = loc[j] * strides[j] + begin[j];\n    }\n    outBuf.set(xBuf.get(...newLoc), ...loc);\n  }\n  return outBuf;\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n  getPadWidth(nGramWidth) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n  getNumNGrams(length, nGramWidth) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, length + 2 * padWidth - nGramWidth + 1);\n  }\n  createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n      let nextNGramIndex = 0;\n      const appendToNGram = str => str.forEach(value => nGram[nextNGramIndex++] = value);\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  compute(data, splits) {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && splits[i] <= inputDataSize;\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);\n      }\n    }\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach(nGramWidth => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n    const nGrams = new Array(nGramsSplits[numBatchItems]);\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach(nGramWidth => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\nexport function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n  return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences).compute(data, dataSplits);\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nfunction split(str, delimiters, skipEmpty, result) {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if (i === str.length || delimiters.indexOf(str[i]) !== -1) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\nexport function stringSplitImpl(input, delimiter, skipEmpty) {\n  const batchSize = input.length;\n  // Empty delimiter means split the input character by character.\n  const tokens = [];\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n  const indices = util.getArrayFromDType('int32', outputSize * 2);\n  const values = new Array(outputSize);\n  const shape = [batchSize, maxNumEntries];\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n  return [indices, values, shape];\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function stringToHashBucketFastImpl(input, numBuckets) {\n  const output = util.getArrayFromDType('int32', input.length);\n  for (let i = 0; i < input.length; ++i) {\n    output[i] = util.fingerPrint64(input[i]).modulo(numBuckets).getLowBitsUnsigned();\n  }\n  return output;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const subImpl = createSimpleBinaryKernelImpl((aValue, bValue) => aValue - bValue);\nexport const subComplexImpl = createComplexBinaryKernelImpl((aReal, aImag, bReal, bImag) => {\n  return {\n    real: aReal - bReal,\n    imag: aImag - bImag\n  };\n});\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\nexport const subConfig = {\n  kernelName: Sub,\n  backendName: 'cpu',\n  kernelFunc: sub\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\nexport function tileImpl(xBuf, reps) {\n  const newShape = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n    const originalLoc = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nconst comparePair = (a, b) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array, k, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n    util.swap(array, left, k);\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    let valAndInd = new Array(vals.length);\n    vals.forEach((value, index) => valAndInd[index] = {\n      value,\n      index\n    });\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n  return [buffer(outputShape, xDtype, allTopKVals), buffer(outputShape, 'int32', allTopKIndices)];\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n  // Normalize and validate axis.\n  const $axis = util.parseAxisParam(axis, shape)[0];\n  // Calculate the new shape that is suitable for extracting data along the\n  // given axis.\n  //\n  // The rank is 3.\n  // The size of the 1st dimension is the size of all the axes < the given axis.\n  // The size of the 2nd dimension is the same as the size of the given axis.\n  // The size of the 3rd dimension is the size of all the axes > the given axis.\n  //\n  // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n  // newShape would be: [2*3, 5, 4].\n  //\n  // Note that this is not the final output shape. This will be the shape for an\n  // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n  // values along the given axis. To demonstrate how it works, consider the\n  // following example:\n  //\n  // Input: a 3D tensor, with shape [1, 2, 3]\n  // [\n  //   [\n  //      [1,2,3],\n  //      [4,5,6]\n  //   ]\n  // ]\n  // Axis: 2 (the last axis).\n  // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n  //\n  // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n  // 1*2. The re-shaped data would look like:\n  //\n  // [\n  //   [\n  //     [1], [2], [3]\n  //   ],\n  //   [\n  //     [4], [5], [6]\n  //   ]\n  // ]\n  //\n  // Then, we can construct a 3-level nested loop by the following dimension\n  // order to extract the values along the axis (dimension1):\n  // i: dimension1       // 0,1,2 (newShape[1])\n  //   m: dimension0     // 0,1   (newShape[0])\n  //     n: dimension2   // 0     (newShape[2])\n  //\n  //                       m, i, n\n  //                      ---------\n  // Iteration 0: data at [0, 0, 0] => \"1\"\n  // Iteration 1: data at [1, 0, 0] => \"4\"\n  // We got [1,4].\n  // Iteration 2: data at [0, 1, 0] => \"2\"\n  // Iteration 3: data at [1, 1, 0] => \"5\"\n  // We got [2,5].\n  // Iteration 4: data at [0, 2, 0] => \"3\"\n  // Iteration 5: data at [1, 2, 0] => \"6\"\n  // We got [3,6].\n  const newShape = [1, shape[0], 1];\n  for (let i = 0; i < $axis; i++) {\n    newShape[0] *= shape[i];\n  }\n  newShape[1] = shape[$axis];\n  for (let i = $axis + 1; i < shape.length; i++) {\n    newShape[2] *= shape[i];\n  }\n  // A map from unique elements (their string representations) to their values\n  // in \"indices\" (below).\n  const uniqueElements = new Map();\n  // The indices of each unique element in the original tensor along the given\n  // axis. It is 1D and has the same size as the given axis.\n  const indices = new Int32Array(shape[$axis]);\n  // Create a buffer so we can easily extract value at a given location.\n  const inputBuffer = new TensorBuffer(newShape, dtype, values);\n  // The indices along the given axis that have unique elements. This is a\n  // de-duped version of \"indices\" above.\n  const uniqueIndices = [];\n  const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n  for (let i = 0; i < shape[$axis]; i++) {\n    // Extract values along the axis.\n    let element;\n    if (is1DTensor) {\n      // Fast path for 1D tensor input.\n      element = values[i].toString();\n    } else {\n      const axisValues = [];\n      for (let m = 0; m < newShape[0]; m++) {\n        for (let n = 0; n < newShape[2]; n++) {\n          axisValues.push(inputBuffer.get(m, i, n));\n        }\n      }\n      element = axisValues.join(',');\n    }\n    // Dedup and update various indices.\n    const existingIndex = uniqueElements.get(element);\n    if (existingIndex != null) {\n      indices[i] = existingIndex;\n    } else {\n      const uniqueIndex = uniqueElements.size;\n      uniqueElements.set(element, uniqueIndex);\n      indices[i] = uniqueIndex;\n      uniqueIndices.push(i);\n    }\n  }\n  // Now we know where each of the unique elements are located along the axis\n  // (uniqueIndices). Extract them from input buffer and store them in the\n  // output buffer.\n  const outputTmpShape = newShape.slice();\n  outputTmpShape[1] = uniqueElements.size;\n  const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n  uniqueIndices.forEach((uniqueElementIndex, i) => {\n    for (let m = 0; m < newShape[0]; m++) {\n      for (let n = 0; n < newShape[2]; n++) {\n        outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n      }\n    }\n  });\n  // The output shape can be calculated from the input shape with the size of\n  // the given axis replaced by the number of unique elements along that axis.\n  const outputShape = shape.slice();\n  outputShape[$axis] = outputTmpShape[1];\n  return {\n    outputValues: outputBuffer.values,\n    outputShape,\n    indices\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  bitwiseAndImpl: bitwiseAndImplCPU,\n  castImpl: castImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  raggedGatherImpl: raggedGatherImplCPU,\n  raggedRangeImpl: raggedRangeImplCPU,\n  raggedTensorToTensorImpl: raggedTensorToTensorImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  scatterImpl: scatterImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  staticRegexReplaceImpl: staticRegexReplaceImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU\n} = shared;\nexport { addImplCPU, bincountImplCPU, bincountReduceImplCPU, bitwiseAndImplCPU, castImplCPU, ceilImplCPU, concatImplCPU, equalImplCPU, expImplCPU, expm1ImplCPU, floorImplCPU, gatherNdImplCPU, gatherV2ImplCPU, greaterEqualImplCPU, greaterImplCPU, lessEqualImplCPU, lessImplCPU, linSpaceImplCPU, logImplCPU, maxImplCPU, maximumImplCPU, minimumImplCPU, multiplyImplCPU, negImplCPU, notEqualImplCPU, prodImplCPU, raggedGatherImplCPU, raggedRangeImplCPU, raggedTensorToTensorImplCPU, scatterImplCPU, sigmoidImplCPU, simpleAbsImplCPU, sliceImplCPU, sparseFillEmptyRowsImplCPU, sparseReshapeImplCPU, sparseSegmentReductionImplCPU, sqrtImplCPU, staticRegexReplaceImplCPU, stridedSliceImplCPU, stringNGramsImplCPU, stringSplitImplCPU, stringToHashBucketFastImplCPU, subImplCPU, rangeImplCPU, rsqrtImplCPU, tileImplCPU, topKImplCPU, transposeImplCPU, uniqueImplCPU };\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport function getVecChannels(name, rank) {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank).map(d => `${name}.${d}`);\n}\nexport function getChannels(name, rank) {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\nexport function getSourceCoords(rank, dims) {\n  if (rank === 1) {\n    return 'rc';\n  }\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PackProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n  getSourceCoordsArr(dims) {\n    const coords = [];\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n  getOutOfBoundsCondition(dims) {\n    if (this.rank === 1) {\n      return `rc > ${this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n    return cond;\n  }\n  getSetup(dims) {\n    if (this.rank === 1) {\n      return '';\n    }\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n  getOutput(dims) {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      const outShape = this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nexport class ReshapePackedProgram {\n  constructor(outputShape, inputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'inputShape',\n      type: 'ivec3'\n    }];\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    let mainLoop = ``;\n    for (let i = 0; i < 4; i++) {\n      let thisRC = `thisRC = rc;`;\n      if (i % 2 === 1) {\n        thisRC += `thisRC.z += 1;`;\n      }\n      if (i > 1) {\n        thisRC += `thisRC.y += 1;`;\n      }\n      mainLoop += `\n        ${thisRC}\n        ${i > 0 ? `if(thisRC.y < rows && thisRC.z < cols){` : ''}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${i > 0 ? '}' : ''}\n      `;\n    }\n    this.userCode = `\n      ${getReshapedInputCoords(inputShape, this.enableShapeUniforms)}\n      ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms ? 'outShape[1]' : outputShape[1]};\n        int cols = ${this.enableShapeUniforms ? 'outShape[2]' : outputShape[2]};\n\n        ${mainLoop}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\nfunction getReshapedInputCoords(shape, enableShapeUniforms) {\n  const coordsFromIndexSnippet = enableShapeUniforms ? shader_util.getLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], 'inputShape') : shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getInternalFormatForFloat16MatrixTexture, getInternalFormatForFloat16PackedMatrixTexture, getInternalFormatForFloat32MatrixTexture, getInternalFormatForPackedMatrixTexture, getInternalFormatForUnsignedBytesMatrixTexture } from './gpgpu_util';\nimport { getPackedMatrixTextureShapeWidthHeight, getUnpackedMatrixTextureShapeWidthHeight, PhysicalTextureType, TextureUsage } from './tex_util';\nexport class TextureManager {\n  constructor(gpgpu) {\n    this.gpgpu = gpgpu;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    // Number of bytes that have been allocated and available for reuse.\n    this._numBytesFree = 0;\n    this.freeTextures = {};\n    this.usedTextures = {};\n    this.logEnabled = false;\n  }\n  acquireTexture(shapeRC, usage, isPacked) {\n    const physicalTexType = getPhysicalFromLogicalTextureType(usage, isPacked);\n    const shapeKey = getKeyFromTextureShape(shapeRC, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    if (!(shapeKey in this.usedTextures)) {\n      this.usedTextures[shapeKey] = [];\n    }\n    const texBytes = computeBytes(shapeRC, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this._numBytesFree -= texBytes;\n      this.log();\n      const newTexture = this.freeTextures[shapeKey].pop();\n      this.usedTextures[shapeKey].push(newTexture);\n      return newTexture;\n    }\n    let newTexture;\n    if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT32) {\n      newTexture = this.gpgpu.createPackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_2X2_FLOAT16) {\n      newTexture = this.gpgpu.createFloat16PackedMatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT32) {\n      newTexture = this.gpgpu.createFloat32MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.UNPACKED_FLOAT16) {\n      newTexture = this.gpgpu.createFloat16MatrixTexture(shapeRC[0], shapeRC[1]);\n    } else if (physicalTexType === PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE) {\n      newTexture = this.gpgpu.createUnsignedBytesMatrixTexture(shapeRC[0], shapeRC[1]);\n    }\n    this.usedTextures[shapeKey].push(newTexture);\n    this.numUsedTextures++;\n    this._numBytesAllocated += texBytes;\n    this.log();\n    return newTexture;\n  }\n  releaseTexture(texture, shape, logicalTexType, isPacked) {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    const physicalTexType = getPhysicalFromLogicalTextureType(logicalTexType, isPacked);\n    const shapeKey = getKeyFromTextureShape(shape, physicalTexType, isPacked);\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n    const texBytes = computeBytes(shape, physicalTexType, this.gpgpu.gl, this.gpgpu.textureConfig, isPacked);\n    const deleteTexThreshold = env().getNumber('WEBGL_DELETE_TEXTURE_THRESHOLD');\n    if (deleteTexThreshold !== -1 && this._numBytesAllocated > deleteTexThreshold) {\n      this.gpgpu.deleteMatrixTexture(texture.texture);\n      this._numBytesAllocated -= texBytes;\n    } else {\n      this.freeTextures[shapeKey].push(texture);\n      this.numFreeTextures++;\n      this._numBytesFree += texBytes;\n    }\n    this.numUsedTextures--;\n    const texList = this.usedTextures[shapeKey];\n    const texIndex = texList && texList.indexOf(texture);\n    if (texIndex == null || texIndex < 0) {\n      throw new Error('Cannot release a texture that was never provided by this ' + 'texture manager');\n    }\n    texList[texIndex] = texList[texList.length - 1];\n    texList.pop();\n    this.log();\n  }\n  log() {\n    if (!this.logEnabled) {\n      return;\n    }\n    const total = this.numFreeTextures + this.numUsedTextures;\n    console.log('Free/Used', `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${total})`);\n    const freeRatio = this._numBytesFree / this._numBytesAllocated;\n    console.log(`Bytes allocated: ${this._numBytesAllocated}`);\n    console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * freeRatio)}%)`);\n  }\n  get numBytesAllocated() {\n    return this._numBytesAllocated;\n  }\n  get numBytesFree() {\n    return this._numBytesFree;\n  }\n  getNumUsedTextures() {\n    return this.numUsedTextures;\n  }\n  getNumFreeTextures() {\n    return this.numFreeTextures;\n  }\n  dispose() {\n    if (this.freeTextures == null) {\n      // Already disposed.\n      return;\n    }\n    for (const texShape in this.freeTextures) {\n      this.freeTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    for (const texShape in this.usedTextures) {\n      this.usedTextures[texShape].forEach(tex => {\n        this.gpgpu.deleteMatrixTexture(tex.texture);\n      });\n    }\n    // TODO: Assign non-null value (empty object) to textures after disposed.\n    this.freeTextures = null;\n    this.usedTextures = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this._numBytesAllocated = 0;\n    this._numBytesFree = 0;\n  }\n}\nfunction numBytesForInternalFormat(gl, internalFormat) {\n  // tslint:disable-next-line:no-any\n  const glany = gl;\n  if (internalFormat === glany.R32F) {\n    return 4;\n  } else if (internalFormat === glany.R16F) {\n    return 2;\n  } else if (internalFormat === glany.RGBA32F) {\n    return 16;\n  } else if (internalFormat === gl.RGBA) {\n    return 16;\n  } else if (internalFormat === glany.RGBA16F) {\n    return 8;\n  } else if (internalFormat === glany.RGBA8) {\n    return 4;\n  }\n  throw new Error(`Unknown internal format ${internalFormat}`);\n}\nexport function computeBytes(shape, physicalTexType, gl, textureConfig, isPacked) {\n  // It is not possible to infer packed status from the texture type because\n  // depending on the textureConfig, different  texture types may resolve to the\n  // same internal format (e.g. in WebGL1, the internal format for\n  // UNPACKED_FLOAT16 textures is gl.RGBA). Therefore we pass in `isPacked`\n  // explicitly.\n  const internalFormat = internalFormatForPhysicalTexType(physicalTexType, textureConfig);\n  let numElements;\n  if (isPacked) {\n    const [packedWidth, packedHeight] = getPackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = packedWidth * packedHeight;\n  } else {\n    const [width, height] = getUnpackedMatrixTextureShapeWidthHeight(shape[0], shape[1]);\n    numElements = width * height;\n  }\n  const bytesPerElement = numBytesForInternalFormat(gl, internalFormat);\n  return numElements * bytesPerElement;\n}\nfunction internalFormatForPhysicalTexType(physicalTexType, textureConfig) {\n  switch (physicalTexType) {\n    case PhysicalTextureType.PACKED_2X2_FLOAT32:\n      return getInternalFormatForPackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_2X2_FLOAT16:\n      return getInternalFormatForFloat16PackedMatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT32:\n      return getInternalFormatForFloat32MatrixTexture(textureConfig);\n    case PhysicalTextureType.UNPACKED_FLOAT16:\n      return getInternalFormatForFloat16MatrixTexture(textureConfig);\n    case PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE:\n      return getInternalFormatForUnsignedBytesMatrixTexture(textureConfig);\n    default:\n      throw new Error(`Unknown physical texture type ${physicalTexType}`);\n  }\n}\nfunction getPhysicalTextureForRendering(isPacked) {\n  if (env().getBool('WEBGL_RENDER_FLOAT32_ENABLED')) {\n    if (isPacked) {\n      return PhysicalTextureType.PACKED_2X2_FLOAT32;\n    }\n    return PhysicalTextureType.UNPACKED_FLOAT32;\n  }\n  if (isPacked) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT16;\n  }\n  return PhysicalTextureType.UNPACKED_FLOAT16;\n}\nfunction getPhysicalFromLogicalTextureType(logicalTexType, isPacked) {\n  if (logicalTexType === TextureUsage.UPLOAD) {\n    return PhysicalTextureType.PACKED_2X2_FLOAT32;\n  } else if (logicalTexType === TextureUsage.RENDER || logicalTexType == null) {\n    return getPhysicalTextureForRendering(isPacked);\n  } else if (logicalTexType === TextureUsage.DOWNLOAD || logicalTexType === TextureUsage.PIXELS) {\n    return PhysicalTextureType.PACKED_4X1_UNSIGNED_BYTE;\n  }\n  throw new Error(`Unknown logical texture type ${logicalTexType}`);\n}\nfunction getKeyFromTextureShape(shapeRowsCol, physicalTexType, isPacked) {\n  return `${shapeRowsCol[0]}_${shapeRowsCol[1]}_${physicalTexType}_${isPacked}`;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class UnaryOpProgram {\n  constructor(aShape, opSnippet) {\n    this.variableNames = ['A'];\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\nexport const LINEAR = `return x;`;\nexport const ABS = `return abs(x);`;\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\nexport const CLONE = 'return x;';\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport const LINEAR = `return x;`;\nexport const ELU = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\nexport const RELU = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const RELU6 = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\nexport class UnaryOpPackedProgram {\n  constructor(aShape, opSnippet) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      vec4 unaryOperation(vec4 x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels, getSourceCoords } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class UnpackProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = false;\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const rank = outputShape.length;\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, nextFrame, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { getUniformLocations } from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024; // 1 GB.\n  }\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nclass MathBackendWebGL extends KernelBackend {\n  nextDataId() {\n    return MathBackendWebGL.nextDataId++;\n  }\n  constructor(gpuResource) {\n    super();\n    // Maps data ids that have a pending read operation, to list of subscribers.\n    this.pendingRead = new WeakMap();\n    // List of data ids that are scheduled for disposal, but are waiting on a\n    // pending read operation.\n    this.pendingDisposal = new WeakSet();\n    // Used to count the number of 'shallow' sliced tensors that point to the\n    // same data id.\n    this.dataRefCount = new WeakMap();\n    this.numBytesInGPU = 0;\n    // Accumulated time spent (including blocking) in uploading data to webgl.\n    this.uploadWaitMs = 0;\n    // Accumulated time spent (including blocking in downloading data from webgl.\n    this.downloadWaitMs = 0;\n    // record the last manual GL Flush time.\n    this.lastGlFlushTime = 0;\n    this.warnedAboutMemory = false;\n    this.pendingDeletes = 0;\n    this.disposed = false;\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n  // Writes a new entry to the data store with a WebGL texture, and registers it\n  // to the texture manager.\n  writeTexture(texture, shape, dtype, texHeight, texWidth, channels) {\n    // Temporarily create an tensor info to make the texture compatible with\n    // the runWebGLProgram's input.\n    const input = this.makeTensorInfo(shape, dtype);\n    const inData = this.texData.get(input.dataId);\n    // Even though the input texture could be unpacked or dense packed, it is\n    // always considered as unpacked for EncodeMatrixProgram.\n    inData.isPacked = false;\n    // Bind texture to the input tensor.\n    inData.texture = {\n      texture,\n      texShape: [texHeight, texWidth]\n    };\n    inData.texShape = [texHeight, texWidth];\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    const program = new EncodeMatrixProgram(shapeAs3D, false /* isByteArray */, channels);\n    const output = this.runWebGLProgram(program, [input], dtype, [[texHeight, texWidth]]);\n    output.shape = shape;\n    // Unbind the texture from the input tensor to avoid the texture being\n    // released.\n    inData.texture = null;\n    this.disposeIntermediateTensorInfo(input);\n    return output.dataId;\n  }\n  write(values, shape, dtype) {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {\n      id: this.nextDataId()\n    };\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount: 1\n    });\n    return dataId;\n  }\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId) {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId) {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId) {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n  move(dataId, values, shape, dtype, refCount) {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount\n    });\n  }\n  disposeIntermediateTensorInfo(tensorInfo) {\n    this.disposeData(tensorInfo.dataId);\n  }\n  readSync(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      dtype,\n      complexTensorInfos,\n      slice,\n      shape,\n      isPacked\n    } = texData;\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n    let result;\n    if (dtype === 'complex64') {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n  async read(dataId) {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      complexTensorInfos,\n      isPacked\n    } = texData;\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` + `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n    let buffer = null;\n    let tmpDownloadTarget;\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n      buffer = this.gpgpu.createBufferFromTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n    this.pendingRead.set(dataId, []);\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n    // Download the values from the GPU.\n    let vals;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([this.read(complexTensorInfos.real.dataId), this.read(complexTensorInfos.imag.dataId)]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  readToGPU(dataId, options = {}) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      isPacked,\n      texture\n    } = texData;\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return Object.assign({\n      tensorRef\n    }, tmpData.texture);\n  }\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = data.map(d => util.decodeString(d));\n        return buffer(t.shape, t.dtype, strings);\n      } catch (_a) {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape, t.dtype, data);\n  }\n  checkNumericalProblems(values) {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i];\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(`The value ${num} cannot be represented with your ` + `current settings. Consider enabling float32 rendering: ` + `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n  getValuesFromTexture(dataId) {\n    const {\n      shape,\n      dtype,\n      isPacked\n    } = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape)).subarray(0, size);\n      this.disposeIntermediateTensorInfo(tmpTarget);\n      return vals;\n    }\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(program, [{\n      shape: outputShape,\n      dtype,\n      dataId\n    }], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n    return vals;\n  }\n  timerAvailable() {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n  time(f) {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers = [];\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n    f();\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);\n    const flattenedActiveTimerNames = util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);\n    this.activeTimers = oldActiveTimers;\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n    const res = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null // will be filled by the engine\n    };\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({\n          name: flattenedActiveTimerNames[i],\n          ms: d\n        })).map(d => `${d.name}: ${d.ms}`).join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  memory() {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    };\n  }\n  startTimer() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {\n      startMs: util.now(),\n      endMs: null\n    };\n  }\n  endTimer(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    query.endMs = util.now();\n    return query;\n  }\n  async getQueryTime(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query);\n    }\n    const timerQuery = query;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId, force = false) {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n    this.releaseGPUData(dataId);\n    const {\n      complexTensorInfos\n    } = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n    this.texData.delete(dataId);\n    return true;\n  }\n  releaseGPUData(dataId) {\n    const {\n      texture,\n      dtype,\n      texShape,\n      usage,\n      isPacked,\n      slice\n    } = this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n  getTexture(dataId) {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId) {\n    return this.texData.get(dataId);\n  }\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n    return env().getBool('WEBGL_CPU_FORWARD') && inputs.every(input => this.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n  getGPGPUContext() {\n    return this.gpgpu;\n  }\n  where(condition) {\n    backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n  packedUnaryOp(x, op, dtype) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs(x) {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n  makeTensorInfo(shape, dtype, values) {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n      const encodedValues = values.map(d => util.encodeString(d));\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values, shape, dtype);\n    }\n    this.texData.get(dataId).usage = null;\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n  makeOutput(shape, dtype, values) {\n    return engine().makeTensorFromTensorInfo(this.makeTensorInfo(shape, dtype, values), this);\n  }\n  unpackTensor(input) {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n  packTensor(input) {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(program, [input], input.dtype, null /* customUniformValues */, preventEagerUnpackingOutput);\n  }\n  packedReshape(input, afterShape) {\n    const input3DShape = [webgl_util.getBatchDim(input.shape), ...webgl_util.getRowsCols(input.shape)];\n    const input3D = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n    return {\n      dataId: output.dataId,\n      shape: afterShape,\n      dtype: output.dtype\n    };\n  }\n  decode(dataId, customTexShape) {\n    const texData = this.texData.get(dataId);\n    const {\n      isPacked,\n      shape,\n      dtype\n    } = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(size <= texSize, () => 'customTexShape is too small. ' + 'Row * Column * 4 should be equal or larger than the ' + 'size of the tensor data.');\n    }\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [customTexShape != null ? customTexShape : tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(program, [{\n      shape: shapeAs3D,\n      dtype,\n      dataId\n    }], dtype, customValues, preventEagerUnpackingOfOutput, customTexShape);\n    return {\n      dtype,\n      shape,\n      dataId: out.dataId\n    };\n  }\n  runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false, customTexShape) {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ? customTexShape : tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2);\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n      return output;\n    }\n    const dataToDispose = [];\n    const inputsData = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);\n      }\n      let texData = this.texData.get(input.dataId);\n      if (texData.texture == null) {\n        if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values\n          };\n        }\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n        const savedInput = input;\n        const targetShape = input.shape;\n        input.shape = texData.shape;\n        input = this.packedReshape(input, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n        savedInput.shape = targetShape;\n      }\n      return {\n        shape: input.shape,\n        texData,\n        isUniform: false\n      };\n    });\n    this.uploadToGPU(output.dataId);\n    const outputData = {\n      shape: output.shape,\n      texData: outData,\n      isUniform: false\n    };\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push({\n        name: program.constructor.name,\n        query: this.getQueryTime(query)\n      });\n    }\n    const glFlushThreshold = env().getNumber('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if (time - this.lastGlFlushTime > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n  compileAndRun(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n  getAndSaveBinary(key, getBinary) {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n  getTextureManager() {\n    return this.textureManager;\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n  floatPrecision() {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n  uploadToGPU(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      shape,\n      dtype,\n      values,\n      texture,\n      usage,\n      isPacked\n    } = texData;\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n      let program;\n      let width = texShape[1],\n        height = texShape[0];\n      const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n      }\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking);\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture;\n        // Once uploaded, don't store the values on cpu.\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n  convertAndCacheOnCPU(dataId, float32Values) {\n    const texData = this.texData.get(dataId);\n    const {\n      dtype\n    } = texData;\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype);\n    }\n    return texData.values;\n  }\n  acquireTexture(texShape, texType, dtype, isPacked) {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(`High memory usage in GPU: ${mb} MB, ` + `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n  computeBytes(shape, dtype) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n  async checkCompileCompletionAsync() {\n    const ps = [];\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p = new Promise(resolve => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n      return Promise.all(ps);\n    }\n  }\n  async checkCompletionAsync_(binary) {\n    if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n  checkCompletion_(binary) {\n    if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n      if (this.gpgpu.gl.getShaderParameter(binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(binary.source, this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n    return true;\n  }\n  getUniformLocations() {\n    for (const binary of Object.values(this.binaryCache)) {\n      // TODO: Iterating through all binaries to build VAOs is supposed to be in\n      // a seperate function, like 'setVaos'. However, to avoid breaking changes\n      // for the users using parallel compile feature now, buildVao is silently\n      // added here.\n      this.gpgpu.buildVao(binary.webGLProgram);\n      const {\n        variablesLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.variablesLocations = variablesLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n  /**\n   * Create a TF.js tensor out of an existing WebGL texture. A new texture will\n   * be created.\n   */\n  createTensorFromGPUData(values, shape, dtype) {\n    values.channels = values.channels || 'RGBA';\n    const {\n      texture,\n      height,\n      width,\n      channels\n    } = values;\n    const backend = engine().backend;\n    // Have to throw an error, otherwise WebGL just warns and returns wrong\n    // values.\n    if (!backend.gpgpu.gl.isTexture(texture)) {\n      throw new Error(`The texture is invalid. Also, please make sure the texture and ` + `the TFJS WebGL backend are using the same canvas. If you want to ` + `use your own custom canvas, you have to create and use the custom ` + `TFJS WebGL backend created from the canvas through ` + `'new tf.MathBackendWebGL(customCanvas)'.`);\n    }\n    const dataId = backend.writeTexture(texture, shape, dtype, height, width, channels);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, backend);\n  }\n}\nMathBackendWebGL.nextDataId = 0;\nexport { MathBackendWebGL };\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n", "/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport { version };\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport * as gpgpu_util from './gpgpu_util';\nimport * as webgl_util from './webgl_util';\nexport { MathBackendWebGL } from './backend_webgl';\nexport { setWebGLContext } from './canvas_util';\nexport { GPGPUContext } from './gpgpu_context';\n// WebGL specific utils.\nexport { gpgpu_util, webgl_util };\n/**\n * Enforce use of half precision textures if available on the platform.\n *\n * @doc {heading: 'Environment', namespace: 'webgl'}\n */\nexport function forceHalfFloat() {\n  env().set('WEBGL_FORCE_F16_TEXTURES', true);\n}\n", "/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// base.ts is the webgl backend without auto kernel registration.\nimport { device_util, registerBackend } from '@tensorflow/tfjs-core';\nimport { MathBackendWebGL } from './backend_webgl';\nexport { version as version_webgl } from './version';\nif (device_util.isBrowser()) {\n  registerBackend('webgl', () => new MathBackendWebGL(), 2 /* priority */);\n}\n// Export webgl utilities\nexport * from './webgl';\n// Export forceHalfFlost under webgl namespace for the union bundle.\nimport { forceHalfFloat } from './webgl';\nexport const webgl = {\n  forceHalfFloat\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport const CHECK_NAN_SNIPPET = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nexport const SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport class BinaryOpProgram {\n  constructor(op, aShape, bShape) {\n    this.variableNames = ['A', 'B'];\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float binaryOperation(float a, float b) {\n        ${op}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport const CHECK_NAN_SNIPPET_PACKED = `\n  result.r = isNaN.r ? NAN : result.r;\n  result.g = isNaN.g ? NAN : result.g;\n  result.b = isNaN.b ? NAN : result.b;\n  result.a = isNaN.a ? NAN : result.a;\n`;\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\nexport class BinaryOpPackedProgram {\n  constructor(op, aShape, bShape, checkOutOfBounds = false) {\n    this.variableNames = ['A', 'B'];\n    this.supportsBroadcasting = true;\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels('coords', rank);\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Identity } from '@tensorflow/tfjs-core';\nexport function identity(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  backend.incRef(x.dataId);\n  return {\n    dataId: x.dataId,\n    shape: x.shape,\n    dtype: x.dtype\n  };\n}\nexport const identityConfig = {\n  kernelName: Identity,\n  backendName: 'webgl',\n  kernelFunc: identity\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    real,\n    imag\n  } = inputs;\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n  const realTensorInfo = identity({\n    inputs: {\n      x: real\n    },\n    backend\n  });\n  const imagTensorInfo = identity({\n    inputs: {\n      x: imag\n    },\n    backend\n  });\n  complex.complexTensorInfos = {\n    real: realTensorInfo,\n    imag: imagTensorInfo\n  };\n  return complexInfo;\n}\nexport const complexConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, LeakyRelu, util } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nexport function leakyRelu(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    alpha\n  } = attrs;\n  const $alpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(alpha, 'float32'));\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) : new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n  backend.disposeIntermediateTensorInfo($alpha);\n  return result;\n}\nexport const leakyReluConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Prelu } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nexport const PRELU = `return (a < 0.) ? b * a : a;`;\nexport const PRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nexport function prelu(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x,\n    alpha\n  } = inputs;\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(PRELU_PACKED, x.shape, alpha.shape) : new BinaryOpProgram(PRELU, x.shape, alpha.shape);\n  return backend.runWebGLProgram(program, [x, alpha], 'float32');\n}\nexport const preluConfig = {\n  kernelName: Prelu,\n  backendName: 'webgl',\n  kernelFunc: prelu\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, upcastType } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { complex } from '../kernels/Complex';\nimport { LEAKYRELU, LEAKYRELU_PACKED } from '../kernels/LeakyRelu';\nimport { PRELU, PRELU_PACKED } from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  cpuKernelImpl,\n  dtype\n}) {\n  return ({\n    inputs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const webglBackend = backend;\n    const $dtype = dtype || x.dtype;\n    if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n      const xData = webglBackend.texData.get(x.dataId);\n      const outValues = cpuKernelImpl(xData.values, $dtype);\n      return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n    }\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n    let program;\n    if (shouldUsePackedProgram) {\n      program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n    } else {\n      program = new UnaryOpProgram(x.shape, opSnippet);\n    }\n    return webglBackend.runWebGLProgram(program, [x], $dtype);\n  };\n}\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({\n  opSnippet,\n  packedOpSnippet,\n  checkOutOfBounds = false,\n  supportsComplex = false,\n  cpuKernelImpl,\n  dtype\n}) {\n  return ({\n    inputs,\n    backend\n  }) => {\n    const {\n      a,\n      b\n    } = inputs;\n    const webglBackend = backend;\n    if (supportsComplex && a.dtype === 'complex64') {\n      const aData = webglBackend.texData.get(a.dataId);\n      const bData = webglBackend.texData.get(b.dataId);\n      const [real, imag] = [[aData.complexTensorInfos.real, bData.complexTensorInfos.real], [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]].map(complexParts => {\n        const [aPart, bPart] = complexParts;\n        const aHandle = {\n          dataId: aPart.dataId,\n          dtype: aPart.dtype,\n          shape: a.shape\n        };\n        const bHandle = {\n          dataId: bPart.dataId,\n          dtype: bPart.dtype,\n          shape: b.shape\n        };\n        const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        return webglBackend.runWebGLProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n      });\n      const complexOutput = complex({\n        inputs: {\n          real,\n          imag\n        },\n        backend: webglBackend\n      });\n      webglBackend.disposeIntermediateTensorInfo(real);\n      webglBackend.disposeIntermediateTensorInfo(imag);\n      // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n      return complexOutput;\n    }\n    const $dtype = dtype || upcastType(a.dtype, b.dtype);\n    if ((a.dtype === 'string' || b.dtype === 'string' || webglBackend.shouldExecuteOnCPU([a, b])) && cpuKernelImpl != null) {\n      const aVals = webglBackend.texData.get(a.dataId).values;\n      const bVals = webglBackend.texData.get(b.dataId).values;\n      const decodedAVals = a.dtype === 'string' ?\n      // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(aVals) : aVals;\n      const decodedBVals = a.dtype === 'string' ?\n      // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(bVals) : bVals;\n      const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n      const out = webglBackend.makeTensorInfo(outShape, $dtype);\n      const outData = webglBackend.texData.get(out.dataId);\n      outData.values = outValues;\n      return out;\n    }\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') && packedOpSnippet != null;\n    let program;\n    if (shouldUsePackedProgram) {\n      program = new BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n    } else {\n      program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n    }\n    return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n  };\n}\nexport function mapActivationToShaderProgram(activation, packed = false) {\n  if (activation === 'linear') {\n    if (packed) {\n      return unary_packed_op.LINEAR;\n    }\n    return unary_op.LINEAR;\n  } else if (activation === 'relu') {\n    if (packed) {\n      return unary_packed_op.RELU;\n    }\n    return unary_op.RELU;\n  } else if (activation === 'elu') {\n    if (packed) {\n      return unary_packed_op.ELU;\n    }\n    return unary_op.ELU;\n  } else if (activation === 'relu6') {\n    if (packed) {\n      return unary_packed_op.RELU6;\n    }\n    return unary_op.RELU6;\n  } else if (activation === 'prelu') {\n    if (packed) {\n      return PRELU_PACKED;\n    }\n    return PRELU;\n  } else if (activation === 'leakyrelu') {\n    if (packed) {\n      return LEAKYRELU_PACKED;\n    }\n    return LEAKYRELU;\n  } else if (activation === 'sigmoid') {\n    if (packed) {\n      return unary_packed_op.SIGMOID;\n    }\n    return unary_op.SIGMOID;\n  }\n  throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class MatMulPackedProgram {\n  constructor(aShape, bShape, outputShape, transposeA = false, transposeB = false, addBias = false, activation = null, hasPreluActivation = false, hasLeakyreluActivation = false) {\n    this.variableNames = ['matrixA', 'matrixB'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const sharedDim = transposeA ? aShape[1] : aShape[2];\n    const sharedDimensionPacked = Math.ceil(sharedDim / 2);\n    const aSample = transposeA ? 'i * 2, rc.y' : 'rc.y, i * 2';\n    const bSample = transposeB ? 'rc.z, i * 2' : 'i * 2, rc.z';\n    const aSwizzle = transposeA ? ['a.xxyy', 'a.zzww'] : ['a.xxzz', 'a.yyww'];\n    const bSwizzle = transposeB ? ['b.xzxz', 'b.ywyw'] : ['b.xyxy', 'b.zwzw'];\n    let activationSnippet = '',\n      applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n      applyActivationSnippet = `result = activation(result);`;\n    }\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyreluActivation) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n    let batchASnippet = 'rc.x';\n    let batchBSnippet = 'rc.x';\n    if (aShape[0] < bShape[0]) {\n      batchASnippet = `imod(rc.x, ${aShape[0]})`;\n    } else if (bShape[0] < aShape[0]) {\n      batchBSnippet = `imod(rc.x, ${bShape[0]})`;\n    }\n    this.userCode = `\n      ${activationSnippet}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${sharedDimensionPacked}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        int batchA = ${batchASnippet};\n        int batchB = ${batchBSnippet};\n        for (int i = 0; i < ${sharedDimensionPacked}; i++) {\n          vec4 a = getMatrixA(batchA, ${aSample});\n          vec4 b = getMatrixB(batchB, ${bSample});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${aSwizzle[0]} * ${bSwizzle[0]});\n          result += (${aSwizzle[1]} * ${bSwizzle[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${addBiasSnippet}\n\n        ${applyActivationSnippet}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\n// (Ar + Ai)(Br + Bi) =\n// ArBr + ArBi + AiBr + AiBi = ArBr - AB + ArBi + AiBr\n// Yr = ArBr - AB\n// Yi = ArBi + AiBr\nexport const COMPLEX_MULTIPLY = {\n  REAL: 'return areal * breal - aimag * bimag;',\n  IMAG: 'return areal * bimag + aimag * breal;'\n};\nexport class BinaryOpComplexProgram {\n  constructor(op, aShape, bShape) {\n    this.variableNames = ['AReal', 'AImag', 'BReal', 'BImag'];\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    this.userCode = `\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${op}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, Multiply } from '@tensorflow/tfjs-core';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from '../binaryop_complex_gpu';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { multiplyImplCPU as cpuMultiply } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nconst MUL = 'return a * b;';\nexport function multiply(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    a,\n    b\n  } = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n    const inputs = [{\n      dataId: aData.complexTensorInfos.real.dataId,\n      dtype: aData.complexTensorInfos.real.dtype,\n      shape: a.shape\n    }, {\n      dataId: aData.complexTensorInfos.imag.dataId,\n      dtype: aData.complexTensorInfos.imag.dtype,\n      shape: a.shape\n    }, {\n      dataId: bData.complexTensorInfos.real.dataId,\n      dtype: bData.complexTensorInfos.real.dtype,\n      shape: b.shape\n    }, {\n      dataId: bData.complexTensorInfos.imag.dataId,\n      dtype: bData.complexTensorInfos.imag.dtype,\n      shape: b.shape\n    }];\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n    const complexOutput = complex({\n      inputs: {\n        real: realPart,\n        imag: imagPart\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(a.shape, b.shape, aData.values, bData.values, dtype);\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n  let program;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\nexport const multiplyConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ReshapePackedProgram } from '../reshape_packed_gpu';\nimport { getBatchDim, getRowsCols } from '../webgl_util';\nexport function packedReshape(input, afterShape, backend) {\n  const input3DShape = [getBatchDim(input.shape), ...getRowsCols(input.shape)];\n  const input3D = {\n    dtype: input.dtype,\n    shape: input3DShape,\n    dataId: input.dataId\n  };\n  const afterShapeAs3D = [getBatchDim(afterShape), ...getRowsCols(afterShape)];\n  const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n  const preventEagerUnpackingOfOutput = true;\n  const customValues = [input3DShape];\n  const output = backend.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n  return {\n    dataId: output.dataId,\n    shape: afterShape,\n    dtype: output.dtype\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nimport { packedReshape } from '../kernel_utils/reshape';\nimport { isReshapeFree } from '../webgl_util';\nexport function reshape(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const webglBackend = backend;\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n  util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` + `shape (${x.shape}) has ${xSize} elements. The new shape and old ` + `shape must have the same number of elements.`);\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) && !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n  webglBackend.incRef(x.dataId);\n  return {\n    dataId: x.dataId,\n    shape: $shape,\n    dtype: x.dtype\n  };\n}\nexport const reshapeConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport class MeanProgram {\n  constructor(reduceInfo, divisor) {\n    this.variableNames = ['x'];\n    const {\n      windowSize,\n      batchSize,\n      inSize,\n      outSize\n    } = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n    let updateSnippet = `sumValue += dot(values, ones);`;\n    if (divisor != null) {\n      const denominator = 1 / divisor;\n      updateSnippet = `sumValue += dot(values * ${util.isInt(denominator) ? denominator.toPrecision(2) : denominator}, ones);`;\n    }\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return 0.0;\n        }\n      `;\n    }\n    this.userCode = `\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${updateSnippet}\n        }\n        setOutput(sumValue);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ReduceProgram {\n  constructor(reduceInfo, reduceType) {\n    this.variableNames = ['x'];\n    const {\n      windowSize,\n      batchSize,\n      inSize,\n      outSize\n    } = reduceInfo;\n    this.outputShape = [batchSize, outSize];\n    let initializationValue = '0.0';\n    let compareOp = ``;\n    if (reduceType === 'prod') {\n      initializationValue = '1.0';\n    } else if (reduceType === 'min') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '1.0 / 1e-20';\n      compareOp = `min`;\n    } else if (reduceType === 'max') {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n      compareOp = `max`;\n    }\n    let returnValue = `${reduceType}(${reduceType}(${reduceType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (reduceType === 'sum') {\n      returnValue = `sumValue`;\n    } else if (reduceType === 'prod') {\n      returnValue = `prodValue`;\n    } else if (reduceType === 'all') {\n      returnValue = `allValue`;\n    } else if (reduceType === 'any') {\n      returnValue = `anyValue`;\n    }\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n    let updateSnippet = `\n      if (${reduceType === 'sum'}) {\n        sumValue += dot(values, ones);\n      } else if (${reduceType === 'prod'}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n        if (${reduceType === 'min'} || ${reduceType === 'max'}) {\n          minMaxValue = ${compareOp}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `;\n    let vecType = `vec4`;\n    if (reduceType === 'all') {\n      initializationValue = '1.0';\n      updateSnippet = `\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    } else if (reduceType === 'any') {\n      initializationValue = '0.0';\n      updateSnippet = `\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      `;\n      vecType = `bvec4`;\n    }\n    let checkOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${checkOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        vec4 minMaxValue = vec4(${initializationValue});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          ${vecType} values = ${vecType}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { MeanProgram } from '../mean_gpu';\nimport { ReduceProgram } from '../reduce_gpu';\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape) {\n  const stages = [];\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n  return stages;\n}\nexport function reduce(x, dtype, reductionType, backend) {\n  const reductionStages = getReductionStages(x.shape);\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {\n      inSize,\n      windowSize,\n      outSize\n    } = reductionStages[i];\n    let program;\n    let previousResult;\n    if (reductionType === 'mean') {\n      program = i === 0 ? new MeanProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      }, inSize) : new MeanProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      });\n    } else {\n      program = new ReduceProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      }, reductionType);\n    }\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n  return result;\n}\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposeProgram {\n  constructor(aShape, newDim) {\n    this.variableNames = ['A'];\n    const outputShape = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const switched = getSwitchedCoords(newDim);\n    this.userCode = `\n    void main() {\n      ${dtype} resRC = getOutputCoords();\n      setOutput(getA(${switched}));\n    }\n    `;\n  }\n}\nfunction getSwitchedCoords(newDim) {\n  const rank = newDim.length;\n  if (rank > 6) {\n    throw Error(`Transpose for rank ${rank} is not yet supported`);\n  }\n  const originalOrder = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u', 'resRC.v'];\n  const switchedCoords = new Array(rank);\n  for (let i = 0; i < newDim.length; i++) {\n    switchedCoords[newDim[i]] = originalOrder[i];\n  }\n  return switchedCoords.join();\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getVecChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposePackedProgram {\n  constructor(aShape, newDim) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    const outputShape = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { transposeImplCPU } from '../kernel_utils/shared';\nimport { TransposeProgram } from '../transpose_gpu';\nimport { TransposePackedProgram } from '../transpose_packed_gpu';\nexport function transposeImpl(x, perm, backend) {\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new TransposePackedProgram(x.shape, perm) : new TransposeProgram(x.shape, perm);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport { transposeImplCPU };\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transposeImpl } from './Transpose_impl';\nexport function sumImpl(x, axis, keepDims, backend) {\n  const reductionIndices = axis;\n  const xRank = x.shape.length;\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const sumInputIsTransposed = permutedAxes != null;\n  let sumInput = x;\n  if (sumInputIsTransposed) {\n    sumInput = transposeImpl(x, permutedAxes, backend);\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n  backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n  const [sumOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(sumInput.shape, axes);\n  let outShape = sumOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(sumOutShape, origAxes);\n  }\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape({\n    inputs: {\n      x: sumInput\n    },\n    attrs: {\n      shape: [batchSize, inSize]\n    },\n    backend\n  });\n  const outType = sumOutType(x.dtype);\n  const reduced = reduce(reshapedInput, outType, 'sum', backend);\n  const out = reshape({\n    inputs: {\n      x: reduced\n    },\n    attrs: {\n      shape: outShape\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (sumInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(sumInput);\n  }\n  return out;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sum } from '@tensorflow/tfjs-core';\nimport { sumImpl } from './Sum_impl';\nexport function sum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  return sumImpl(x, axis, keepDims, backend);\n}\nexport const sumConfig = {\n  kernelName: Sum,\n  backendName: 'webgl',\n  kernelFunc: sum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { transposeImpl } from './Transpose_impl';\nimport { transposeImplCPU as cpuTranspose } from './Transpose_impl';\nexport function transpose(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    perm\n  } = attrs;\n  const webglBackend = backend;\n  const xRank = x.shape.length;\n  const newShape = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n  let out;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\nexport const transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { broadcast_util, upcastType, util } from '@tensorflow/tfjs-core';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { MatMulPackedProgram } from '../mulmat_packed_gpu';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\n// Empirically determined minimal shared dimension in matmul before we forward\n// to a.mul(b).sum() in order to take advantage of GPU parallelism. See\n// https://github.com/tensorflow/tfjs-core/pull/1379 for benchmarks.\nexport const MATMUL_SHARED_DIM_THRESHOLD = 1000;\nexport function batchMatMulImpl({\n  a,\n  b,\n  transposeA,\n  transposeB,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}) {\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n  const outShapeOuterDims = broadcast_util.assertAndGetBroadcastShape(a.shape.slice(0, -2), b.shape.slice(0, -2));\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n  util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${a.shape} and ` + `${b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] : [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] : [batchDimB, innerShapeB, outerShapeB];\n  // The rest of the implementation is designed to operate on rank-3 tensors\n  const a3d = reshape({\n    inputs: {\n      x: a\n    },\n    backend,\n    attrs: {\n      shape: a3dShape\n    }\n  });\n  const b3d = reshape({\n    inputs: {\n      x: b\n    },\n    backend,\n    attrs: {\n      shape: b3dShape\n    }\n  });\n  const intermediates = [a3d, b3d];\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation != null ? mapActivationToShaderProgram(activation, true) : null;\n  const containsFusedOps = hasBias || hasPreluActivationWeights || hasLeakyreluAlpha || fusedActivation != null;\n  let out;\n  // Since the matrices are vectors, it is faster to call mul().sum()\n  // because sum() is O(sqrt(N)) due to divide-and-conquer.\n  if ((outerShapeA === 1 || outerShapeB === 1) && sharedDim > MATMUL_SHARED_DIM_THRESHOLD && containsFusedOps === false) {\n    let aVec = a3d;\n    let bVec = b3d;\n    if (transposeA) {\n      aVec = transpose({\n        inputs: {\n          x: a3d\n        },\n        backend,\n        attrs: {\n          perm: [0, 2, 1]\n        }\n      });\n      intermediates.push(aVec);\n    }\n    if (transposeB) {\n      bVec = transpose({\n        inputs: {\n          x: b3d\n        },\n        backend,\n        attrs: {\n          perm: [0, 2, 1]\n        }\n      });\n      intermediates.push(bVec);\n    }\n    const shouldReshapeA = outerShapeB !== 1;\n    const shouldReshapeB = outerShapeB === 1;\n    let aVec3d = aVec;\n    if (shouldReshapeA) {\n      aVec3d = reshape({\n        inputs: {\n          x: aVec\n        },\n        backend,\n        attrs: {\n          shape: [batchDim, sharedDim, 1]\n        }\n      });\n      intermediates.push(aVec3d);\n    }\n    const axis = outerShapeB === 1 ? 2 : 1;\n    let bVec3d = bVec;\n    if (shouldReshapeB) {\n      bVec3d = reshape({\n        inputs: {\n          x: bVec\n        },\n        backend,\n        attrs: {\n          shape: [batchDim, 1, sharedDim]\n        }\n      });\n      intermediates.push(bVec3d);\n    }\n    const product = multiply({\n      inputs: {\n        a: aVec3d,\n        b: bVec3d\n      },\n      backend\n    });\n    out = sum({\n      inputs: {\n        x: product\n      },\n      backend,\n      attrs: {\n        axis,\n        keepDims: true\n      }\n    });\n    intermediates.push(product);\n  } else {\n    const dtype = upcastType(a.dtype, b.dtype);\n    const program = new MatMulPackedProgram(a3dShape, b3dShape, [batchDim, outerShapeA, outerShapeB], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const inputs = [a3d, b3d];\n    if (bias != null) {\n      inputs.push(bias);\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend.runWebGLProgram(program, inputs, dtype);\n  }\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  intermediates.push(out);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return outReshaped;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { batchMatMulImpl } from './BatchMatMul_impl';\nexport function _fusedMatMul(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    a,\n    b,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    transposeA,\n    transposeB,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend,\n    bias,\n    preluActivationWeights,\n    leakyreluAlpha,\n    activation\n  });\n}\nexport const _fusedMatMulConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'webgl',\n  kernelFunc: _fusedMatMul\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, env } from '@tensorflow/tfjs-core';\nimport { simpleAbsImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst ABS = `return abs(x);`;\nexport function abs(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n  let program;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const absConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acos } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ACOS = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n`;\nexport const acos = unaryKernelFunc({\n  opSnippet: ACOS\n});\nexport const acosConfig = {\n  kernelName: Acos,\n  backendName: 'webgl',\n  kernelFunc: acos\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acosh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ACOSH = CHECK_NAN_SNIPPET + `\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));`;\nexport const acosh = unaryKernelFunc({\n  opSnippet: ACOSH\n});\nexport const acoshConfig = {\n  kernelName: Acosh,\n  backendName: 'webgl',\n  kernelFunc: acosh\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { addImplCPU as cpuAdd } from '../kernel_utils/shared';\nconst ADD = 'return a + b;';\nexport const addKernelFunc = binaryKernelFunc({\n  opSnippet: ADD,\n  packedOpSnippet: ADD,\n  supportsComplex: true,\n  cpuKernelImpl: cpuAdd\n});\nexport const addConfig = {\n  kernelName: Add,\n  backendName: 'webgl',\n  kernelFunc: addKernelFunc\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AddNProgram {\n  constructor(outputShape, shapes) {\n    this.outputShape = [];\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    const snippets = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`float v${variable} = get${variable}AtOutCoords();`);\n    });\n    // Calculate the sum of all elements.\n    const operation = this.variableNames.map(variable => {\n      return `v${variable}`;\n    }).join(' + ');\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        float result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AddNPackedProgram {\n  constructor(outputShape, shapes) {\n    this.outputShape = [];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = outputShape;\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    const snippets = [];\n    // Get target elements from every input tensor.\n    this.variableNames.forEach(variable => {\n      snippets.push(`vec4 v${variable} = get${variable}AtOutCoords();`);\n    });\n    // Calculate the sum of all elements.\n    const operation = this.variableNames.map(variable => {\n      return `v${variable}`;\n    }).join(' + ');\n    this.userCode = `\n      void main() {\n        ${snippets.join('\\n        ')}\n\n        vec4 result = ${operation};\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, env, upcastType } from '@tensorflow/tfjs-core';\nimport { AddNProgram } from '../addn_gpu';\nimport { AddNPackedProgram } from '../addn_packed_gpu';\nimport { identity } from './Identity';\nexport function addN(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({\n      inputs: {\n        x: tensors[0]\n      },\n      backend\n    });\n  }\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({\n      inputs: tensors.slice(0, midIndex),\n      backend\n    });\n    const rightSide = addN({\n      inputs: tensors.slice(midIndex),\n      backend\n    });\n    return addN({\n      inputs: [leftSide, rightSide],\n      backend\n    });\n  }\n  const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ? new AddNPackedProgram(tensors[0].shape, shapes) : new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\nexport const addNConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { All, backend_util, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function all(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const xRank = x.shape.length;\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D = reshape({\n    inputs: {\n      x: permutedX\n    },\n    backend,\n    attrs: {\n      shape: [-1, inSize]\n    }\n  });\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n  } else {\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n  }\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n  return res;\n}\nexport const allConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Any, backend_util, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function any(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const xRank = x.shape.length;\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n  backend_util.assertAxesAreInnerMostDims('any', axes, xRank);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D = reshape({\n    inputs: {\n      x: permutedX\n    },\n    backend,\n    attrs: {\n      shape: [-1, inSize]\n    }\n  });\n  const reduced = reduce(a2D, a2D.dtype, 'any', backend);\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n  } else {\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n  }\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n  return res;\n}\nexport const anyConfig = {\n  kernelName: Any,\n  backendName: 'webgl',\n  kernelFunc: any\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ArgMinMaxProgram {\n  constructor(reduceInfo, op, firstPass) {\n    this.variableNames = ['A'];\n    const {\n      windowSize,\n      batchSize,\n      outSize\n    } = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = op === 'max' ? '>' : '<';\n    const indexSnippet = firstPass ? 'inOffset + i;' : 'round(getBestIndicesA(batch, inOffset + i));';\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n  constructor(shape, windowSize, op, firstPass) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() + op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n    const compOp = op === 'max' ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from '../argminmax_packed_gpu';\nimport { reshape } from '../kernels/Reshape';\nfunction argReduce(backend, x, reduceType, bestIndicesA = null) {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo = {\n    windowSize,\n    inSize,\n    batchSize,\n    outSize: Math.ceil(inSize / windowSize)\n  };\n  const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\nfunction argReducePacked(backend, x, reduceType, bestIndicesA = null) {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({\n      inputs: {\n        x: xUnPacked\n      },\n      backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    intermediateTensorInfos.push(a2D);\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, backend_util, util } from '@tensorflow/tfjs-core';\nimport { argMinMaxReduce } from '../kernel_utils/arg_min_max';\nimport { transpose } from './Transpose';\nexport function argMax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis\n  } = attrs;\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n  backend_util.assertAxesAreInnerMostDims('argMax', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'max');\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\nexport const argMaxConfig = {\n  kernelName: ArgMax,\n  backendName: 'webgl',\n  kernelFunc: argMax\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMin, backend_util, util } from '@tensorflow/tfjs-core';\nimport { argMinMaxReduce } from '../kernel_utils/arg_min_max';\nimport { transpose } from './Transpose';\nexport function argMin(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis\n  } = attrs;\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n  backend_util.assertAxesAreInnerMostDims('argMin', [axes[0]], $x.shape.length);\n  const out = argMinMaxReduce(backend, $x, axes[0], 'min');\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return out;\n}\nexport const argMinConfig = {\n  kernelName: ArgMin,\n  backendName: 'webgl',\n  kernelFunc: argMin\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asin } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ASIN = CHECK_NAN_SNIPPET + `\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n`;\nexport const asin = unaryKernelFunc({\n  opSnippet: ASIN\n});\nexport const asinConfig = {\n  kernelName: Asin,\n  backendName: 'webgl',\n  kernelFunc: asin\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asinh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ASINH = CHECK_NAN_SNIPPET + `return log(x + sqrt(x * x + 1.0));`;\nexport const asinh = unaryKernelFunc({\n  opSnippet: ASINH\n});\nexport const asinhConfig = {\n  kernelName: Asinh,\n  backendName: 'webgl',\n  kernelFunc: asinh\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ATAN = CHECK_NAN_SNIPPET + `\n  return atan(x);\n`;\nexport const atan = unaryKernelFunc({\n  opSnippet: ATAN\n});\nexport const atanConfig = {\n  kernelName: Atan,\n  backendName: 'webgl',\n  kernelFunc: atan\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan2 } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET } from '../binaryop_gpu';\nimport { CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst ATAN2 = CHECK_NAN_SNIPPET + `\n  return atan(a, b);\n`;\nconst ATAN2_PACKED = `\n  vec4 result = atan(a, b);\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` + CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\nexport const atan2 = binaryKernelFunc({\n  opSnippet: ATAN2,\n  packedOpSnippet: ATAN2_PACKED\n});\nexport const atan2Config = {\n  kernelName: Atan2,\n  backendName: 'webgl',\n  kernelFunc: atan2\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atanh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst ATANH = CHECK_NAN_SNIPPET + `\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;`;\nexport const atanh = unaryKernelFunc({\n  opSnippet: ATANH\n});\nexport const atanhConfig = {\n  kernelName: Atanh,\n  backendName: 'webgl',\n  kernelFunc: atanh\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Pool2DProgram {\n  constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n    this.variableNames = ['x'];\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n    const isAvgPool = poolType === 'avg';\n    const batchFlattenPositionStr = `((batch  * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    const flattenPositionStr = `(xR * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + d`;\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n    if (computePositions) {\n      const compareOp = '>=';\n      this.userCode = `\n        const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n        const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${compareOp} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${flattenPositions ? includeBatchInIndex ? batchFlattenPositionStr : flattenPositionStr : `wR * ${effectiveFilterWidth} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n    const compareOp = 'max';\n    let returnValue = `${poolType}(${poolType}(${poolType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              getValue(batch, xR, xC + 3 * ${dilationWidth}, d)\n            );\n\n            ${updateSnippet}\n          }\n\n          int xC = xCCorner + ${filterWidthNearestVec4};\n          if (${filterWidthVec4Remainder === 1}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 2}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${updateSnippet}\n          } else if (${filterWidthVec4Remainder === 3}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${dilationWidth}, d),\n              getValue(batch, xR, xC + 2 * ${dilationWidth}, d),\n              initializationValue\n            );\n\n            ${updateSnippet}\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\nexport class Pool3DProgram {\n  constructor(convInfo, poolType, computePositions, flattenPositions = false, includeBatchInIndex = false) {\n    this.variableNames = ['x'];\n    if (poolType === 'avg' && computePositions) {\n      throw new Error('Cannot compute positions for average pool.');\n    }\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.outputShape = convInfo.outShape;\n    const isAvgPool = poolType === 'avg';\n    let initializationValue = '0.0';\n    if (!isAvgPool) {\n      // WebGL on Firefox Linux can't compile 1/0 so we do 1/eps.\n      initializationValue = '-1.0 / 1e-20';\n    }\n    if (computePositions) {\n      const compareOp = '>=';\n      this.userCode = `\n        const ivec3 strides =\n            ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n        const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${effectiveFilterDepth};\n              wD += ${dilationDepth}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${effectiveFilterHeight};\n                wR += ${dilationHeight}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${effectiveFilterWidth};\n                  wC += ${dilationWidth}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${compareOp} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${flattenPositions ? includeBatchInIndex ? `(((batch * ${convInfo.inDepth} + xD) * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` : `((xD * ${convInfo.inHeight} + xR) * ${convInfo.inWidth} + xC) * ${convInfo.inChannels} + ch` : `wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                      wR * ${effectiveFilterWidth} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `;\n      return;\n    }\n    const compareOp = 'max';\n    let returnValue = `${poolType}(${poolType}(${poolType}(` + 'minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])';\n    if (poolType === 'avg') {\n      // Use `max(count, 1.0)` instead of `count` in case count === 0.0.\n      // If count === 0.0, `avgValue` is always 0.0 and we change `count`'s\n      // value to avoid dividing zero.\n      returnValue = `avgValue / max(count, 1.0)`;\n    }\n    const filterWidthNearestVec4 = Math.floor(filterWidth / 4) * 4;\n    const filterWidthVec4Remainder = filterWidth % 4;\n    const updateSnippet = `\n      if (${isAvgPool}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = ${compareOp}(values, minMaxValue);\n      }\n    `;\n    this.userCode = `\n      const ivec3 strides =\n        ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float initializationValue = ${initializationValue};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${convInfo.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${initializationValue});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidthNearestVec4}; wC += 4) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${dilationWidth}, ch)\n              );\n\n              ${updateSnippet}\n            }\n\n            int xC = xCCorner + ${filterWidthNearestVec4};\n            if (${filterWidthVec4Remainder === 1}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 2}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${updateSnippet}\n            } else if (${filterWidthVec4Remainder === 3}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${dilationWidth}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${dilationWidth}, ch),\n                initializationValue\n              );\n\n              ${updateSnippet}\n            }\n          }\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool, backend_util, util } from '@tensorflow/tfjs-core';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nimport { identity } from './Identity';\nexport function avgPool(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  assertNotComplex(x, 'avgPool');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = 1;\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n  const avgPoolProgram = new Pool2DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\nexport const avgPoolConfig = {\n  kernelName: AvgPool,\n  backendName: 'webgl',\n  kernelFunc: avgPool\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3D, backend_util } from '@tensorflow/tfjs-core';\nimport { Pool3DProgram } from '../pool_gpu';\nexport function avgPool3D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode,\n    dataFormat\n  } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n  const avgPoolProgram = new Pool3DProgram(convInfo, 'avg', false);\n  return backend.runWebGLProgram(avgPoolProgram, [x], 'float32');\n}\nexport const avgPool3DConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'webgl',\n  kernelFunc: avgPool3D\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class AvgPool2DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy'];\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n            wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth};\n            wC+= ${dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\nexport class AvgPool3DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy'];\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n      const float avgMultiplier = float(${avgMultiplier});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n            wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3DGrad, backend_util } from '@tensorflow/tfjs-core';\nimport { AvgPool3DBackpropProgram } from '../avg_pool_backprop_gpu';\nexport function avgPool3DGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const x = input;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  const avgPoolBackpropProgram = new AvgPool3DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\nexport const avgPool3DGradConfig = {\n  kernelName: AvgPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPool3DGrad\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPoolGrad, backend_util } from '@tensorflow/tfjs-core';\nimport { AvgPool2DBackpropProgram } from '../avg_pool_backprop_gpu';\nimport { assertNotComplex } from '../webgl_util';\nexport function avgPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {\n    filterSize,\n    strides,\n    pad\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad);\n  const avgPoolBackpropProgram = new AvgPool2DBackpropProgram(convInfo);\n  return backend.runWebGLProgram(avgPoolBackpropProgram, [dy], x.dtype);\n}\nexport const avgPoolGradConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: avgPoolGrad\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchMatMul } from '@tensorflow/tfjs-core';\nimport { batchMatMulImpl } from './BatchMatMul_impl';\nexport function batchMatMul(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    a,\n    b\n  } = inputs;\n  const {\n    transposeA,\n    transposeB\n  } = attrs;\n  return batchMatMulImpl({\n    a,\n    b,\n    transposeA,\n    transposeB,\n    backend\n  });\n}\nexport const batchMatMulConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'webgl',\n  kernelFunc: batchMatMul\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormProgram {\n  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n    this.outputShape = [];\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormPackedProgram {\n  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n    let offsetSnippet = 'vec4(0.0)';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n    let scaleSnippet = 'vec4(1.0)';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        vec4 offset = ${offsetSnippet};\n        vec4 scale = ${scaleSnippet};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${varianceEpsilon}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_gpu';\nimport { BatchNormPackedProgram } from '../batchnorm_packed_gpu';\nexport const batchNorm = ({\n  inputs,\n  backend,\n  attrs\n}) => {\n  const {\n    x,\n    mean,\n    variance,\n    offset,\n    scale\n  } = inputs;\n  util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');\n  util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');\n  util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');\n  let {\n    varianceEpsilon\n  } = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n  const finalInputs = [x, mean, variance];\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ? new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) : new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n  const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n  return output;\n};\nexport const batchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SliceProgram {\n  constructor(destSize) {\n    this.variableNames = ['source'];\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{\n      name: 'start',\n      arrayIndex: this.rank,\n      type: 'int'\n    }];\n    const sourceCoords = getCoords(this.rank);\n    let body;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\nfunction getCoords(rank) {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class SlicePackedProgram {\n  constructor(destSize) {\n    this.variableNames = ['source'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    this.customUniforms = [{\n      name: 'start',\n      arrayIndex: this.rank,\n      type: 'int'\n    }];\n    const dtype = getCoordsDataType(this.rank);\n    const coords = getChannels('coords', this.rank);\n    const sourceLoc = getChannels('sourceLoc', this.rank);\n    const innerDims = this.rank === 1 ? 'sourceLoc' : `vec2(${sourceLoc.slice(-2).join()})`;\n    const getChannel = `getChannel(getSource(${sourceLoc.join()}), ${innerDims})`;\n    const upperRow = `\n      result.x = ${getChannel};\n      if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n        ++${sourceLoc[this.rank - 1]};\n        result.y = ${getChannel};\n        --${sourceLoc[this.rank - 1]};\n      }\n    `;\n    const lowerRow = this.rank === 1 ? '' : `\n      --${coords[this.rank - 1]};\n      if (++${coords[this.rank - 2]} < ${destSize[this.rank - 2]}) {\n        ++${sourceLoc[this.rank - 2]};\n        result.z = ${getChannel};\n        if (++${coords[this.rank - 1]} < ${destSize[this.rank - 1]}) {\n          ++${sourceLoc[this.rank - 1]};\n          result.w = ${getChannel};\n        }\n      }\n    `;\n    const sourceLocSetup = this.rank <= 4 ? `sourceLoc = coords +\n            ${dtype}(${destSize.map((_, i) => `start[${i}]`).join()});` : destSize.map((_, i) => `${sourceLoc[i]} = ${coords[i]} + start[${i}];`).join('\\n');\n    this.userCode = `\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        ${dtype} sourceLoc;\n        ${sourceLocSetup}\n        vec4 result = vec4(0.);\n        ${upperRow}\n        ${lowerRow}\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { sliceImplCPU } from '../kernel_utils/shared';\nimport { SliceProgram } from '../slice_gpu';\nimport { SlicePackedProgram } from '../slice_packed_gpu';\nfunction shallowSlice(x, begin, size, backend) {\n  const xTexData = backend.texData.get(x.dataId);\n  const t = backend.makeTensorInfo(size, x.dtype);\n  const newTexData = backend.texData.get(t.dataId);\n  // Copy texture data from the original tensor.\n  Object.assign(newTexData, xTexData);\n  newTexData.refCount = 1;\n  newTexData.shape = size;\n  newTexData.dtype = x.dtype;\n  let flatOffset = slice_util.computeFlatOffset(begin, util.computeStrides(x.shape));\n  if (xTexData.slice) {\n    // We are slicing an already sliced tensor, so we have to accumulate\n    // the offset.\n    flatOffset += xTexData.slice.flatOffset;\n  }\n  newTexData.slice = {\n    flatOffset,\n    // Point to the original dataId, which is used to do ref counting.\n    origDataId: xTexData.slice && xTexData.slice.origDataId || x.dataId\n  };\n  // Increase the ref count for that data bucket.\n  const refCount = backend.dataRefCount.get(newTexData.slice.origDataId) || 1;\n  backend.dataRefCount.set(newTexData.slice.origDataId, refCount + 1);\n  return t;\n}\nexport function slice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    size\n  } = attrs;\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n  if (util.sizeFromShape($size) === 0) {\n    return backend.makeTensorInfo($size, x.dtype, []);\n  }\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (backend.shouldExecuteOnCPU([x]) || x.dtype === 'string') {\n    const xTexData = backend.texData.get(x.dataId);\n    const outValues = sliceImplCPU(xTexData.values, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outValues);\n  }\n  const {\n    isPacked\n  } = backend.texData.get(x.dataId);\n  const isContinous = slice_util.isSliceContinous(x.shape, $begin, $size);\n  if (isPacked || !isContinous) {\n    const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new SlicePackedProgram($size) : new SliceProgram($size);\n    const customValues = [$begin];\n    return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n  }\n  backend.uploadToGPU(x.dataId);\n  return shallowSlice(x, $begin, $size, backend);\n}\nexport const sliceConfig = {\n  kernelName: Slice,\n  backendName: 'webgl',\n  kernelFunc: slice\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport const batchToSpaceND = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    crops\n  } = attrs;\n  util.assert(x.shape.length <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' + 'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  const toDispose = [];\n  const reshapedIntermediate = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: reshaped\n    }\n  });\n  const transposedIntermediate = transpose({\n    inputs: {\n      x: reshapedIntermediate\n    },\n    backend,\n    attrs: {\n      perm: permuted\n    }\n  });\n  const reshapedIntermediate2 = reshape({\n    inputs: {\n      x: transposedIntermediate\n    },\n    backend,\n    attrs: {\n      shape: reshapedPermuted\n    }\n  });\n  const sliced = slice({\n    inputs: {\n      x: reshapedIntermediate2\n    },\n    backend,\n    attrs: {\n      begin: sliceBeginCoords,\n      size: sliceSize\n    }\n  });\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return sliced;\n};\nexport const batchToSpaceNDConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Bincount } from '@tensorflow/tfjs-core';\nimport { bincountImplCPU } from '../kernel_utils/shared';\nexport function bincount(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    weights\n  } = inputs;\n  const {\n    size\n  } = attrs;\n  const xVals = backend.readSync(x.dataId);\n  const weightsVals = backend.readSync(weights.dataId);\n  const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n  return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\nexport const bincountConfig = {\n  kernelName: Bincount,\n  backendName: 'webgl',\n  kernelFunc: bincount\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BitwiseAnd, env } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { bitwiseAndImplCPU as cpuBitwiseAnd } from '../kernel_utils/shared';\nexport const BITWISEAND = `\n  int r = int(a.r) & int(b.r);\n  int g = int(a.g) & int(b.g);\n  int rb = int(a.b) & int(b.b);\n  int ra = int(a.a) & int(b.a);\n  return vec4(r, g, rb, ra);\n`;\nexport const BITWISEAND_UNPACKED = `\n  return float(int(a.r) & int(b.r));\n`;\nexport function bitwiseAnd(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    a,\n    b\n  } = inputs;\n  const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS');\n  const versionNumber = env().getNumber('WEBGL_VERSION');\n  // The type of a and b are ensured to be `int32` in core, therefore no need to\n  // consider other type situations.\n  if (backend.shouldExecuteOnCPU([a, b]) || versionNumber === 1) {\n    const aVals = backend.texData.get(a.dataId).values;\n    const bVals = backend.texData.get(b.dataId).values;\n    const [outValues, outShape] = cpuBitwiseAnd(a.shape, b.shape, aVals, bVals, a.dtype);\n    const out = backend.makeTensorInfo(outShape, a.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n  let program;\n  if (shouldUsePackedProgram) {\n    program = new BinaryOpPackedProgram(BITWISEAND, a.shape, b.shape, false);\n  } else {\n    program = new BinaryOpProgram(BITWISEAND_UNPACKED, a.shape, b.shape);\n  }\n  return backend.runWebGLProgram(program, [a, b], a.dtype);\n}\nexport const bitwiseAndConfig = {\n  kernelName: BitwiseAnd,\n  backendName: 'webgl',\n  kernelFunc: bitwiseAnd\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BroadcastArgs } from '@tensorflow/tfjs-core';\nexport function broadcastArgs(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    s0,\n    s1\n  } = inputs;\n  const s0Vals = backend.readSync(s0.dataId);\n  const s1Vals = backend.readSync(s1.dataId);\n  const broadcastShape = backend_util.assertAndGetBroadcastShape(Array.from(s0Vals), Array.from(s1Vals));\n  return backend.makeTensorInfo([broadcastShape.length], 'int32', Int32Array.from(broadcastShape));\n}\nexport const broadcastArgsConfig = {\n  kernelName: BroadcastArgs,\n  backendName: 'webgl',\n  kernelFunc: broadcastArgs\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NotEqual } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { notEqualImplCPU } from '../kernel_utils/shared';\nconst NOT_EQUAL = `return float(a != b);`;\nexport const notEqual = binaryKernelFunc({\n  opSnippet: NOT_EQUAL,\n  cpuKernelImpl: notEqualImplCPU,\n  dtype: 'bool'\n});\nexport const notEqualConfig = {\n  kernelName: NotEqual,\n  backendName: 'webgl',\n  kernelFunc: notEqual\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Real } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nexport function real(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  const inputData = backend.texData.get(input.dataId);\n  return identity({\n    inputs: {\n      x: inputData.complexTensorInfos.real\n    },\n    backend\n  });\n}\nexport const realConfig = {\n  kernelName: Real,\n  backendName: 'webgl',\n  kernelFunc: real\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnaryOpProgram } from '../unaryop_gpu';\nconst TO_INT = `return float(int(x));`;\nexport function int(input, backend) {\n  const program = new UnaryOpProgram(input.shape, TO_INT);\n  const output = backend.runWebGLProgram(program, [input], 'int32');\n  return {\n    dataId: output.dataId,\n    shape: output.shape,\n    dtype: output.dtype\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { castImplCPU } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { notEqual } from './NotEqual';\nimport { real } from './Real';\nimport { int } from '../kernel_utils/int';\nexport function cast(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dtype\n  } = attrs;\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x\n        },\n        backend\n      });\n    }\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    const result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensor\n      },\n      backend\n    });\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n    return result;\n  }\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend,\n      attrs: {\n        dtype\n      }\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n    return {\n      dataId: result.dataId,\n      shape: result.shape,\n      dtype\n    };\n  }\n  if (backend.shouldExecuteOnCPU([x])) {\n    const values = backend.texData.get(x.dataId).values;\n    const [resultShape, resultType, resultData] = castImplCPU(values, x.shape, x.dtype, dtype);\n    return backend.makeTensorInfo(resultShape, resultType, resultData);\n  }\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo([], 'bool', util.getTypedArrayFromDType('bool', 1));\n    const binaryInputs = {\n      a: x,\n      b: zerosTensorInfo\n    };\n    const result = notEqual({\n      inputs: binaryInputs,\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { ceilImplCPU } from '../kernel_utils/shared';\nconst CEIL = `return ceil(x);`;\nexport const ceil = unaryKernelFunc({\n  opSnippet: CEIL,\n  packedOpSnippet: CEIL,\n  cpuKernelImpl: ceilImplCPU\n});\nexport const ceilConfig = {\n  kernelName: Ceil,\n  backendName: 'webgl',\n  kernelFunc: ceil\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ClipProgram {\n  constructor(aShape) {\n    this.variableNames = ['A'];\n    this.customUniforms = [{\n      name: 'minVal',\n      type: 'float'\n    }, {\n      name: 'maxVal',\n      type: 'float'\n    }];\n    this.outputShape = aShape;\n    this.userCode = `\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ClipPackedProgram {\n  constructor(aShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'minVal',\n      type: 'float'\n    }, {\n      name: 'maxVal',\n      type: 'float'\n    }];\n    this.outputShape = aShape;\n    this.userCode = `\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ClipByValue, env } from '@tensorflow/tfjs-core';\nimport { ClipProgram } from '../clip_gpu';\nimport { ClipPackedProgram } from '../clip_packed_gpu';\nexport function clipByValue(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    clipValueMin,\n    clipValueMax\n  } = attrs;\n  let program;\n  if (env().getBool('WEBGL_PACK_CLIP')) {\n    program = new ClipPackedProgram(x.shape);\n  } else {\n    program = new ClipProgram(x.shape);\n  }\n  const customValues = [[clipValueMin], [clipValueMax]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n}\nexport const clipByValueConfig = {\n  kernelName: ClipByValue,\n  backendName: 'webgl',\n  kernelFunc: clipByValue\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ComplexAbsProgram {\n  constructor(shape) {\n    this.variableNames = ['real', 'imag'];\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs } from '@tensorflow/tfjs-core';\nimport { ComplexAbsProgram } from '../complex_abs_gpu';\n// Returns a TensorInfo with the complex shape and the dataId of the\n// underlying part. We need to do this because a reshaped complex tensor is\n// not reflected in its parts.\nfunction makeComplexComponentTensorInfo(complexTensor, complexPart) {\n  return {\n    dataId: complexPart.dataId,\n    dtype: complexPart.dtype,\n    shape: complexTensor.shape\n  };\n}\nexport function complexAbs(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const xData = backend.texData.get(x.dataId);\n  const program = new ComplexAbsProgram(x.shape);\n  const programInputs = [makeComplexComponentTensorInfo(x, xData.complexTensorInfos.real), makeComplexComponentTensorInfo(x, xData.complexTensorInfos.imag)];\n  return backend.runWebGLProgram(program, programInputs, programInputs[0].dtype);\n}\nexport const complexAbsConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'webgl',\n  kernelFunc: complexAbs\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class ConcatProgram {\n  // Concats 2d tensors along axis=1. See comments in MathBackendWebGL.concat().\n  constructor(shapes) {\n    this.outputShape = [];\n    this.outputShape = backend_util.computeOutShape(shapes, 1 /* axis */);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    const offsets = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][1];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][1];\n    }\n    const snippets = [`if (yC < ${offsets[0]}) setOutput(getT0(yR, yC));`];\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      snippets.push(`else if (yC < ${offsets[i]}) ` + `setOutput(getT${i}(yR, yC-${shift}));`);\n    }\n    const lastIndex = offsets.length;\n    const lastShift = offsets[offsets.length - 1];\n    snippets.push(`else setOutput(getT${lastIndex}(yR, yC-${lastShift}));`);\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${snippets.join('\\n        ')}\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ConcatPackedProgram {\n  constructor(shapes, axis) {\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = [];\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    const offsets = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels, channel, shift) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Imag } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nexport function imag(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  const inputData = backend.texData.get(input.dataId);\n  return identity({\n    inputs: {\n      x: inputData.complexTensorInfos.imag\n    },\n    backend\n  });\n}\nexport const imagConfig = {\n  kernelName: Imag,\n  backendName: 'webgl',\n  kernelFunc: imag\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ConcatProgram } from '../concat_gpu';\nimport { ConcatPackedProgram } from '../concat_packed_gpu';\nimport { concatImplCPU } from '../kernel_utils/shared';\nimport { CLONE, UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nimport { complex } from './Complex';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concatImpl(inputs, axis, backend) {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map(t => real({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const imags = inputs.map(t => imag({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n    const result = complex({\n      inputs: {\n        real: realConcated,\n        imag: imagConcated\n      },\n      backend\n    });\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n    return result;\n  }\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({\n        inputs: {\n          x: t\n        },\n        backend,\n        attrs: {\n          shape\n        }\n      });\n    });\n    const inputsValShapes = tensors2D.map(t => {\n      return {\n        vals: backend.readSync(t.dataId),\n        shape: t.shape\n      };\n    });\n    // Concats 2d tensors along axis=1.\n    const outShape = backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals = concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n    const finalOutShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outInfo;\n  }\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  const shouldPack = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && $inputs[0].shape.length > 1;\n  if ($inputs.length === 1) {\n    // Clone tensor.\n    const program = shouldPack ? new UnaryOpProgram(inputs[0].shape, CLONE) : new UnaryOpPackedProgram(inputs[0].shape, CLONE);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n  const maxTexturesInShader = env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER');\n  if ($inputs.length > maxTexturesInShader) {\n    const reducedInputs = [];\n    for (let i = 0; i < $inputs.length; i += maxTexturesInShader) {\n      const subArray = $inputs.slice(i, i + maxTexturesInShader);\n      reducedInputs.push(concatImpl(subArray, axis, backend));\n    }\n    const result = concatImpl(reducedInputs, axis, backend);\n    for (const i of reducedInputs) {\n      backend.disposeIntermediateTensorInfo(i);\n    }\n    return result;\n  }\n  if (shouldPack) {\n    const program = new ConcatPackedProgram($inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, $inputs, dtype);\n  }\n  const {\n    tensors2D,\n    outShape\n  } = computeTensors2D($inputs, axis, backend);\n  const program = new ConcatProgram(tensors2D.map(t => t.shape));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult = reshape({\n    inputs: {\n      x: result\n    },\n    attrs: {\n      shape: outShape\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(result);\n  return reshapedResult;\n}\nfunction computeTensors2D(inputs, axis, backend) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(x => reshape({\n    inputs: {\n      x\n    },\n    attrs: {\n      shape: [-1, util.sizeFromShape(x.shape.slice(axis))]\n    },\n    backend\n  }));\n  return {\n    tensors2D,\n    outShape\n  };\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nexport function concat(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  const shapes = inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({\n      inputs: {\n        x: $inputs[0]\n      },\n      backend\n    });\n  }\n  return concatImpl($inputs, $axis, backend);\n}\nexport const concatConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Conv2DProgram {\n  constructor(convInfo, addBias = false, activation = null, hasPreluActivationWeights = false, hasLeakyreluAlpha = false) {\n    this.variableNames = ['x', 'W'];\n    this.outputShape = convInfo.outShape;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n    let activationSnippet = '',\n      applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivationWeights) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyreluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n      applyActivationSnippet = `result = activation(result);`;\n    }\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivationWeights) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyreluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n    this.userCode = `\n      ${activationSnippet}\n\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${channelDim}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${rowDim}], coords[${colDim}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * ${dilationHeight};\n\n          if (xR < 0 || xR >= ${convInfo.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * ${dilationWidth};\n\n            if (xC < 0 || xC >= ${convInfo.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${inputDepthVec4Remainder === 1}) {\n\n              if (${isChannelsLast}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${inputDepthNearestVec4}) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${inputDepthNearestVec4}, xR, xC) *\n                    getW(wR, wC, ${inputDepthNearestVec4}, d2);\n              }\n\n            } else if (${inputDepthVec4Remainder === 2}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${inputDepthVec4Remainder === 3}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${inputDepthNearestVec4}, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                getW(wR, wC, ${inputDepthNearestVec4} + 2, d2)\n              );\n\n              if (${isChannelsLast}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${inputDepthNearestVec4}, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 1, xR, xC),\n                  getX(batch, ${inputDepthNearestVec4} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\nexport class Conv3DProgram {\n  constructor(convInfo) {\n    this.variableNames = ['x', 'W'];\n    this.outputShape = convInfo.outShape;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const inputDepthNearestVec4 = Math.floor(convInfo.inChannels / 4) * 4;\n    const inputDepthVec4Remainder = convInfo.inChannels % 4;\n    this.userCode = `\n      const ivec3 strides = ivec3(${strideDepth}, ${strideHeight}, ${strideWidth});\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          int xF = xFCorner + wF * ${dilationDepth};\n\n          if (xF < 0 || xF >= ${convInfo.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            int xR = xRCorner + wR * ${dilationHeight};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              int xC = xCCorner + wC * ${dilationWidth};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${inputDepthNearestVec4}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${inputDepthVec4Remainder === 1}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}) *\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2);\n              } else if (${inputDepthVec4Remainder === 2}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${inputDepthVec4Remainder === 3}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4}),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 1),\n                  getX(batch, xF, xR, xC, ${inputDepthNearestVec4} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${inputDepthNearestVec4}, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 1, d2),\n                  getW(wF, wR, wC, ${inputDepthNearestVec4} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class Conv2DPackedProgram {\n  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n    this.variableNames = ['x', 'W'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'pads',\n      type: 'ivec2'\n    }, {\n      name: 'strides',\n      type: 'ivec2'\n    }, {\n      name: 'dilations',\n      type: 'ivec2'\n    }, {\n      name: 'inDims',\n      type: 'ivec2'\n    }];\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n    let mainLoop = `\n       int xR; int xC; int xCOffset;\n       vec4 wTexel; vec4 previous; vec4 final;`;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n           vec4 xTexelC${c * 2};\n           int xTexelC${c * 2}Ready;\n           vec4 xTexelC${c * 2 + 1};\n           int xTexelC${c * 2 + 1}Ready;\n           vec4 xC${c};`;\n    }\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    mainLoop += `\n     for (int r = 0; r < ${filterHeight}; r++) {\n      for (int d1 = 0; d1 < ${convInfo.inChannels}; d1 += 2) {\n       `;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n           xTexelC${c * 2} = vec4(0.0);\n           xTexelC${c * 2}Ready = 0;\n           xTexelC${c * 2 + 1} = vec4(0.0);\n           xTexelC${c * 2 + 1}Ready = 0;\n           xC${c} = vec4(0.0);`;\n    }\n    mainLoop += `\n         xR = xRCorner + r * dilations[0];\n         if (xR >=0 && xR < inDims[0]) {\n       `;\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n      mainLoop += `\n           xC = xCCorner + ${colIndex * dilationWidth};\n           `;\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n            mainLoop += `\n                 xCOffset = xC + 1;\n                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n               `;\n            // This texel has been read in previous iteration if the dilation\n            // is 1.\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += `\n                 xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${colIndex}.xy);\n                 `;\n            } else {\n              mainLoop += `\n                   xCOffset = xC + 1 - 2;\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       previous.zw = vec2(0.0);\n                     }\n\n                     xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                   } else {\n                     xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                   }\n                   `;\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += `\n                 if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xC${colIndex} = xTexelC${colIndex};\n                 `;\n          }\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n            const nextTexelOffset = padLeft % 2 === 0 ? util.nearestLargerEven(dilationWidth) : dilationWidth;\n            if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {\n              mainLoop += `\n                   xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                     xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                     // Need to manually clear unused channels in case\n                     // we're reading from recycled texture.\n                     if (xCOffset + 1 >= inDims[1]) {\n                       xTexelC${colIndex + 1}.zw = vec2(0.0);\n                     }\n                     xTexelC${colIndex + 1}Ready = 1;\n                   }\n                   `;\n              // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n              if (dilationWidth > 1) {\n                mainLoop += `\n                     xCOffset -= 2;\n                     if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                      previous = getX(batch, xR, xCOffset, d1);\n                      xC${colIndex + 1} = vec4(previous.zw, xTexelC${colIndex + 1}.xy);\n                     } else {\n                      xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${colIndex + 1}.xy);\n                     }\n                     `;\n              } else {\n                mainLoop += `\n                     xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.xy);\n                     `;\n              }\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += `\n                     xC${colIndex + 1} = xTexelC${colIndex};\n                     `;\n              } else {\n                mainLoop += `\n                     xCOffset = xC + ${nextTexelOffset};\n\n                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                       xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                       if (xCOffset + 1 >= inDims[1]) {\n                         xTexelC${colIndex + 1}.zw = vec2(0.0);\n                       }\n                       xTexelC${colIndex + 1}Ready = 1;\n                     }\n\n                     xC${colIndex + 1} = xTexelC${colIndex + 1};\n                     `;\n              }\n            }\n          }\n        }\n      } else {\n        // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                 xCOffset = xC + 1 - strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                   // Need to manually clear unused channels in case\n                   // we're reading from recycled texture.\n                   if (xC + 2 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n               `;\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                   final = vec4(0.0);\n                   xCOffset = xC + 1 + strides[1];\n                   if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                     final = getX(batch, xR, xCOffset, d1);\n                   }\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                 `;\n            }\n          } else {\n            mainLoop += `\n                 if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                   xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                   if (xC + 1 >= inDims[1]) {\n                     xTexelC${colIndex}.zw = vec2(0.0);\n                   }\n                   xTexelC${colIndex}Ready = 1;\n                 }\n\n                 xCOffset = xC + strides[1];\n                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                   xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                   if (xCOffset + 1 >= inDims[1]) {\n                     xTexelC${colIndex + 1}.zw = vec2(0.);\n                   }\n                   xTexelC${colIndex + 1}Ready = 1;\n                 }\n\n                 xC${colIndex} = vec4(\n                   xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n               `;\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                   xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n                 `;\n            }\n          }\n        }\n      }\n      // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n      if (colIndex < filterWidth) {\n        mainLoop += `\n             wTexel = getW(r, ${colIndex}, d1, d2);\n             dotProd += xC${colIndex}.xxzz * vec4(wTexel.xy, wTexel.xy);\n             if(d1 + 1 < ${convInfo.inChannels}) {\n               dotProd += xC${colIndex}.yyww * vec4(wTexel.zw, wTexel.zw);\n             }\n           `;\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += `\n               wTexel = getW(r, ${colIndex + 1}, d1, d2);\n               dotProd += xC${colIndex + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);\n               if(d1 + 1 < ${convInfo.inChannels}) {\n                 dotProd += xC${colIndex + 1}.yyww * vec4(wTexel.zw, wTexel.zw);\n               }\n             `;\n        }\n      }\n    }\n    mainLoop += `\n     }\n   `;\n    mainLoop += `\n     }\n   `;\n    mainLoop += `\n     }\n   `;\n    let activationSnippet = '',\n      applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getPreluActivationWeightsAtOutCoords();\n           ${activation}\n         }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n           vec4 b = getLeakyreluAlphaAtOutCoords();\n           ${activation}\n         }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n           ${activation}\n         }`;\n      }\n      applyActivationSnippet = `result = activation(result);`;\n    }\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n    this.userCode = `\n       ${activationSnippet}\n\n       void main() {\n         ivec4 coords = getOutputCoords();\n         int batch = coords.x;\n         ivec2 xRCCorner = coords.yz * strides - pads;\n         int d2 = coords.w;\n         int xRCorner = xRCCorner.x;\n         int xCCorner = xRCCorner.y;\n\n         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n         vec4 dotProd = vec4(0.000000000000001);\n\n         ${mainLoop}\n\n         vec4 result = dotProd - vec4(0.000000000000001);\n         ${addBiasSnippet}\n         ${applyActivationSnippet}\n         setOutput(result);\n       }\n     `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class Im2ColPackedProgram {\n  constructor(outputShape, convInfo) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'inputShape',\n      type: 'ivec4'\n    }, {\n      name: 'pad',\n      type: 'ivec2'\n    }, {\n      name: 'stride',\n      type: 'ivec2'\n    }, {\n      name: 'dilation',\n      type: 'ivec2'\n    }, {\n      name: 'inChannels',\n      type: 'int'\n    }, {\n      name: 'itemsPerBlockRow',\n      type: 'int'\n    }, {\n      name: 'outWidth',\n      type: 'int'\n    }];\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {\n      dataFormat\n    } = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const boundsCheckingSnippet = this.enableShapeUniforms ? 'if(blockIndex < outShape[2] && pos < outShape[1]) {' : `if(blockIndex < ${outputShape[2]} && pos < ${outputShape[1]}) {`;\n    let unrolled = ``;\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.z + ${col};\n          pos = rc.y + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n    this.userCode = `\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { Im2ColPackedProgram } from '../im2col_packed_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { MatMulPackedProgram } from '../mulmat_packed_gpu';\nimport * as webgl_util from '../webgl_util';\nimport { batchMatMulImpl, MATMUL_SHARED_DIM_THRESHOLD } from './BatchMatMul_impl';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\n// Both conv2dByMatMul and conv2dWithIm2Row fuse height and width into one\n// dimension to compute batchMatMul, so bias and activation weights are also\n// supposed to fuse the two dimensions into one.\n//\n// This function computes the target shape for fusing height and width\n// dimensions. Returning null means the shape is already compatible.\n//\n// Even though the bias is not supposed to be a 3-D or a 4-D (including\n// batch) tensor and PReLU activiation weights is not supposed to be a 4-D\n// tensor, we still need to support them, because we haven't disabled\n// them for NHWC format.\n// https://github.com/tensorflow/tfjs/blob/b53bd47e880367ae57493f0ea628abaf08db2d5d/tfjs-core/src/ops/fused/conv2d.ts#L181-L196\nfunction getShapeForBatchMatMul(shape, isChannelsLast) {\n  const length = shape.length;\n  if (length >= 3) {\n    return isChannelsLast ? [...shape.slice(0, -3) /* batch */, shape[length - 3] * shape[length - 2] /* height * width */, shape[length - 1] /* channel */] : [...shape.slice(0, -3) /* batch */, shape[length - 3] /* channel */, shape[length - 2] * shape[length - 1] /* height * width */];\n  } else if (!isChannelsLast && length === 1 && shape[0] > 1) {\n    return [shape[0], 1];\n  } else {\n    return null;\n  }\n}\n// For 1x1 kernels that iterate through every point in the input, convolution\n// can be expressed as matrix multiplication (without need for memory\n// remapping).\nexport function conv2dByMatMul({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}) {\n  // Reshapes conv2D input to 2D tensors, uses matMul and then reshape the\n  // result from 2D to 4D.\n  const xShape = x.shape;\n  const xTexData = backend.texData.get(x.dataId);\n  const sharedMatMulDim = convInfo.inChannels;\n  const outerShapeX = xShape[0] * xShape[1] * xShape[2];\n  const outerShapeFilter = convInfo.outChannels;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const transposeA = false;\n  const transposeB = false;\n  let out;\n  const intermediates = [];\n  if (preluActivationWeights != null) {\n    const targetShape = getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {\n          x: preluActivationWeights\n        },\n        backend,\n        attrs: {\n          shape: targetShape\n        }\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({\n        inputs: {\n          x: bias\n        },\n        backend,\n        attrs: {\n          shape: targetShape\n        }\n      });\n      intermediates.push(bias);\n    }\n  }\n  // TODO: Once reduction ops are packed, batchMatMul will always be packed\n  // and we can remove this condition.\n  const batchMatMulWillBeUnpacked = (outerShapeX === 1 || outerShapeFilter === 1) && sharedMatMulDim > MATMUL_SHARED_DIM_THRESHOLD;\n  // The algorithm in the if condition assumes (1) the output will be packed,\n  // (2) x is packed, (3) x isChannelsLast, (4)  x's packed texture is already\n  // on GPU, (5) col is odd, (6) the width, height and inChannels are the same\n  // for xTexData.shape and xShape.\n  const canOptimize = !batchMatMulWillBeUnpacked && xTexData.isPacked && isChannelsLast && xTexData.texture != null && xShape[2] % 2 !== 0 && util.arraysEqual(xTexData.shape.slice(-3), xShape.slice(-3));\n  if (canOptimize) {\n    // We avoid expensive packed 2x2 reshape by padding col count to next,\n    // even number. When col is odd, the result of packed batchMatMul is\n    // the same (has the same texture layout and and values in the texture) as\n    // it is for next even col. We make the odd-cols tensor to look like\n    // even-cols tensor before the operation and, after the batchMatMul,\n    // fix the even-cols result to have odd number of cols.\n    const targetShape = xShape[0] * xShape[1] * (xShape[2] + 1);\n    const xReshaped = {\n      dataId: x.dataId,\n      shape: [1, targetShape, convInfo.inChannels],\n      dtype: x.dtype\n    };\n    // xTexData.shape gets referenced from GPGPUBinary.inShapeInfos.\n    // Decrementing col count, after batchMatMul->...->compileProgram leads to\n    // invalid col count within the reference in GPGPUBinary.inShapeInfos.\n    // Alternative fix would be to provide a copy to GPGPUBinary.inShapeInfos\n    // in compileProgram method, but that would affect compilation of all\n    // programs - instead, provide a copy here, with even col count, before\n    // calling batchMatMul->...->compileProgram and after that, the original\n    // xTexData.shape is restored.\n    const originalXTexDataShape = xTexData.shape;\n    xTexData.shape = xTexData.shape.slice();\n    xTexData.shape[xTexData.shape.length - 2]++;\n    util.assert(webgl_util.isReshapeFree(xTexData.shape, xReshaped.shape), () => `packed reshape ${xTexData.shape} to ${xReshaped.shape} isn't free`);\n    const filterReshaped = reshape({\n      inputs: {\n        x: filter\n      },\n      backend,\n      attrs: {\n        shape: [1, convInfo.inChannels, convInfo.outChannels]\n      }\n    });\n    intermediates.push(filterReshaped);\n    const pointwiseConv = batchMatMulImpl({\n      a: xReshaped,\n      b: filterReshaped,\n      backend,\n      transposeA,\n      transposeB,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n    const pointwiseConvTexData = backend.texData.get(pointwiseConv.dataId);\n    util.assert(pointwiseConvTexData.isPacked, () => 'batchMatMul result is expected to be packed');\n    // Restore the input shape to original.\n    xTexData.shape = originalXTexDataShape;\n    // Set the output shape - there is no need for expensive reshape as data\n    // layout is already correct.\n    pointwiseConvTexData.shape = convInfo.outShape;\n    out = identity({\n      inputs: {\n        x: pointwiseConv\n      },\n      backend\n    });\n    out.shape = convInfo.outShape;\n    intermediates.push(pointwiseConv);\n  } else {\n    const numCols = convInfo.outHeight * convInfo.outWidth;\n    const xReshaped = reshape({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        shape: isChannelsLast ? [convInfo.batchSize, numCols, convInfo.inChannels] : [convInfo.batchSize, convInfo.inChannels, numCols]\n      }\n    });\n    const filterReshaped = reshape({\n      inputs: {\n        x: filter\n      },\n      backend,\n      attrs: {\n        shape: [1, convInfo.inChannels, convInfo.outChannels]\n      }\n    });\n    const result = batchMatMulImpl({\n      a: isChannelsLast ? xReshaped : filterReshaped,\n      b: isChannelsLast ? filterReshaped : xReshaped,\n      transposeA: !isChannelsLast,\n      transposeB,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n    out = reshape({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        shape: convInfo.outShape\n      }\n    });\n    intermediates.push(xReshaped);\n    intermediates.push(filterReshaped);\n    intermediates.push(result);\n  }\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return out;\n}\n// Implements the im2row algorithm as outlined in \"High Performance\n// Convolutional Neural Networks for Document Processing\" (Suvisoft, 2006)\nexport function conv2dWithIm2Row({\n  x,\n  filter,\n  convInfo,\n  backend,\n  bias = null,\n  preluActivationWeights = null,\n  leakyreluAlpha = 0,\n  activation = null\n}) {\n  // Rearranges conv2d input so each block to be convolved over forms the\n  // column of a new matrix with shape [filterWidth * filterHeight *\n  // inChannels, outHeight * outWidth]. The filter is also rearranged so each\n  // output channel forms a row of a new matrix with shape [outChannels,\n  // filterWidth * filterHeight * inChannels]. The convolution is then\n  // computed by multiplying these matrices and reshaping the result.\n  const {\n    filterWidth,\n    filterHeight,\n    inChannels,\n    outWidth,\n    outHeight,\n    dataFormat\n  } = convInfo;\n  const isChannelsLast = dataFormat === 'channelsLast';\n  const sharedDim = filterWidth * filterHeight * inChannels;\n  const numCols = outHeight * outWidth;\n  const x2ColShape = [convInfo.batchSize, sharedDim, numCols];\n  const transposeA = true;\n  const transposeB = false;\n  const intermediates = [];\n  if (preluActivationWeights != null) {\n    const targetShape = getShapeForBatchMatMul(preluActivationWeights.shape, isChannelsLast);\n    if (targetShape != null) {\n      preluActivationWeights = reshape({\n        inputs: {\n          x: preluActivationWeights\n        },\n        backend,\n        attrs: {\n          shape: targetShape\n        }\n      });\n      intermediates.push(preluActivationWeights);\n    }\n  }\n  if (bias != null) {\n    const targetShape = getShapeForBatchMatMul(bias.shape, isChannelsLast);\n    if (targetShape != null) {\n      bias = reshape({\n        inputs: {\n          x: bias\n        },\n        backend,\n        attrs: {\n          shape: targetShape\n        }\n      });\n      intermediates.push(bias);\n    }\n  }\n  const w2Row = reshape({\n    inputs: {\n      x: filter\n    },\n    backend,\n    attrs: {\n      shape: [1, sharedDim, util.sizeFromShape(filter.shape) / sharedDim]\n    }\n  });\n  intermediates.push(w2Row);\n  const im2ColProgram = new Im2ColPackedProgram(x2ColShape, convInfo);\n  const customValues = [x.shape, [convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inChannels], [convInfo.filterWidth * convInfo.inChannels], [convInfo.outWidth]];\n  const im2Col = backend.runWebGLProgram(im2ColProgram, [x], 'float32', customValues);\n  const im2ColReshaped = reshape({\n    inputs: {\n      x: im2Col\n    },\n    backend,\n    attrs: {\n      shape: x2ColShape\n    }\n  });\n  intermediates.push(im2Col);\n  intermediates.push(im2ColReshaped);\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n  const matmulProgram = new MatMulPackedProgram(isChannelsLast ? im2ColReshaped.shape : w2Row.shape, isChannelsLast ? w2Row.shape : im2ColReshaped.shape, isChannelsLast ? [convInfo.batchSize, numCols, convInfo.outChannels] : [convInfo.batchSize, convInfo.outChannels, numCols], transposeA, transposeB, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  const inputs = isChannelsLast ? [im2ColReshaped, w2Row] : [w2Row, im2ColReshaped];\n  if (bias) {\n    inputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    inputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n    inputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  const product = backend.runWebGLProgram(matmulProgram, inputs, 'float32');\n  const out = reshape({\n    inputs: {\n      x: product\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  intermediates.push(product);\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n  return out;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, env } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { Conv2DPackedProgram } from '../conv_packed_gpu';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function conv2d(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out;\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend\n    });\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast' && env().getBool('WEBGL_EXP_CONV')) {\n    const program = new Conv2DPackedProgram(convInfo);\n    const customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];\n    out = backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend\n    });\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(out);\n  return outReshaped;\n}\nexport const conv2DConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Conv2DDerFilterProgram {\n  constructor(convInfo) {\n    this.variableNames = ['x', 'dy'];\n    this.outputShape = convInfo.filterShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              ${isChannelsLast ? `float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);` : `float dyValue = getDy(b, d2, yR, yC);\n              float xValue = getX(b, d1, xR, xC);\n              dotProd += (xValue * dyValue);`}\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\nexport class Conv2DDerInputProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy', 'W'];\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const rowDim = isChannelsLast ? 1 : 2;\n    const colDim = isChannelsLast ? 2 : 3;\n    const channelDim = isChannelsLast ? 3 : 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${channelDim}];\n\n        ivec2 dyCorner = ivec2(coords[${rowDim}], coords[${colDim}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n\n              if (${isChannelsLast}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\nexport class Conv3DDerFilterProgram {\n  constructor(convInfo) {\n    this.variableNames = ['x', 'dy'];\n    this.outputShape = convInfo.filterShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = convInfo.padInfo.front;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    this.userCode = `\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yF = 0; yF < ${convInfo.outDepth}; yF++) {\n            int xF = wF + yF * ${strideDepth} - ${padFront};\n\n            if (xF < 0 || xF >= ${convInfo.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n              int xR = wR + yR * ${strideHeight} - ${padTop};\n\n              if (xR < 0 || xR >= ${convInfo.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n                int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n                if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\nexport class Conv3DDerInputProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy', 'W'];\n    this.outputShape = convInfo.inShape;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padFront = filterDepth - 1 - convInfo.padInfo.front;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${filterDepth}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${convInfo.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${filterDepth} - 1 - wF;\n\n          for (int wR = 0; wR < ${filterHeight}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${filterHeight} - 1 - wR;\n\n            for (int wC = 0; wC < ${filterWidth}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${filterWidth} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropFilter } from '@tensorflow/tfjs-core';\nimport { Conv2DDerFilterProgram } from '../conv_backprop_gpu';\nexport function conv2DBackpropFilter(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    dy\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode,\n    filterShape\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n  const program = new Conv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\nexport const conv2DBackpropFilterConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropFilter\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class Conv2DDerInputPackedProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy', 'W'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'strides',\n      type: 'vec2'\n    }];\n    this.outputShape = convInfo.inShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n\n        ivec2 dyCorner = ivec2(coords[1], coords[2]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        vec4 result = vec4(0.);\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / strides[0];\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            float dyC = float(dyCCorner + wC) / strides[1];\n            bool idyCVal = (dyC >= 0.0) && (dyC < ${convInfo.outWidth}.0)\n              && (fract(dyC) == 0.0);\n            int idyC = int(dyC);\n\n            float dyC2 = float(dyCCorner + wC + 1) / strides[1];\n            bool idyCVal2 = (dyC2 >= 0.0) && (dyC2 < ${convInfo.outWidth}.0)\n              && (fract(dyC2) == 0.0);\n            int idyC2 = int(dyC2);\n\n            if (idyCVal && idyCVal2) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec4 dySample2 = (idyC / 2 == idyC2 / 2) ?\n                  dySample : getDy(batch, idyR, idyC2, d2);\n\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n\n                dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample2.xy : dySample2.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC, d2);\n                vec2 dyValue = mod(float(idyC), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.xy += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            } else if (idyCVal2) {\n              for (int d2 = 0; d2 < ${convInfo.outChannels}; d2 += 2) {\n                vec4 wValue = getW(wRPerm, wCPerm, d1, d2);\n                vec4 dySample = getDy(batch, idyR, idyC2, d2);\n                vec2 dyValue = mod(float(idyC2), 2.) == 0. ?\n                  dySample.xy : dySample.zw;\n                result.zw += vec2(dot(dyValue, wValue.xy),\n                  dot(dyValue, wValue.zw));\n              }\n            }\n          }\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, env } from '@tensorflow/tfjs-core';\nimport { Conv2DDerInputProgram } from '../conv_backprop_gpu';\nimport { Conv2DDerInputPackedProgram } from '../conv_backprop_packed_gpu';\nexport function conv2DBackpropInput(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    inputShape,\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n  if (env().getBool('WEBGL_PACK_CONV2DTRANSPOSE') && $dataFormat === 'channelsLast') {\n    const customValues = [[convInfo.strideHeight, convInfo.strideWidth]];\n    const program = new Conv2DDerInputPackedProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32', customValues);\n  } else {\n    const program = new Conv2DDerInputProgram(convInfo);\n    return backend.runWebGLProgram(program, [dy, filter], 'float32');\n  }\n}\nexport const conv2DBackpropInputConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: conv2DBackpropInput\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3D } from '@tensorflow/tfjs-core';\nimport { Conv3DProgram } from '../conv_gpu';\nexport function conv3D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  const convInfo = backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n  const program = new Conv3DProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, filter], 'float32');\n}\nexport const conv3DConfig = {\n  kernelName: Conv3D,\n  backendName: 'webgl',\n  kernelFunc: conv3D\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropFilterV2 } from '@tensorflow/tfjs-core';\nimport { Conv3DDerFilterProgram } from '../conv_backprop_gpu';\nexport function conv3DBackpropFilterV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    dy\n  } = inputs;\n  const {\n    strides,\n    pad,\n    filterShape\n  } = attrs;\n  const convInfo = backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad);\n  const program = new Conv3DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\nexport const conv3DBackpropFilterV2Config = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropFilterV2\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropInputV2 } from '@tensorflow/tfjs-core';\nimport { Conv3DDerInputProgram } from '../conv_backprop_gpu';\nexport function conv3DBackpropInput(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    pad,\n    strides,\n    inputShape\n  } = attrs;\n  const convInfo = backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);\n  const program = new Conv3DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\nexport const conv3DBackpropInputConfig = {\n  kernelName: Conv3DBackpropInputV2,\n  backendName: 'webgl',\n  kernelFunc: conv3DBackpropInput\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cos } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst COS = CHECK_NAN_SNIPPET_UNARY + `\n  return cos(x);\n`;\nconst COS_PACKED = `\n  vec4 result = cos(x);\n  bvec4 isNaN = isnan(x);\n  ${CHECK_NAN_SNIPPET_PACKED}\n  return result;\n`;\nexport const cos = unaryKernelFunc({\n  opSnippet: COS,\n  packedOpSnippet: COS_PACKED\n});\nexport const cosConfig = {\n  kernelName: Cos,\n  backendName: 'webgl',\n  kernelFunc: cos\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cosh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst COSH = `\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n`;\nexport const cosh = unaryKernelFunc({\n  opSnippet: COSH\n});\nexport const coshConfig = {\n  kernelName: Cosh,\n  backendName: 'webgl',\n  kernelFunc: cosh\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class CropAndResizeProgram {\n  constructor(imageShape, boxShape, cropSize, method, extrapolationValue) {\n    this.variableNames = ['Image', 'Boxes', 'BoxInd'];\n    this.outputShape = [];\n    const [batch, imageHeight, imageWidth, depth] = imageShape;\n    const [numBoxes] = boxShape;\n    const [cropHeight, cropWidth] = cropSize;\n    this.outputShape = [numBoxes, cropHeight, cropWidth, depth];\n    const methodId = method === 'bilinear' ? 1 : 0;\n    const [inputHeightFloat, inputWidthFloat] = [`${imageHeight - 1}.0`, `${imageWidth - 1}.0`];\n    const [heightRatio, heightScale, inY] = cropHeight > 1 ? [`${(imageHeight - 1) / (cropHeight - 1)}`, '(y2-y1) * height_ratio', `y1*${inputHeightFloat} + float(y)*(height_scale)`] : ['0.0', '0.0', `0.5 * (y1+y2) * ${inputHeightFloat}`];\n    const [widthRatio, widthScale, inX] = cropWidth > 1 ? [`${(imageWidth - 1) / (cropWidth - 1)}`, '(x2-x1) * width_ratio', `x1*${inputWidthFloat} + float(x)*(width_scale)`] : ['0.0', '0.0', `0.5 * (x1+x2) * ${inputWidthFloat}`];\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op_gpu.cu.cc\n    this.userCode = `\n      const float height_ratio = float(${heightRatio});\n      const float width_ratio = float(${widthRatio});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${batch}) {\n          return;\n        }\n\n        float height_scale = ${heightScale};\n        float width_scale = ${widthScale};\n\n        float in_y = ${inY};\n        if( in_y < 0.0 || in_y > ${inputHeightFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n        float in_x = ${inX};\n        if( in_x < 0.0 || in_x > ${inputWidthFloat} ) {\n          setOutput(float(${extrapolationValue}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${methodId} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { CropAndResize } from '@tensorflow/tfjs-core';\nimport { CropAndResizeProgram } from '../crop_and_resize_gpu';\nexport const cropAndResize = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    image,\n    boxes,\n    boxInd\n  } = inputs;\n  const {\n    cropSize,\n    method,\n    extrapolationValue\n  } = attrs;\n  const program = new CropAndResizeProgram(image.shape, boxes.shape, cropSize, method, extrapolationValue);\n  return backend.runWebGLProgram(program, [image, boxes, boxInd], 'float32');\n};\nexport const cropAndResizeConfig = {\n  kernelName: CropAndResize,\n  backendName: 'webgl',\n  kernelFunc: cropAndResize\n};\n", "import { getCoordsDataType } from './shader_compiler';\nexport var CumOpType;\n(function (CumOpType) {\n  CumOpType[\"Prod\"] = \"*\";\n  CumOpType[\"Sum\"] = \"+\";\n})(CumOpType || (CumOpType = {}));\nexport class CumProgram {\n  constructor(op, outputShape, exclusive, reverse) {\n    this.op = op;\n    this.outputShape = outputShape;\n    this.variableNames = ['x'];\n    this.customUniforms = [{\n      name: 'index',\n      type: 'float'\n    }];\n    const rank = this.outputShape.length;\n    const initVal = this.op === CumOpType.Prod ? '1.0' : '0.0';\n    const val = exclusive ? initVal : `getX(${getCoords(rank, 'coords', this.op)})`;\n    const length = this.outputShape[this.outputShape.length - 1];\n    let condition = '';\n    let idxString = '';\n    // When exclusive is set, the cum op becomes roll op that copies the\n    // value from the previous index based on the direction specified by the\n    // reverse flag.\n    if (exclusive) {\n      condition = reverse ? `end != ${length - 1}` : 'end != 0';\n      idxString = reverse ? 'end + 1' : 'end - 1';\n    } else {\n      condition = reverse ? `end + pow2 < ${length}` : 'end >= pow2';\n      idxString = reverse ? 'end + pow2' : 'end - pow2';\n    }\n    this.userCode = `\n      void main() {\n        ${getCoordsDataType(rank)} coords = getOutputCoords();\n        int end = ${getFinalCoord(rank, 'coords', this.op)};\n        float val = ${val};\n        int pow2 = int(pow(2.0, index));\n        if (${condition}) {\n          int idx = ${idxString};\n          ${getFinalCoord(rank, 'coords', this.op)} = idx;\n          val ${this.op}= getX(${getCoords(rank, 'coords', this.op)});\n        }\n        setOutput(val);\n      }\n    `;\n  }\n}\nfunction getCoords(rank, name, op) {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.x, ${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.x, ${name}.y, ${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.x, ${name}.y, ${name}.z, ${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\nfunction getFinalCoord(rank, name, op) {\n  if (rank === 1) {\n    return `${name}`;\n  } else if (rank === 2) {\n    return `${name}.y`;\n  } else if (rank === 3) {\n    return `${name}.z`;\n  } else if (rank === 4) {\n    return `${name}.w`;\n  } else {\n    throw new Error(`Cumulative ${op} for rank ${rank} is not yet supported`);\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { CumProgram } from '../cum_gpu';\nimport { identity } from './Identity';\nimport { transpose } from './Transpose';\nexport function cumImpl(op, x, backend, axis, exclusive, reverse) {\n  const xRank = x.shape.length;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n  }\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n  if (permutedAxis !== xRank - 1) {\n    throw new Error(`WebGL cumprod shader expects an inner-most axis=${x.shape.length - 1} ` + `but got axis=${axis}`);\n  }\n  const size = permutedX.shape[permutedAxis];\n  let result = identity({\n    inputs: {\n      x: permutedX\n    },\n    backend\n  });\n  // Use cum parallel algorithm, inspired by:\n  // https://developer.nvidia.com/gpugems/gpugems3/part-vi-gpu-computing/chapter-39-parallel-prefix-sum-scan-cuda\n  // Note: although the algorithm is called sum, it works for any associtative\n  // operator with an identity.\n  for (let i = 0; i <= Math.ceil(Math.log2(size)) - 1; i++) {\n    const program = new CumProgram(op, permutedX.shape, false, reverse);\n    const customValues = [[i]];\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype, customValues);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  // For exclusive cum, shift the end result in the direction of product or sum\n  // and add 1 for product or 0 for sum to the front index.\n  if (exclusive) {\n    const program = new CumProgram(op, permutedX.shape, exclusive, reverse);\n    const prevResult = result;\n    result = backend.runWebGLProgram(program, [result], result.dtype);\n    backend.disposeIntermediateTensorInfo(prevResult);\n  }\n  if (permutation != null) {\n    const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n    const reverseTransposedResult = transpose({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        perm: reversePermutation\n      }\n    });\n    backend.disposeIntermediateTensorInfo(result);\n    backend.disposeIntermediateTensorInfo(permutedX);\n    return reverseTransposedResult;\n  }\n  return result;\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cumprod } from '@tensorflow/tfjs-core';\nimport { CumOpType } from '../cum_gpu';\nimport { cumImpl } from './Cum_impl';\nexport function cumprod(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    exclusive,\n    reverse\n  } = attrs;\n  return cumImpl(CumOpType.Prod, x, backend, axis, exclusive, reverse);\n}\nexport const cumprodConfig = {\n  kernelName: Cumprod,\n  backendName: 'webgl',\n  kernelFunc: cumprod\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cumsum } from '@tensorflow/tfjs-core';\nimport { CumOpType } from '../cum_gpu';\nimport { cumImpl } from './Cum_impl';\nexport function cumsum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    exclusive,\n    reverse\n  } = attrs;\n  return cumImpl(CumOpType.Sum, x, backend, axis, exclusive, reverse);\n}\nexport const cumsumConfig = {\n  kernelName: Cumsum,\n  backendName: 'webgl',\n  kernelFunc: cumsum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImplCPU, bincountReduceImplCPU } from '../kernel_utils/shared';\nexport function denseBincount(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    weights\n  } = inputs;\n  const {\n    size,\n    binaryOutput\n  } = attrs;\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId);\n    const weightsVals = backend.readSync(weights.dataId);\n    const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` + `${x.shape.length}.`);\n}\nexport const denseBincountConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthToSpaceProgram {\n  constructor(outputShape, blockSize, dataFormat) {\n    this.variableNames = ['x'];\n    this.outputShape = [];\n    this.outputShape = outputShape;\n    this.blockSize = blockSize;\n    this.dataFormat = dataFormat;\n    this.userCode = `\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${blockSize};\n      int offset_h = imod(h, ${blockSize});\n      int in_w = w / ${blockSize};\n      int offset_w = imod(w, ${blockSize});\n      int offset_d = (offset_h * ${blockSize} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `;\n  }\n  getHeightCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[1]`;\n    } else {\n      return `coords[2]`;\n    }\n  }\n  getWidthCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[2]`;\n    } else {\n      return `coords[3]`;\n    }\n  }\n  getDepthCoordString() {\n    if (this.dataFormat === 'NHWC') {\n      return `coords[3]`;\n    } else {\n      return `coords[1]`;\n    }\n  }\n  getOutputDepthSize() {\n    if (this.dataFormat === 'NHWC') {\n      return this.outputShape[3];\n    } else {\n      return this.outputShape[1];\n    }\n  }\n  getInputSamplingString() {\n    if (this.dataFormat === 'NHWC') {\n      return `getX(b, in_h, in_w, in_d)`;\n    } else {\n      return `getX(b, in_d, in_h, in_w)`;\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace } from '@tensorflow/tfjs-core';\nimport { DepthToSpaceProgram } from '../depth_to_space_gpu';\nexport function depthToSpace(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockSize,\n    dataFormat\n  } = attrs;\n  const batchSize = x.shape[0];\n  const inputHeight = dataFormat === 'NHWC' ? x.shape[1] : x.shape[2];\n  const inputWidth = dataFormat === 'NHWC' ? x.shape[2] : x.shape[3];\n  const inputDepth = dataFormat === 'NHWC' ? x.shape[3] : x.shape[1];\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n  const outputShape = dataFormat === 'NHWC' ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class DepthwiseConv2DProgram {\n  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n    this.variableNames = ['x', 'W'];\n    this.customUniforms = [{\n      name: 'pads',\n      type: 'ivec2'\n    }, {\n      name: 'strides',\n      type: 'ivec2'\n    }, {\n      name: 'dilations',\n      type: 'ivec2'\n    }, {\n      name: 'inDims',\n      type: 'ivec2'\n    }];\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    let activationSnippet = '',\n      applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n      applyActivationSnippet = `result = activation(result);`;\n    }\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class DepthwiseConvPacked2DProgram {\n  constructor(convInfo, addBias = false, activation = null, hasPreluActivation = false, hasLeakyReluAlpha = false) {\n    this.variableNames = ['x', 'W'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'pads',\n      type: 'ivec2'\n    }, {\n      name: 'strides',\n      type: 'ivec2'\n    }, {\n      name: 'dilations',\n      type: 'ivec2'\n    }, {\n      name: 'inDims',\n      type: 'ivec2'\n    }];\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    const padLeft = convInfo.padInfo.left;\n    const strideWidth = convInfo.strideWidth;\n    const dilationWidth = convInfo.dilationWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const texelsAcross = filterWidth;\n    let mainLoop = `\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;`;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          vec4 xTexelC${c * 2};\n          int xTexelC${c * 2}Ready;\n          vec4 xTexelC${c * 2 + 1};\n          int xTexelC${c * 2 + 1}Ready;\n          vec4 xC${c};`;\n    }\n    /**\n     * This vectorized implementation works by gathering the values needed for\n     * each output channel's dot product into vec4's and then multiplying them\n     * all together (this happens in the final double for-loop below). Most of\n     * the main loop consists of constructing these vec4's with the minimum\n     * number of texture2D calls, which means making use of all four returned\n     * values from a texture2D call at once.\n     */\n    mainLoop += `\n    for (int r = 0; r < ${filterHeight}; r++) {\n      `;\n    for (let c = 0; c < filterWidth; c++) {\n      mainLoop += `\n          xTexelC${c * 2} = vec4(0.0);\n          xTexelC${c * 2}Ready = 0;\n          xTexelC${c * 2 + 1} = vec4(0.0);\n          xTexelC${c * 2 + 1}Ready = 0;\n          xC${c} = vec4(0.0);`;\n    }\n    mainLoop += `\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;\n    for (let texelC = 0; texelC < (texelsAcross + 1) / 2; texelC++) {\n      const colIndex = texelC * 2;\n      mainLoop += `\n          xC = xCCorner + ${colIndex * dilationWidth};\n          `;\n      if (strideWidth === 1) {\n        if (colIndex < filterWidth) {\n          // If padding is odd, the outer texels have to be composed.\n          if (padLeft % 2 === 1) {\n            // TODO: Ensure vec4 previous does not result in redundant sample,\n            // and avoid setting xTexelRC's that exceed the boundary in the\n            // first place rather than resetting them to vec4(0)).\n            // To compute xCOffset:\n            // - If padding is odd, we must add 1 to ensure we ask for an\n            // even-numbered row.\n            // - We subtract 2 to access the previous texel.\n            mainLoop += `\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n              `;\n            // This texel has been read in previous iteration if the dilation\n            // is 1.\n            if (dilationWidth === 1 && colIndex > 0) {\n              mainLoop += `\n                xC${colIndex} = vec4(xTexelC${colIndex - 2}.zw, xTexelC${colIndex}.xy);\n                `;\n            } else {\n              mainLoop += `\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${colIndex} = vec4(previous.zw, xTexelC${colIndex}.xy);\n                  } else {\n                    xC${colIndex} = vec4(0.0, 0.0, xTexelC${colIndex}.xy);\n                  }\n                  `;\n            }\n          } else {\n            // Padding is even, so xRC corresponds to a single texel.\n            mainLoop += `\n                if (xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xC${colIndex} = xTexelC${colIndex};\n                `;\n          }\n          if (colIndex + 1 < filterWidth) {\n            // If dilation is even, the second entry should match the first\n            // (either both are composed or both are single samples). But if\n            // dilation is odd, then the second entry should be the opposite\n            // of the first (if the first is composed, the second is a single\n            // sample, and vice versa.)\n            const nextTexelOffset = padLeft % 2 === 0 ? util.nearestLargerEven(dilationWidth) : dilationWidth;\n            if (dilationWidth % 2 === 0 && padLeft % 2 === 1 || dilationWidth % 2 !== 0 && padLeft % 2 !== 1) {\n              mainLoop += `\n                  xCOffset = xC + imod(pads[1], 2) + ${nextTexelOffset};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                    xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${colIndex + 1}.zw = vec2(0.0);\n                    }\n                    xTexelC${colIndex + 1}Ready = 1;\n                  }\n                  `;\n              // If dilation > 1 then the xRC's will not be able to share any\n              // values, so each xRC will require two unique calls to getX.\n              if (dilationWidth > 1) {\n                mainLoop += `\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                     previous = getX(batch, xR, xCOffset, d1);\n                     xC${colIndex + 1} = vec4(previous.zw, xTexelC${colIndex + 1}.xy);\n                    } else {\n                     xC${colIndex + 1} = vec4(0.0, 0.0, xTexelC${colIndex + 1}.xy);\n                    }\n                    `;\n              } else {\n                mainLoop += `\n                    xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.xy);\n                    `;\n              }\n            } else {\n              // If dilation is 1 and padding is odd, we have already read the\n              // texel when constructing the previous x value. Here we can\n              // simply skip the texture read.\n              if (nextTexelOffset === 1) {\n                mainLoop += `\n                    xC${colIndex + 1} = xTexelC${colIndex};\n                    `;\n              } else {\n                mainLoop += `\n                    xCOffset = xC + ${nextTexelOffset};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                      xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${colIndex + 1}.zw = vec2(0.0);\n                      }\n                      xTexelC${colIndex + 1}Ready = 1;\n                    }\n\n                    xC${colIndex + 1} = xTexelC${colIndex + 1};\n                    `;\n              }\n            }\n          }\n        }\n      } else {\n        // stride === 2\n        if (colIndex < filterWidth) {\n          // Depending on whether padLeft is even or odd, we want either the\n          // xy or zw channels from X texels for xC${colIndex}. If padLeft is\n          // even, xC${colIndex +1} is simply the zw channels of texels we've\n          // already sampled. But if padLeft is odd, xC{$c + 1}.zw will\n          // need to come from the xy channels of a new texel, hence the `\n          // vec4\n          // final` initialized below.\n          if (padLeft % 2 === 1) {\n            mainLoop += `\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n              `;\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex + 1}.xy, final.xy);\n                `;\n            }\n          } else {\n            mainLoop += `\n                if(xC >= 0 && xC < inDims[1] && xTexelC${colIndex}Ready == 0) {\n                  xTexelC${colIndex} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${colIndex}.zw = vec2(0.0);\n                  }\n                  xTexelC${colIndex}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${colIndex + 1}Ready == 0) {\n                  xTexelC${colIndex + 1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${colIndex + 1}.zw = vec2(0.);\n                  }\n                  xTexelC${colIndex + 1}Ready = 1;\n                }\n\n                xC${colIndex} = vec4(\n                  xTexelC${colIndex}.xy, xTexelC${colIndex + 1}.xy);\n              `;\n            if (colIndex + 1 < filterWidth) {\n              mainLoop += `\n                  xC${colIndex + 1} = vec4(xTexelC${colIndex}.zw, xTexelC${colIndex + 1}.zw);\n                `;\n            }\n          }\n        }\n      }\n      // localize the dotProd accumulation within the loop, the theory is for\n      // GPU with limited cache, accumulate sum across large amount of\n      // veriables will cause lots of cache misses. (i.e. 5x5 filter will have\n      // 50 variables)\n      if (colIndex < filterWidth) {\n        mainLoop += `\n            wTexel = getW(r, ${colIndex}, d1, q);\n            dotProd += xC${colIndex} * vec4(wTexel.xz, wTexel.xz);\n          `;\n        if (colIndex + 1 < filterWidth) {\n          mainLoop += `\n              wTexel = getW(r, ${colIndex + 1}, d1, q);\n              dotProd += xC${colIndex + 1} * vec4(wTexel.xz, wTexel.xz);\n            `;\n        }\n      }\n    }\n    mainLoop += `\n    }\n  `;\n    mainLoop += `\n      }\n    `;\n    let activationSnippet = '',\n      applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `vec4 activation(vec4 x) {\n          ${activation}\n        }`;\n      }\n      applyActivationSnippet = `result = activation(result);`;\n    }\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${mainLoop}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, env, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nexport function depthwiseConv2dNative(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n  let program;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  const customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];\n  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\nexport const depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DepthwiseConv2DDerFilterProgram {\n  constructor(convInfo) {\n    this.variableNames = ['x', 'dy'];\n    this.outputShape = convInfo.filterShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = convInfo.padInfo.top;\n    const padLeft = convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${channelMul} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${convInfo.batchSize}; b++) {\n          for (int yR = 0; yR < ${convInfo.outHeight}; yR++) {\n            int xR = wR + yR * ${strideHeight} - ${padTop};\n\n            if (xR < 0 || xR >= ${convInfo.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${convInfo.outWidth}; yC++) {\n              int xC = wC + yC * ${strideWidth} - ${padLeft};\n\n              if (xC < 0 || xC >= ${convInfo.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\nexport class DepthwiseConv2DDerInputProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy', 'W'];\n    this.outputShape = convInfo.inShape;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const padTop = filterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = filterWidth - 1 - convInfo.padInfo.left;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${filterHeight} - 1 - wR;\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${filterWidth} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${channelMul}; dm++) {\n              int d2 = d1 * ${channelMul} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropFilter } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DDerFilterProgram } from '../conv_backprop_gpu_depthwise';\nexport function depthwiseConv2dNativeBackpropFilter(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    dy\n  } = inputs;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode,\n    filterShape\n  } = attrs;\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n  const program = new DepthwiseConv2DDerFilterProgram(convInfo);\n  return backend.runWebGLProgram(program, [x, dy], 'float32');\n}\nexport const depthwiseConv2dNativeBackpropFilterConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropInput } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DDerInputProgram } from '../conv_backprop_gpu_depthwise';\nexport function depthwiseConv2dNativeBackpropInput(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode,\n    inputShape\n  } = attrs;\n  const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n  const program = new DepthwiseConv2DDerInputProgram(convInfo);\n  return backend.runWebGLProgram(program, [dy, filter], 'float32');\n}\nexport const depthwiseConv2dNativeBackpropInputConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNativeBackpropInput\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class DiagProgram {\n  constructor(size) {\n    this.variableNames = ['X'];\n    this.outputShape = [size, size];\n    this.userCode = `\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Diag, util } from '@tensorflow/tfjs-core';\nimport { DiagProgram } from '../diag_gpu';\nimport { reshape } from './Reshape';\nexport function diag(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n  const flat = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [xSize]\n    }\n  });\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n  const out = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n  return out;\n}\nexport const diagConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class Dilation2DProgram {\n  constructor(convInfo) {\n    this.variableNames = ['x', 'W'];\n    this.outputShape = convInfo.outShape;\n    const {\n      inHeight,\n      inWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth\n    } = convInfo;\n    const {\n      top: padTop,\n      left: padLeft\n    } = padInfo;\n    this.userCode = `\n      const ivec2 strides = ivec2(${strideHeight}, ${strideWidth});\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${filterHeight}; h++) {\n          int hIn = hBeg + h * ${dilationHeight};\n\n          if (hIn >= 0 && hIn < ${inHeight}) {\n            for (int w = 0; w < ${filterWidth}; w++) {\n              int wIn = wBeg + w * ${dilationWidth};\n\n              if (wIn >= 0 && wIn < ${inWidth}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D } from '@tensorflow/tfjs-core';\nimport { Dilation2DProgram } from '../dilation_gpu';\nimport { reshape } from './Reshape';\nexport function dilation2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  const convInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n  let out;\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(out);\n  return outReshaped;\n}\nexport const dilation2DConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Einsum, util } from '@tensorflow/tfjs-core';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\nexport function einsum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    equation\n  } = attrs;\n  const tensors = inputs;\n  const {\n    allDims,\n    summedDims,\n    idDims\n  } = backend_util.decodeEinsumEquation(equation, tensors.length);\n  backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n  const {\n    path,\n    steps\n  } = backend_util.getEinsumComputePath(summedDims, idDims);\n  const nSteps = steps.length;\n  let out = null;\n  let numDimsRemaining = allDims.length;\n  const tensorsToDispose = [];\n  for (let i = 0; i < nSteps; ++i) {\n    for (const idTerm of steps[i]) {\n      const {\n        permutationIndices: perm,\n        expandDims: dimsToExpand\n      } = backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n      let x;\n      if (backend_util.isIdentityPermutation(perm)) {\n        x = tensors[idTerm];\n      } else {\n        x = transpose({\n          inputs: {\n            x: tensors[idTerm]\n          },\n          backend,\n          attrs: {\n            perm\n          }\n        });\n        tensorsToDispose.push(x);\n      }\n      const targetShape = x.shape.slice();\n      for (let k = 0; k < dimsToExpand.length; ++k) {\n        targetShape.splice(dimsToExpand[k], 0, 1);\n      }\n      if (!util.arraysEqual(x.shape, targetShape)) {\n        x = reshape({\n          inputs: {\n            x\n          },\n          backend,\n          attrs: {\n            shape: targetShape\n          }\n        });\n        tensorsToDispose.push(x);\n      }\n      if (out === null) {\n        out = x;\n      } else {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        out = multiply({\n          inputs: {\n            a: x,\n            b: out\n          },\n          backend\n        });\n        tensorsToDispose.push(out);\n      }\n    }\n    if (i < nSteps - 1) {\n      if (path[i] >= 0) {\n        out = sum({\n          inputs: {\n            x: out\n          },\n          backend,\n          attrs: {\n            axis: path[i] - (allDims.length - numDimsRemaining),\n            keepDims: false\n          }\n        });\n        tensorsToDispose.push(out);\n      }\n      numDimsRemaining--;\n    }\n  }\n  // Clean up intermediate tensors.\n  for (const tensorInfo of tensorsToDispose) {\n    if (tensorInfo === out) {\n      continue;\n    }\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n  return out;\n}\nexport const einsumConfig = {\n  kernelName: Einsum,\n  backendName: 'webgl',\n  kernelFunc: einsum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Elu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nconst ELU_PACKED = `\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n`;\nconst elu = unaryKernelFunc({\n  opSnippet: ELU,\n  packedOpSnippet: ELU_PACKED\n});\nexport const eluConfig = {\n  kernelName: Elu,\n  backendName: 'webgl',\n  kernelFunc: elu\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { EluGrad, env } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nconst ELU_DER = `return (b >= 0.0) ? a : a * (b + 1.0);`;\nconst ELU_DER_PACKED = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\nexport const eluGrad = args => {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    dy,\n    y\n  } = inputs;\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(ELU_DER_PACKED, dy.shape, y.shape) : new BinaryOpProgram(ELU_DER, dy.shape, y.shape);\n  return backend.runWebGLProgram(program, [dy, y], dy.dtype);\n};\nexport const eluGradConfig = {\n  kernelName: EluGrad,\n  backendName: 'webgl',\n  kernelFunc: eluGrad\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Equal } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { equalImplCPU } from '../kernel_utils/shared';\nconst PACKED_EQUAL = `\n  return vec4(equal(a, b));\n`;\nconst EQUAL = `return float(a == b);`;\nexport const equal = binaryKernelFunc({\n  opSnippet: EQUAL,\n  packedOpSnippet: PACKED_EQUAL,\n  dtype: 'bool',\n  cpuKernelImpl: equalImplCPU\n});\nexport const equalConfig = {\n  kernelName: Equal,\n  backendName: 'webgl',\n  kernelFunc: equal\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Erf } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst ERF = `\n  // Error function is calculated approximately with elementary function.\n  // See \"Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables\", Abramowitz and Stegun.\n  float p = ${backend_util.ERF_P};\n  float a1 = ${backend_util.ERF_A1};\n  float a2 = ${backend_util.ERF_A2};\n  float a3 = ${backend_util.ERF_A3};\n  float a4 = ${backend_util.ERF_A4};\n  float a5 = ${backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`;\nexport const erf = unaryKernelFunc({\n  opSnippet: ERF\n});\nexport const erfConfig = {\n  kernelName: Erf,\n  backendName: 'webgl',\n  kernelFunc: erf\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { expImplCPU } from '../kernel_utils/shared';\nexport const EXP = CHECK_NAN_SNIPPET_UNARY + `\n  return exp(x);\n`;\nconst EXP_PACKED = `\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const exp = unaryKernelFunc({\n  opSnippet: EXP,\n  packedOpSnippet: EXP_PACKED,\n  cpuKernelImpl: expImplCPU,\n  dtype: 'float32'\n});\nexport const expConfig = {\n  kernelName: Exp,\n  backendName: 'webgl',\n  kernelFunc: exp\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ExpandDims, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nexport function expandDims(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    dim\n  } = attrs;\n  const {\n    input\n  } = inputs;\n  const inputRank = input.shape.length;\n  const newShape = input.shape.slice();\n  let $dim = dim;\n  if (dim < 0) {\n    // Negative value is counted from the tail of rank.\n    util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n    $dim = inputRank + dim + 1;\n  }\n  newShape.splice($dim, 0, 1);\n  return reshape({\n    inputs: {\n      x: input\n    },\n    backend,\n    attrs: {\n      shape: newShape\n    }\n  });\n}\nexport const expandDimsConfig = {\n  kernelName: ExpandDims,\n  backendName: 'webgl',\n  kernelFunc: expandDims\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { expm1ImplCPU } from '../kernel_utils/shared';\nconst EXPM1 = `return exp(x) - 1.0;`;\nexport const expm1 = unaryKernelFunc({\n  opSnippet: EXPM1,\n  packedOpSnippet: EXPM1,\n  cpuKernelImpl: expm1ImplCPU\n});\nexport const expm1Config = {\n  kernelName: Expm1,\n  backendName: 'webgl',\n  kernelFunc: expm1\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FFTProgram {\n  constructor(component, inputShape, inverse) {\n    this.variableNames = ['real', 'imag'];\n    const innerDim = inputShape[1];\n    this.outputShape = inputShape;\n    const exponentMultiplierSnippet = inverse ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`;\n    const resultDenominator = inverse ? `${innerDim}.0` : '1.0';\n    let opString;\n    if (component === 'real') {\n      opString = 'return real * expR - imag * expI;';\n    } else if (component === 'imag') {\n      opString = 'return real * expI + imag * expR;';\n    } else {\n      throw new Error(`FFT component must be either \"real\" or \"imag\", got ${component}.`);\n    }\n    this.userCode = `\n      const float exponentMultiplier = ${exponentMultiplierSnippet};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${opString}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${innerDim});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${innerDim}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${resultDenominator};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FFTProgram } from '../fft_gpu';\nimport { complex } from './Complex';\nimport { reshape } from './Reshape';\nexport function fftImpl(x, inverse, backend) {\n  const xData = backend.texData.get(x.dataId);\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n  const input2D = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [batch, innerDimensionSize]\n    }\n  });\n  const xShape = input2D.shape;\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n  const inputs = [{\n    dataId: xData.complexTensorInfos.real.dataId,\n    dtype: xData.complexTensorInfos.real.dtype,\n    shape: xShape\n  }, {\n    dataId: xData.complexTensorInfos.imag.dataId,\n    dtype: xData.complexTensorInfos.imag.dtype,\n    shape: xShape\n  }];\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n  const complexOutput = complex({\n    inputs: {\n      real: realPart,\n      imag: imagPart\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n  const complexOutputReshaped = reshape({\n    inputs: {\n      x: complexOutput\n    },\n    backend,\n    attrs: {\n      shape: x.shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FFT } from '@tensorflow/tfjs-core';\nimport { fftImpl } from './FFT_impl';\nexport function fft(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  return fftImpl(input, false /* inverse */, backend);\n}\nexport const fftConfig = {\n  kernelName: FFT,\n  backendName: 'webgl',\n  kernelFunc: fft\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FillProgram {\n  constructor(shape, value) {\n    this.outputShape = [];\n    this.customUniforms = [{\n      name: 'value',\n      type: 'float'\n    }];\n    this.variableNames = ['x'];\n    this.outputShape = shape;\n    this.userCode = `\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Fill, util } from '@tensorflow/tfjs-core';\nimport { FillProgram } from '../fill_gpu';\nexport function fill(args) {\n  const {\n    backend,\n    attrs\n  } = args;\n  const {\n    shape,\n    value\n  } = attrs;\n  let {\n    dtype\n  } = attrs;\n  dtype = dtype || util.inferDtype(value);\n  if (dtype === 'string') {\n    // String type should be handled in CPU memory.\n    const values = util.getArrayFromDType(dtype, util.sizeFromShape(shape));\n    values.fill(value);\n    return backend.makeTensorInfo(shape, dtype, values);\n  } else {\n    const program = new FillProgram(shape, value);\n    const customValues = [[value]];\n    return backend.runWebGLProgram(program, [], dtype, customValues);\n  }\n}\nexport const fillConfig = {\n  kernelName: Fill,\n  backendName: 'webgl',\n  kernelFunc: fill\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class FlipLeftRightProgram {\n  constructor(imageShape) {\n    this.variableNames = ['Image'];\n    this.outputShape = [];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${imageWidth} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${imageWidth}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight } from '@tensorflow/tfjs-core';\nimport { FlipLeftRightProgram } from '../flip_left_right_gpu';\nexport const flipLeftRightConfig = {\n  kernelName: FlipLeftRight,\n  backendName: 'webgl',\n  kernelFunc: ({\n    inputs,\n    backend\n  }) => {\n    const {\n      image\n    } = inputs;\n    const webglBackend = backend;\n    const program = new FlipLeftRightProgram(image.shape);\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype);\n    return output;\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { floorImplCPU } from '../kernel_utils/shared';\nconst FLOOR = `return floor(x);`;\nexport const floor = unaryKernelFunc({\n  opSnippet: FLOOR,\n  packedOpSnippet: FLOOR,\n  cpuKernelImpl: floorImplCPU\n});\nexport const floorConfig = {\n  kernelName: Floor,\n  backendName: 'webgl',\n  kernelFunc: floor\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FloorDiv } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\n// We use native integer division to deal with floating point imprecision. Since\n// we implement floor division and glsl implements truncated division, we\n// correct for this by subtracting 1 from result when the result is negative and\n// there is a remainder.\nconst INT_DIV = `\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n`;\nconst INT_DIV_PACKED = `\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n`;\nexport const floorDiv = binaryKernelFunc({\n  opSnippet: INT_DIV,\n  packedOpSnippet: INT_DIV_PACKED,\n  dtype: 'int32'\n});\nexport const floorDivConfig = {\n  kernelName: FloorDiv,\n  backendName: 'webgl',\n  kernelFunc: floorDiv\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from '../../glsl_version';\nexport class FromPixelsProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    const glsl = getGlslDifferences();\n    const [height, width] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${width}.0, ${height}.0);\n\n        vec4 values = ${glsl.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from '../../glsl_version';\nexport class FromPixelsPackedProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = false;\n    this.packedOutput = true;\n    const glsl = getGlslDifferences();\n    const [height, width] = outputShape;\n    this.outputShape = outputShape;\n    this.userCode = `\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${width}.0, ${height}.0);\n            vec4 values = ${glsl.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels } from '@tensorflow/tfjs-core';\nimport { TextureUsage } from '../tex_util';\nimport { FromPixelsProgram } from './FromPixels_utils/from_pixels_gpu';\nimport { FromPixelsPackedProgram } from './FromPixels_utils/from_pixels_packed_gpu';\nexport const fromPixelsConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels\n};\nlet fromPixels2DContext;\nlet willReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\nfunction fromPixels(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  let {\n    pixels\n  } = inputs;\n  const {\n    numChannels\n  } = attrs;\n  const isVideo = typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement;\n  const isImage = typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];\n  const texShape = [height, width];\n  const outShape = [height, width, numChannels];\n  if (isImage || isVideo) {\n    const newWillReadFrequently = env().getBool('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU');\n    if (fromPixels2DContext == null || newWillReadFrequently !== willReadFrequently) {\n      willReadFrequently = newWillReadFrequently;\n      fromPixels2DContext = document.createElement('canvas').getContext('2d', {\n        willReadFrequently\n      });\n    }\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n  const program = env().getBool('WEBGL_PACK') ? new FromPixelsPackedProgram(outShape) : new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedConv2D, util } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { Conv2DPackedProgram } from '../conv_packed_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function fusedConv2d(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out;\n  const intermediates = [];\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  const prepareInputs = () => {\n    const inputs = [x, filter];\n    // If the input is a 1-D tensor, align it with the channels.\n    //\n    // For fusedConv2d, the inputs (x, W, bias, preluActivationWeights) are\n    // supposed to be aligned with the dataFormat. The 4-D tensor inputs or\n    // scalar inputs are originally aligned, but the 1-D tensor inputs are\n    // supposed to be aligned with the channels (only bias and PReLU activation\n    // weights could be a 1-D tensor).\n    const alignInputWithDataFormat = (input, dataFormat) => {\n      if (dataFormat === 'NCHW' && input.shape.length === 1 && input.shape[0] !== 1) {\n        const alignedInput = reshape({\n          inputs: {\n            x: input\n          },\n          backend,\n          attrs: {\n            shape: [input.shape[0], 1, 1]\n          }\n        });\n        intermediates.push(alignedInput);\n        return alignedInput;\n      }\n      return input;\n    };\n    if (hasBias) {\n      inputs.push(alignInputWithDataFormat(bias, dataFormat));\n    }\n    if (hasPreluActivationWeights) {\n      inputs.push(alignInputWithDataFormat(preluActivationWeights, dataFormat));\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    return inputs;\n  };\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (convInfo.strideWidth <= 2 && $dataFormat === 'channelsLast' && env().getBool('WEBGL_EXP_CONV')) {\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, true) : null;\n    const program = new Conv2DPackedProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32', customValues);\n  } else if (env().getBool('WEBGL_CONV_IM2COL')) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const inputs = prepareInputs();\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return outReshaped;\n}\nexport const fusedConv2DConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedDepthwiseConv2D, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nexport function fusedDepthwiseConv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const intermediates = [];\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ? mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) : null;\n  const programInputs = [x, filter];\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n  let program;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  }\n  const customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];\n  const result = backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D\n};\n", "import { getCoordsDataType } from './shader_compiler';\nexport class GatherNDProgram {\n  constructor(sliceDim, strides, shape, paramsShape) {\n    this.sliceDim = sliceDim;\n    this.strides = strides;\n    this.paramsShape = paramsShape;\n    this.variableNames = ['x', 'indices'];\n    this.outputShape = shape;\n    const dtype = getCoordsDataType(shape.length);\n    let mainLoop = `\n    int index;`;\n    for (let j = 0; j < this.sliceDim; j++) {\n      mainLoop += `\n          index = round(getIndices(coords[0], ${j}));\n          out_of_bounds = out_of_bounds || index < 0;\n          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[j]};\n          flattenIndex += index * ${this.strides[j]};`;\n    }\n    this.userCode = `\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n\n          ${mainLoop}\n\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { GatherNDProgram } from '../gather_nd_gpu';\nimport { gatherNdImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherNd(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    params,\n    indices\n  } = inputs;\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n  const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numSlices, sliceRank]\n    }\n  });\n  const flattenX = reshape({\n    inputs: {\n      x: params\n    },\n    backend,\n    attrs: {\n      shape: [util.sizeFromShape(params.shape) / sliceSize, sliceSize]\n    }\n  });\n  if (backend.shouldExecuteOnCPU([params, indices]) || params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId);\n    const paramsBuf = backend.bufferSync(params);\n    const outValue = gatherNdImplCPU(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize], params.shape);\n  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: resultShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nexport const gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class GatherProgram {\n  constructor(aShape, outputShape) {\n    this.variableNames = ['A', 'indices'];\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape, axis) {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('index');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util, env } from '@tensorflow/tfjs-core';\nimport { GatherProgram } from '../gather_gpu';\nimport { gatherV2ImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    indices\n  } = inputs;\n  const {\n    axis,\n    batchDims\n  } = attrs;\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  if (env().get('DEBUG')) {\n    // In debug mode, throw error when any index is out of bound.\n    // Otherwise, just fill out of bounds with zeroes.\n    const indicesVals = backend.readSync(indices.dataId);\n    const axisDim = x.shape[parsedAxis];\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const toDispose = [];\n  const flattenX = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]\n    }\n  });\n  const flattenIndex = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]\n    }\n  });\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n  const flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: shapeInfo.outputShape\n    }\n  });\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\nexport const gatherV2Config = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Greater } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { greaterImplCPU } from '../kernel_utils/shared';\nconst GREATER = `return float(a > b);`;\nconst GREATER_PACKED = `\n  return vec4(greaterThan(a, b));\n`;\nexport const greater = binaryKernelFunc({\n  opSnippet: GREATER,\n  packedOpSnippet: GREATER_PACKED,\n  cpuKernelImpl: greaterImplCPU,\n  dtype: 'bool'\n});\nexport const greaterConfig = {\n  kernelName: Greater,\n  backendName: 'webgl',\n  kernelFunc: greater\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GreaterEqual } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { greaterEqualImplCPU } from '../kernel_utils/shared';\nconst GREATER_EQUAL = `return float(a >= b);`;\nconst GREATER_EQUAL_PACKED = `\n  return vec4(greaterThanEqual(a, b));\n`;\nexport const greaterEqual = binaryKernelFunc({\n  opSnippet: GREATER_EQUAL,\n  packedOpSnippet: GREATER_EQUAL_PACKED,\n  dtype: 'bool',\n  cpuKernelImpl: greaterEqualImplCPU\n});\nexport const greaterEqualConfig = {\n  kernelName: GreaterEqual,\n  backendName: 'webgl',\n  kernelFunc: greaterEqual\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IFFT } from '@tensorflow/tfjs-core';\nimport { fftImpl } from './FFT_impl';\nexport function ifft(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  return fftImpl(input, true /* inverse */, backend);\n}\nexport const ifftConfig = {\n  kernelName: IFFT,\n  backendName: 'webgl',\n  kernelFunc: ifft\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsFinite } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst IS_FINITE = `return float(!isnan(x) && !isinf(x));`;\nexport const isFinite = unaryKernelFunc({\n  opSnippet: IS_FINITE,\n  dtype: 'bool'\n});\nexport const isFiniteConfig = {\n  kernelName: IsFinite,\n  backendName: 'webgl',\n  kernelFunc: isFinite\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsInf } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst IS_INF = `return float(isinf(x));`;\nexport const isInf = unaryKernelFunc({\n  opSnippet: IS_INF,\n  dtype: 'bool'\n});\nexport const isInfConfig = {\n  kernelName: IsInf,\n  backendName: 'webgl',\n  kernelFunc: isInf\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsNan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst IS_NAN = `return float(isnan(x));`;\nexport const isNaN = unaryKernelFunc({\n  opSnippet: IS_NAN,\n  dtype: 'bool'\n});\nexport const isNaNConfig = {\n  kernelName: IsNan,\n  backendName: 'webgl',\n  kernelFunc: isNaN\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Less } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { lessImplCPU } from '../kernel_utils/shared';\nconst LESS = `return float(a < b);`;\nconst LESS_PACKED = `\n  return vec4(lessThan(a, b));\n`;\nexport const less = binaryKernelFunc({\n  opSnippet: LESS,\n  packedOpSnippet: LESS_PACKED,\n  cpuKernelImpl: lessImplCPU,\n  dtype: 'bool'\n});\nexport const lessConfig = {\n  kernelName: Less,\n  backendName: 'webgl',\n  kernelFunc: less\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LessEqual } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { lessEqualImplCPU } from '../kernel_utils/shared';\nexport const LESS_EQUAL = `return float(a <= b);`;\nexport const LESS_EQUAL_PACKED = `\n  return vec4(lessThanEqual(a, b));\n`;\nexport const lessEqual = binaryKernelFunc({\n  opSnippet: LESS_EQUAL,\n  packedOpSnippet: LESS_EQUAL_PACKED,\n  cpuKernelImpl: lessEqualImplCPU,\n  dtype: 'bool'\n});\nexport const lessEqualConfig = {\n  kernelName: LessEqual,\n  backendName: 'webgl',\n  kernelFunc: lessEqual\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LinSpace } from '@tensorflow/tfjs-core';\nimport { linSpaceImplCPU } from '../kernel_utils/shared';\nexport function linSpace(args) {\n  const {\n    backend,\n    attrs\n  } = args;\n  const {\n    start,\n    stop,\n    num\n  } = attrs;\n  // TODO: Use CPU implementation due to the precision problem in Safari.\n  const outVals = linSpaceImplCPU(start, stop, num);\n  return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\nexport const linSpaceConfig = {\n  kernelName: LinSpace,\n  backendName: 'webgl',\n  kernelFunc: linSpace\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { logImplCPU } from '../kernel_utils/shared';\n// Windows chrome return 0 if the input is negative value. We will specifically\n// return NaN if the input is 0 to solve compatiblity issue.\nconst LOG = CHECK_NAN_SNIPPET_UNARY + `\n  return x < 0.0 ? 0./0. : log(x);\n`;\nconst LOG_PACKED = `\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n`;\nexport const log = unaryKernelFunc({\n  opSnippet: LOG,\n  packedOpSnippet: LOG_PACKED,\n  cpuKernelImpl: logImplCPU\n});\nexport const logConfig = {\n  kernelName: Log,\n  backendName: 'webgl',\n  kernelFunc: log\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log1p } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst LOG1P = CHECK_NAN_SNIPPET_UNARY + `\n  return log(1.0 + x);\n`;\nexport const log1p = unaryKernelFunc({\n  opSnippet: LOG1P\n});\nexport const log1pConfig = {\n  kernelName: Log1p,\n  backendName: 'webgl',\n  kernelFunc: log1p\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalAnd } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst LOGICAL_AND = `return float(a >= 1.0 && b >= 1.0);`;\nconst LOGICAL_AND_PACKED = `\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n`;\nexport const logicalAnd = binaryKernelFunc({\n  opSnippet: LOGICAL_AND,\n  packedOpSnippet: LOGICAL_AND_PACKED,\n  dtype: 'bool'\n});\nexport const logicalAndConfig = {\n  kernelName: LogicalAnd,\n  backendName: 'webgl',\n  kernelFunc: logicalAnd\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalNot } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst LOGICAL_NOT = `return float(!(x >= 1.0));`;\nexport const logicalNot = unaryKernelFunc({\n  opSnippet: LOGICAL_NOT\n});\nexport const logicalNotConfig = {\n  kernelName: LogicalNot,\n  backendName: 'webgl',\n  kernelFunc: logicalNot\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalOr } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst LOGICAL_OR = `return float(a >= 1.0 || b >= 1.0);`;\nconst LOGICAL_OR_PACKED = `\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n`;\nexport const logicalOr = binaryKernelFunc({\n  opSnippet: LOGICAL_OR,\n  packedOpSnippet: LOGICAL_OR_PACKED,\n  dtype: 'bool'\n});\nexport const logicalOrConfig = {\n  kernelName: LogicalOr,\n  backendName: 'webgl',\n  kernelFunc: logicalOr\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNProgram {\n  constructor(xShape, radius, bias, alpha, beta) {\n    this.variableNames = ['x'];\n    this.outputShape = [];\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${rad}; j <= ${rad}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${maxD}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${powOperator};\n        setOutput(val);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNPackedProgram {\n  constructor(xShape, radius, bias, alpha, beta) {\n    this.variableNames = ['x'];\n    this.outputShape = [];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    const rad = radius;\n    const maxD = xShape[3] - 1;\n    this.outputShape = xShape;\n    // optimize pow(bias + alpha * sum, -beta)\n    // src: https://github.com/tensorflow/tensorflow/..\n    // blob/26033a1644a9c4a5fbe3170ab2e864b6a4ccd4ca/..\n    // tensorflow/core/kernels/mkl_lrn_op.cc#L320\n    let powOperator;\n    const basis = `float(${bias}) + float(${alpha}) * sum`;\n    if (beta === 0.5) {\n      powOperator = `inversesqrt(${basis})`;\n    } else if (beta === 1.0) {\n      powOperator = `1.0/(${basis})`;\n    } else {\n      powOperator = `exp(log(${basis}) * float(-${beta}));`;\n    }\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${rad};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${rad}; j <= ${rad}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${maxD}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${powOperator};\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, LRN } from '@tensorflow/tfjs-core';\nimport { LRNProgram } from '../lrn_gpu';\nimport { LRNPackedProgram } from '../lrn_packed_gpu';\nexport const lrn = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    depthRadius,\n    bias,\n    alpha,\n    beta\n  } = attrs;\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ? new LRNPackedProgram(x.shape, depthRadius, bias, alpha, beta) : new LRNProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n};\n// tslint:disable-next-line: variable-name\nexport const LRNConfig = {\n  kernelName: LRN,\n  backendName: 'webgl',\n  kernelFunc: lrn\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class LRNGradProgram {\n  constructor(inputShape, depthRadius, bias, alpha, beta) {\n    this.variableNames = ['inputImage', 'outputImage', 'dy'];\n    this.outputShape = [];\n    this.outputShape = inputShape;\n    this.depth = inputShape[3];\n    this.depthRadius = depthRadius;\n    this.bias = bias;\n    this.alpha = alpha;\n    this.beta = beta;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${depthRadius})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${depthRadius} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${alpha}) * norm + float(${bias});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${alpha})\n                * float(${beta})\n                * getInputImage(b, r, c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${beta});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRNGrad } from '@tensorflow/tfjs-core';\nimport { LRNGradProgram } from '../lrn_grad_gpu';\nexport const lrnGrad = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    y,\n    dy\n  } = inputs;\n  const {\n    depthRadius,\n    bias,\n    alpha,\n    beta\n  } = attrs;\n  const program = new LRNGradProgram(x.shape, depthRadius, bias, alpha, beta);\n  return backend.runWebGLProgram(program, [x, y, dy], x.dtype);\n};\n// tslint:disable-next-line: variable-name\nexport const LRNGradConfig = {\n  kernelName: LRNGrad,\n  backendName: 'webgl',\n  kernelFunc: lrnGrad\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from '../kernels/Reshape';\nexport function maxImpl(x, reduceShape, outShape, backend) {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape({\n    inputs: {\n      x\n    },\n    attrs: {\n      shape: [batchSize, inSize]\n    },\n    backend\n  });\n  const reduced = reduce(reshapedInput, x.dtype, 'max', backend);\n  const reshapedOutput = reshape({\n    inputs: {\n      x: reduced\n    },\n    attrs: {\n      shape: outShape\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  return reshapedOutput;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxImplCPU } from '../kernel_utils/shared';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport function max(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    reductionIndices,\n    keepDims\n  } = attrs;\n  const xRank = x.shape.length;\n  const origAxes = util.parseAxisParam(reductionIndices, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  const maxInputIsTransposed = permutedAxes != null;\n  const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n  let maxInput = x;\n  if (maxInputIsTransposed) {\n    if (shouldExecuteOnCPU) {\n      const xTexData = backend.texData.get(maxInput.dataId);\n      const values = xTexData.values;\n      const newShape = new Array(xRank);\n      for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[permutedAxes[i]];\n      }\n      const maxInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n      maxInput = backend.makeTensorInfo(newShape, x.dtype);\n      const maxInputData = backend.texData.get(maxInput.dataId);\n      maxInputData.values = maxInputValues;\n    } else {\n      maxInput = transposeImpl(x, permutedAxes, backend);\n    }\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n  backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n  const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(maxInput.shape, axes);\n  let outShape = maxOutShape;\n  if (keepDims) {\n    // rather than reshape at the end, set the target shape here.\n    outShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n  }\n  let out;\n  if (shouldExecuteOnCPU) {\n    const xTexData = backend.texData.get(maxInput.dataId);\n    const values = xTexData.values;\n    const outValues = maxImplCPU(values, util.sizeFromShape(reduceShape), outShape, x.dtype);\n    out = backend.makeTensorInfo(outShape, x.dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = maxImpl(maxInput, reduceShape, outShape, backend);\n  }\n  if (maxInputIsTransposed) {\n    backend.disposeIntermediateTensorInfo(maxInput);\n  }\n  return out;\n}\nexport const maxConfig = {\n  kernelName: Max,\n  backendName: 'webgl',\n  kernelFunc: max\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET } from '../binaryop_gpu';\nimport { CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { maximumImplCPU } from '../kernel_utils/shared';\nconst MAXIMUM = CHECK_NAN_SNIPPET + `\n  return max(a, b);\n`;\nconst MAXIMUM_PACKED = `\n  vec4 result = vec4(max(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` + CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\nexport const maximum = binaryKernelFunc({\n  opSnippet: MAXIMUM,\n  packedOpSnippet: MAXIMUM_PACKED,\n  cpuKernelImpl: maximumImplCPU\n});\nexport const maximumConfig = {\n  kernelName: Maximum,\n  backendName: 'webgl',\n  kernelFunc: maximum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nimport { identity } from './Identity';\nexport function maxPool(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = 1;\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n  const maxPoolProgram = new Pool2DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nexport const maxPoolConfig = {\n  kernelName: MaxPool,\n  backendName: 'webgl',\n  kernelFunc: maxPool\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3D } from '@tensorflow/tfjs-core';\nimport { Pool3DProgram } from '../pool_gpu';\nexport function maxPool3d(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode\n  } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode, dataFormat);\n  const maxPoolProgram = new Pool3DProgram(convInfo, 'max', false);\n  return backend.runWebGLProgram(maxPoolProgram, [x], x.dtype);\n}\nexport const maxPool3DConfig = {\n  kernelName: MaxPool3D,\n  backendName: 'webgl',\n  kernelFunc: maxPool3d\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MaxPool2DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy', 'maxPos'];\n    this.outputShape = convInfo.inShape;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const lastIndex = effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec2 pads = ivec2(${padTop}, ${padLeft});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${effectiveFilterHeight};\n          wR += ${dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${effectiveFilterWidth}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${lastIndex} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${effectiveFilterWidth} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\nexport class MaxPool3DBackpropProgram {\n  constructor(convInfo) {\n    this.variableNames = ['dy', 'maxPos'];\n    this.outputShape = convInfo.inShape;\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const lastIndex = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1;\n    this.userCode = `\n      const ivec3 pads = ivec3(${padFront}, ${padTop}, ${padLeft});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${effectiveFilterDepth};\n           wD += ${dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${convInfo.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${effectiveFilterHeight};\n              wR += ${dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${convInfo.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${effectiveFilterWidth};\n                wC += ${dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${convInfo.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${lastIndex} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${effectiveFilterHeight} * ${effectiveFilterWidth} +\n                  wR * ${effectiveFilterWidth} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool3DBackpropProgram } from '../max_pool_backprop_gpu';\nimport { Pool3DProgram } from '../pool_gpu';\nexport function maxPool3DGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const x = input;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = [1, 1, 1];\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  const maxPool3dPositionsProgram = new Pool3DProgram(convInfo, 'max', true /* get positions */);\n  const maxPool3dPositions = backend.runWebGLProgram(maxPool3dPositionsProgram, [x], x.dtype);\n  const maxPoolBackpropProgram = new MaxPool3DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(maxPoolBackpropProgram, [dy, maxPool3dPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPool3dPositions);\n  return result;\n}\nexport const maxPool3DGradConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPool3DGrad\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool2DBackpropProgram } from '../max_pool_backprop_gpu';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nexport function maxPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input,\n    output\n  } = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions = backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\nexport const maxPoolGradConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pool2DProgram } from '../pool_gpu';\nexport function maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, backend) {\n  let program = new Pool2DProgram(convInfo, 'max', false);\n  const poolOutput = backend.runWebGLProgram(program, [x], 'float32');\n  program = new Pool2DProgram(convInfo, 'max', true, true, includeBatchInIndex);\n  const indexOutput = backend.runWebGLProgram(program, [x], 'float32');\n  return [poolOutput, indexOutput];\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'webgl',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const {\n      filterSize,\n      strides,\n      pad,\n      includeBatchInIndex\n    } = attrs;\n    const webglBackend = backend;\n    util.assert(x.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${x.shape.length}.`);\n    const dilations = [1, 1];\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad);\n    const [result, indexes] = maxPoolWithArgmaxImpl(x, includeBatchInIndex, convInfo, webglBackend);\n    return [result, indexes];\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from '../kernels/Reshape';\nexport function meanImpl(x, reduceShape, outShape, backend) {\n  const inSize = util.sizeFromShape(reduceShape);\n  const xSize = util.sizeFromShape(x.shape);\n  const batchSize = xSize / inSize;\n  const reshapedInput = reshape({\n    inputs: {\n      x\n    },\n    attrs: {\n      shape: [batchSize, inSize]\n    },\n    backend\n  });\n  const reduced = reduce(reshapedInput, 'float32', 'mean', backend);\n  const reshapedOutput = reshape({\n    inputs: {\n      x: reduced\n    },\n    attrs: {\n      shape: outShape\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(reshapedInput);\n  backend.disposeIntermediateTensorInfo(reduced);\n  return reshapedOutput;\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { meanImpl } from './Mean_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport const meanConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    const {\n      keepDims,\n      axis\n    } = attrs;\n    const webglBackend = backend;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n    const intermediates = [];\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values;\n        const newShape = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n    return out;\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Min, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function min(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const xRank = x.shape.length;\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n  backend_util.assertAxesAreInnerMostDims('min', axes, xRank);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D = reshape({\n    inputs: {\n      x: permutedX\n    },\n    backend,\n    attrs: {\n      shape: [-1, inSize]\n    }\n  });\n  const reduced = reduce(a2D, a2D.dtype, 'min', backend);\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n  } else {\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n  }\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n  return res;\n}\nexport const minConfig = {\n  kernelName: Min,\n  backendName: 'webgl',\n  kernelFunc: min\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET } from '../binaryop_gpu';\nimport { CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { minimumImplCPU } from '../kernel_utils/shared';\nconst MINIMUM = CHECK_NAN_SNIPPET + `\n  return min(a, b);\n`;\nconst MINIMUM_PACKED = `\n  vec4 result = vec4(min(a, b));\n  bvec4 isNaNA = isnan(a);\n  bvec4 isNaNB = isnan(b);\n  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);\n  ` + CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\nexport const minimum = binaryKernelFunc({\n  opSnippet: MINIMUM,\n  packedOpSnippet: MINIMUM_PACKED,\n  cpuKernelImpl: minimumImplCPU\n});\nexport const minimumConfig = {\n  kernelName: Minimum,\n  backendName: 'webgl',\n  kernelFunc: minimum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class MirrorPadProgram {\n  constructor(xShape, paddings, mode) {\n    this.variableNames = ['x'];\n    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\n/**\n * Example shader code for\n * `mirrorPad(tf.tensor1d([1, 2, 3], 'int32'), [[2, 2]], 'reflect')`\n * ```\n *    const int start = int(2);\n *    const int end = int(5);\n *\n *    void main() {\n *       int outputLoc = getOutputCoords();\n *       vec4 result = vec4(0.);\n *\n *       int rc = outputLoc;\n *\n *       int source = rc;\n *       if (source < start) {\n *         source = start * 2 - source - 0;\n *       } else if (source >= end) {\n *         source = (end - 1) * 2 - source + 0;\n *       }\n *       source -= start;\n *\n *       result[0] = getChannel(getX(source), source);\n *       rc += 1;\n *       if(rc < 6) {\n *          int source = rc;\n *          if (source < start) {\n *            source = start * 2 - source - 0;\n *          } else if (source >= end) {\n *            source = (end - 1) * 2 - source + 0;\n *          }\n *          source -= start;\n *\n *         result[1] = getChannel(getX(source), source);\n *       }\n *\n *       setOutput(result);\n *     }\n * ```\n */\nexport class MirrorPadPackedProgram {\n  constructor(xShape, paddings, mode) {\n    this.variableNames = ['x'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const offset = mode === 'reflect' ? 0 : 1;\n    let mainLoop = '';\n    if (rank === 1) {\n      const padSetup = `\n        ${dtype} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${offset};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${offset};\n        }\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    } else {\n      const padSetup = `\n        ${dtype} source = rc;\n        ${dtype} lt = ${dtype}(lessThan(source, start));\n        ${dtype} gte = ${dtype}(greaterThanEqual(source, end));\n        ${dtype} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${offset}) +\n                gte * ((end - 1) * 2 - source + ${offset});\n        source -= start;\n      `;\n      mainLoop = `\n        ${dtype} rc = outputLoc;\n        ${padSetup}\n        result[0] = getChannel(getX(${source.join()}), ${innerDims});\n        ${coords[rank - 1]} += 1;\n        if(${cLimit}) {\n          ${padSetup}\n          result[1] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n        rc = outputLoc;\n        ${coords[rank - 2]} += 1;\n        if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {\n          ${padSetup}\n          result[2] = getChannel(getX(${source.join()}), ${innerDims});\n          ${coords[rank - 1]} += 1;\n          if(${cLimit}) {\n            ${padSetup}\n            result[3] = getChannel(getX(${source.join()}), ${innerDims});\n          }\n        }\n      `;\n    }\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, MirrorPad } from '@tensorflow/tfjs-core';\nimport { MirrorPadProgram } from '../mirror_pad_gpu';\nimport { MirrorPadPackedProgram } from '../mirror_pad_packed_gpu';\nexport const mirrorPadKernelFunc = ({\n  inputs,\n  backend,\n  attrs\n}) => {\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    mode\n  } = attrs;\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new MirrorPadPackedProgram(x.shape, paddings, mode) : new MirrorPadProgram(x.shape, paddings, mode);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n  return output;\n};\nexport const mirrorPadConfig = {\n  kernelName: MirrorPad,\n  backendName: 'webgl',\n  kernelFunc: mirrorPadKernelFunc\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mod } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst MOD = `if (b == 0.0) return NAN;\n  return mod(a, b);`;\nconst MOD_PACKED = `\n  vec4 result = mod(a, b);\n  bvec4 isNaN = equal(b, vec4(0.0));\n  ` + CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\nexport const mod = binaryKernelFunc({\n  opSnippet: MOD,\n  packedOpSnippet: MOD_PACKED\n});\nexport const modConfig = {\n  kernelName: Mod,\n  backendName: 'webgl',\n  kernelFunc: mod\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class MultinomialProgram {\n  constructor(batchSize, numOutcomes, numSamples) {\n    this.variableNames = ['probs'];\n    this.customUniforms = [{\n      name: 'seed',\n      type: 'float'\n    }];\n    this.outputShape = [batchSize, numSamples];\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${numOutcomes - 1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${numOutcomes - 1}));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RealDiv } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\n// Without the equality check div produces 0.9999 for a = b, which when\n// floored can cause errors.\nconst DIV = `\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;`;\n// We do the same as in ./binaryop_gpu, with vec4 and ivec4.\n// On Linux, the vectorized implementation produces NaNs when a and b are 0.\nconst DIV_PACKED = `\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n`;\nexport const realDiv = binaryKernelFunc({\n  opSnippet: DIV,\n  packedOpSnippet: DIV_PACKED,\n  checkOutOfBounds: true\n});\nexport const realDivConfig = {\n  kernelName: RealDiv,\n  backendName: 'webgl',\n  kernelFunc: realDiv\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { subImplCPU as cpuSub } from '../kernel_utils/shared';\nconst SUB = 'return a - b;';\nexport const sub = binaryKernelFunc({\n  opSnippet: SUB,\n  packedOpSnippet: SUB,\n  supportsComplex: true,\n  cpuKernelImpl: cpuSub\n});\nexport const subConfig = {\n  kernelName: Sub,\n  backendName: 'webgl',\n  kernelFunc: sub\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { realDiv } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    dim\n  } = attrs;\n  const axes = util.parseAxisParam([dim], logits.shape);\n  const maxLogit = max({\n    inputs: {\n      x: logits\n    },\n    backend,\n    attrs: {\n      reductionIndices: axes,\n      keepDims: false\n    }\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n  const maxLogitsReshaped = reshape({\n    inputs: {\n      x: maxLogit\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const a = sub({\n    inputs: {\n      a: logits,\n      b: maxLogitsReshaped\n    },\n    backend\n  });\n  const b = exp({\n    inputs: {\n      x: a\n    },\n    backend\n  });\n  const sumExp = sum({\n    inputs: {\n      x: b\n    },\n    backend,\n    attrs: {\n      axis: axes,\n      keepDims: false\n    }\n  });\n  const sumExpReshaped = reshape({\n    inputs: {\n      x: sumExp\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const res = realDiv({\n    inputs: {\n      a: b,\n      b: sumExpReshaped\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitsReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumExpReshaped);\n  return res;\n}\nexport const softmaxConfig = {\n  kernelName: Softmax,\n  backendName: 'webgl',\n  kernelFunc: softmax\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial } from '@tensorflow/tfjs-core';\nimport { MultinomialProgram } from '../multinomial_gpu';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    numSamples,\n    seed,\n    normalized\n  } = attrs;\n  const probs = normalized ? logits : softmax({\n    inputs: {\n      logits\n    },\n    backend,\n    attrs: {\n      dim: logits.shape.length - 1\n    }\n  });\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\nexport const multinomialConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Neg } from '@tensorflow/tfjs-core';\nimport { negImplCPU } from '../kernel_utils/shared';\nimport { CHECK_NAN_SNIPPET, UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst NEG = CHECK_NAN_SNIPPET + `\n  return -x;\n`;\nconst NEG_PACKED = `\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\n// This doesn't use unaryKernelFunc because negImplCPU is not of type\n// SimpleUnaryKernelImplCPU.\nexport function neg(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  if (backend.shouldExecuteOnCPU([x])) {\n    const xData = backend.texData.get(x.dataId);\n    const [outValues, newShape] = negImplCPU(xData.values, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, outValues);\n  }\n  let program;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, NEG_PACKED);\n  } else {\n    program = new UnaryOpProgram(x.shape, NEG);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const negConfig = {\n  kernelName: Neg,\n  backendName: 'webgl',\n  kernelFunc: neg\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV3 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nexport function nonMaxSuppressionV3(args) {\n  backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    boxes,\n    scores\n  } = inputs;\n  const {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold\n  } = attrs;\n  const boxesVals = backend.readSync(boxes.dataId);\n  const scoresVals = backend.readSync(scores.dataId);\n  const {\n    selectedIndices\n  } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n  return backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\nexport const nonMaxSuppressionV3Config = {\n  kernelName: NonMaxSuppressionV3,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV3\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV4 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nexport function nonMaxSuppressionV4(args) {\n  backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    boxes,\n    scores\n  } = inputs;\n  const {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    padToMaxOutputSize\n  } = attrs;\n  const boxesVals = backend.readSync(boxes.dataId);\n  const scoresVals = backend.readSync(scores.dataId);\n  const {\n    selectedIndices,\n    validOutputs\n  } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n  return [backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)), backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))];\n}\nexport const nonMaxSuppressionV4Config = {\n  kernelName: NonMaxSuppressionV4,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV4\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, kernel_impls, NonMaxSuppressionV5 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nexport function nonMaxSuppressionV5(args) {\n  backend_util.warn('tf.nonMaxSuppression() in webgl locks the UI thread. ' + 'Call tf.nonMaxSuppressionAsync() instead');\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    boxes,\n    scores\n  } = inputs;\n  const {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  } = attrs;\n  const boxesVals = backend.readSync(boxes.dataId);\n  const scoresVals = backend.readSync(scores.dataId);\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n  const {\n    selectedIndices,\n    selectedScores\n  } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n  return [backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)), backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))];\n}\nexport const nonMaxSuppressionV5Config = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'webgl',\n  kernelFunc: nonMaxSuppressionV5\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class OneHotProgram {\n  constructor(numIndices, depth, onValue, offValue) {\n    this.variableNames = ['indices'];\n    this.outputShape = [numIndices, depth];\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${offValue}), float(${onValue}),\n                      float(index == coords.y)));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { OneHotProgram } from '../onehot_gpu';\nimport { reshape } from './Reshape';\nexport const oneHot = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices\n  } = inputs;\n  const {\n    dtype,\n    depth,\n    onValue,\n    offValue\n  } = attrs;\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const program = new OneHotProgram(indicesSize, depth, onValue, offValue);\n  const reshaped = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [indicesSize]\n    }\n  });\n  const result = backend.runWebGLProgram(program, [reshaped], dtype);\n  backend.disposeIntermediateTensorInfo(reshaped);\n  const outShape = [...indices.shape, depth];\n  const out = reshape({\n    inputs: {\n      x: result\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(result);\n  return out;\n};\nexport const oneHotConfig = {\n  kernelName: OneHot,\n  backendName: 'webgl',\n  kernelFunc: oneHot\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ZerosLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nexport function zerosLike(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const r = zerosLike({\n      inputs: {\n        x: realPart\n      },\n      backend\n    });\n    const imagPart = imag({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const i = zerosLike({\n      inputs: {\n        x: imagPart\n      },\n      backend\n    });\n    const result = complex({\n      inputs: {\n        real: r,\n        imag: i\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n    return result;\n  } else {\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: x.dtype === 'string' ? '' : 0\n      },\n      backend\n    });\n  }\n}\nexport const zerosLikeConfig = {\n  kernelName: ZerosLike,\n  backendName: 'webgl',\n  kernelFunc: zerosLike\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OnesLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { zerosLike } from './ZerosLike';\nexport function onesLike(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported under string dtype');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const r = onesLike({\n      inputs: {\n        x: realPart\n      },\n      backend\n    });\n    const imagPart = imag({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const i = zerosLike({\n      inputs: {\n        x: imagPart\n      },\n      backend\n    });\n    const result = complex({\n      inputs: {\n        real: r,\n        imag: i\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n    return result;\n  } else {\n    // TODO(cais, smilkov): Add WebGL shader for onesLike:\n    //   https://github.com/tensorflow/tfjs/issues/1293\n    return fill({\n      attrs: {\n        shape: x.shape,\n        dtype: x.dtype,\n        value: 1\n      },\n      backend\n    });\n  }\n}\nexport const onesLikeConfig = {\n  kernelName: OnesLike,\n  backendName: 'webgl',\n  kernelFunc: onesLike\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pack, util } from '@tensorflow/tfjs-core';\nimport { concat } from './Concat';\nimport { expandDims } from './ExpandDims';\nexport function pack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n  if (inputs.length === 1) {\n    return expandDims({\n      inputs: {\n        input: inputs[0]\n      },\n      backend,\n      attrs: {\n        dim: axis\n      }\n    });\n  }\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n  inputs.forEach(t => {\n    util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n    util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n  });\n  const intermediateTensorInfos = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT = expandDims({\n      inputs: {\n        input: t\n      },\n      backend,\n      attrs: {\n        dim: axis\n      }\n    });\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n  const result = concat({\n    inputs: expandedTensors,\n    backend,\n    attrs: {\n      axis\n    }\n  });\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const packConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadProgram {\n  constructor(xShape, paddings, constantValue) {\n    this.variableNames = ['x'];\n    this.customUniforms = [{\n      name: 'value',\n      type: 'float'\n    }];\n    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadPackedProgram {\n  constructor(xShape, paddings, constantValue) {\n    this.variableNames = ['x'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'value',\n      type: 'float'\n    }];\n    this.outputShape = paddings.map((p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const componentSetup = [`${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `, rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`, rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`];\n    const paddingArea = rank === 1 ? 'rc < start || rc >= end' : 'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += rank === 1 ? `} ` : `}}`;\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, PadV2, util } from '@tensorflow/tfjs-core';\nimport { PadProgram } from '../pad_gpu';\nimport { PadPackedProgram } from '../pad_packed_gpu';\nimport { fill } from './Fill';\nexport const padV2 = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    constantValue\n  } = attrs;\n  if (util.sizeFromShape(x.shape) === 0) {\n    // Short-circuit the computation, since x doesn't have value, only\n    // the shape is used to compute output shape to pad.\n    const outputShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    return fill({\n      backend,\n      attrs: {\n        shape: outputShape,\n        value: constantValue,\n        dtype: x.dtype\n      }\n    });\n  }\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new PadPackedProgram(x.shape, paddings, constantValue) : new PadProgram(x.shape, paddings, constantValue);\n  const customValues = [[constantValue]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n};\nexport const padV2Config = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pow } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst POW = `\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n`;\nconst POW_PACKED = `\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  bvec4 isNaN1 = lessThan(a, vec4(0.0));\n  bvec4 isNaN2 = lessThan(floor(b), b);\n  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);\n  ` + CHECK_NAN_SNIPPET_PACKED + `\n  return result;\n`;\nexport const pow = binaryKernelFunc({\n  opSnippet: POW,\n  packedOpSnippet: POW_PACKED\n});\nexport const powConfig = {\n  kernelName: Pow,\n  backendName: 'webgl',\n  kernelFunc: pow\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { prodImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function prod(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const xRank = x.shape.length;\n  const toDispose = [];\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values;\n    const {\n      outVals,\n      outShape,\n      outDtype\n    } = prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({\n      inputs: {\n        x: permutedX\n      },\n      backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({\n      inputs: {\n        x: res\n      },\n      backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n  }\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\nexport const prodConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedGather } from '@tensorflow/tfjs-core';\nimport { raggedGatherImplCPU } from '../kernel_utils/shared';\nexport function raggedGather(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    paramsNestedSplits,\n    paramsDenseValues,\n    indices\n  } = inputs;\n  const {\n    outputRaggedRank\n  } = attrs;\n  const $paramsNestedSplits = paramsNestedSplits.map(t => backend.readSync(t.dataId));\n  const $paramsNestedSplitsShapes = paramsNestedSplits.map(t => t.shape);\n  const $paramsDenseValues = backend.readSync(paramsDenseValues.dataId);\n  const $indices = backend.readSync(indices.dataId);\n  const [outputNestedSplits, outputDenseValues, outputDenseValuesShape] = raggedGatherImplCPU($paramsNestedSplits, $paramsNestedSplitsShapes, $paramsDenseValues, paramsDenseValues.shape, paramsDenseValues.dtype, $indices, indices.shape, outputRaggedRank);\n  const outputNestedSplitsTensors = outputNestedSplits.map(splits => backend.makeTensorInfo([splits.length], 'int32', splits));\n  const outputDenseValuesTensor = backend.makeTensorInfo(outputDenseValuesShape, paramsDenseValues.dtype, outputDenseValues);\n  return outputNestedSplitsTensors.concat([outputDenseValuesTensor]);\n}\nexport const raggedGatherConfig = {\n  kernelName: RaggedGather,\n  backendName: 'webgl',\n  kernelFunc: raggedGather\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedRange } from '@tensorflow/tfjs-core';\nimport { raggedRangeImplCPU } from '../kernel_utils/shared';\nexport function raggedRange(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    starts,\n    limits,\n    deltas\n  } = inputs;\n  const $starts = backend.readSync(starts.dataId);\n  const $limits = backend.readSync(limits.dataId);\n  const $deltas = backend.readSync(deltas.dataId);\n  const [rtNestedSplitsData, rtDenseValuesData] = raggedRangeImplCPU($starts, starts.shape, starts.dtype, $limits, limits.shape, $deltas, deltas.shape);\n  const rtNestedSplits = backend.makeTensorInfo([rtNestedSplitsData.length], 'int32', rtNestedSplitsData);\n  const rtDenseValues = backend.makeTensorInfo([rtDenseValuesData.length], starts.dtype, rtDenseValuesData);\n  return [rtNestedSplits, rtDenseValues];\n}\nexport const raggedRangeConfig = {\n  kernelName: RaggedRange,\n  backendName: 'webgl',\n  kernelFunc: raggedRange\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RaggedTensorToTensor } from '@tensorflow/tfjs-core';\nimport { raggedTensorToTensorImplCPU } from '../kernel_utils/shared';\nexport function raggedTensorToTensor(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    shape,\n    values,\n    defaultValue,\n    rowPartitionTensors\n  } = inputs;\n  const {\n    rowPartitionTypes\n  } = attrs;\n  const $shape = backend.readSync(shape.dataId);\n  const $values = backend.readSync(values.dataId);\n  const $defaultValue = backend.readSync(defaultValue.dataId);\n  const $rowPartitionValues = rowPartitionTensors.map(t => backend.readSync(t.dataId));\n  const rowPartitionValuesShapes = rowPartitionTensors.map(t => t.shape);\n  const [outputShape, output] = raggedTensorToTensorImplCPU($shape, shape.shape, $values, values.shape, values.dtype, $defaultValue, defaultValue.shape, $rowPartitionValues, rowPartitionValuesShapes, rowPartitionTypes);\n  return backend.makeTensorInfo(outputShape, values.dtype, output);\n}\nexport const raggedTensorToTensorConfig = {\n  kernelName: RaggedTensorToTensor,\n  backendName: 'webgl',\n  kernelFunc: raggedTensorToTensor\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Range } from '@tensorflow/tfjs-core';\nimport { rangeImplCPU } from '../kernel_utils/shared';\nexport const range = args => {\n  const {\n    backend,\n    attrs\n  } = args;\n  const {\n    start,\n    stop,\n    step,\n    dtype\n  } = attrs;\n  const values = rangeImplCPU(start, stop, step, dtype);\n  return backend.makeTensorInfo([values.length], dtype, values);\n};\nexport const rangeConfig = {\n  kernelName: Range,\n  backendName: 'webgl',\n  kernelFunc: range\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reciprocal } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst RECIPROCAL = `return 1.0 / x;`;\nexport const reciprocal = unaryKernelFunc({\n  opSnippet: RECIPROCAL\n});\nexport const reciprocalConfig = {\n  kernelName: Reciprocal,\n  backendName: 'webgl',\n  kernelFunc: reciprocal\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\nconst RELU_PACKED = `\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const relu = unaryKernelFunc({\n  opSnippet: RELU,\n  packedOpSnippet: RELU_PACKED\n});\nexport const reluConfig = {\n  kernelName: Relu,\n  backendName: 'webgl',\n  kernelFunc: relu\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu6 } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { CHECK_NAN_SNIPPET } from '../unaryop_gpu';\nconst RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\nconst RELU6_PACKED = `\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const relu6 = unaryKernelFunc({\n  opSnippet: RELU6,\n  packedOpSnippet: RELU6_PACKED\n});\nexport const relu6Config = {\n  kernelName: Relu6,\n  backendName: 'webgl',\n  kernelFunc: relu6\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearProgram {\n  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n    this.variableNames = ['A'];\n    this.outputShape = [];\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n    let sourceFracIndexRC;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` + ` - vec2(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearPackedProgram {\n  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = [];\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n    let sourceFracIndexRC;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `(vec3(yRC) + vec3(0.5)) * ` + `effectiveInputOverOutputRatioRC - vec3(0.5)`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, ResizeBilinear } from '@tensorflow/tfjs-core';\nimport { ResizeBilinearProgram } from '../resize_bilinear_gpu';\nimport { ResizeBilinearPackedProgram } from '../resize_bilinear_packed_gpu';\nexport function resizeBilinear(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    halfPixelCenters,\n    size\n  } = attrs;\n  const [newHeight, newWidth] = size;\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ? new ResizeBilinearPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) : new ResizeBilinearProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\nexport const resizeBilinearConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeBilinearBackpropProgram {\n  constructor(dyShape, inputShape, alignCorners) {\n    this.variableNames = ['dy'];\n    this.outputShape = [];\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n    const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];\n    const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = Math.ceil(invHeightScale) * 2 + 2;\n    const winWidth = Math.ceil(invWidthScale) * 2 + 2;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${xHeight - 1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${xWidth - 1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinearGrad } from '@tensorflow/tfjs-core';\nimport { ResizeBilinearBackpropProgram } from '../resize_bilinear_backprop_gpu';\nexport function resizeBilinearGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images,\n    dy\n  } = inputs;\n  const {\n    alignCorners\n  } = attrs;\n  const program = new ResizeBilinearBackpropProgram(dy.shape, images.shape, alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\nexport const resizeBilinearGradConfig = {\n  kernelName: ResizeBilinearGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinearGrad\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeighborProgram {\n  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n    this.variableNames = ['A'];\n    this.outputShape = [];\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` + `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeighborPackedProgram {\n  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = [];\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC;\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec3(yRC) + vec3(0.5)) * ` + `effectiveInputOverOutputRatioRC, vec3(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec3(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec3 inputShapeRC = vec3(${oldHeight}.0, ${oldWidth}.0,\n                                     ${oldWidth}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${depth - 1};\n        bool hasNextRow = coords.z < ${newWidth - 1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, ResizeNearestNeighbor } from '@tensorflow/tfjs-core';\nimport { ResizeNearestNeighborProgram } from '../resize_nearest_neighbor_gpu';\nimport { ResizeNearestNeighborPackedProgram } from '../resize_nearest_neighbor_packed_gpu';\nexport function resizeNearestNeighbor(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    halfPixelCenters,\n    size\n  } = attrs;\n  const [newHeight, newWidth] = size;\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ? new ResizeNearestNeighborPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) : new ResizeNearestNeighborProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], images.dtype);\n}\nexport const resizeNearestNeighborConfig = {\n  kernelName: ResizeNearestNeighbor,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighbor\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeigborBackpropProgram {\n  constructor(dyShape, inputShape, alignCorners) {\n    this.variableNames = ['dy'];\n    this.outputShape = [];\n    this.outputShape = inputShape;\n    const [, xHeight, xWidth] = inputShape;\n    const [, yHeight, yWidth] = dyShape;\n    // In the backwards pass, we want to find the pixels that were generated for\n    // each pixel in the input image the forward pass and add the corresponding\n    // coefficient from dy to the gradient (with some interpolation).\n    const effectiveXSize = [alignCorners && yHeight > 1 ? xHeight - 1 : xHeight, alignCorners && yWidth > 1 ? xWidth - 1 : xWidth];\n    const effectiveYSize = [alignCorners && yHeight > 1 ? yHeight - 1 : yHeight, alignCorners && yWidth > 1 ? yWidth - 1 : yWidth];\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = Math.ceil(invHeightScale) * 2 + 2;\n    const winWidth = Math.ceil(invWidthScale) * 2 + 2;\n    this.userCode = `\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${heightScale});\n        const float widthScale = float(${widthScale});\n\n        const float invHeightScale = float(${invHeightScale});\n        const float invWidthScale = float(${invWidthScale});\n\n        const int winHeight = int(${winHeight});\n        const int winWidth = int(${winWidth});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${yHeight}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${yWidth}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${effectiveXSize[0]}) *\n                (float(dyR) / float(${effectiveYSize[0]}));\n\n            float sourceFracCol =\n                float(${effectiveXSize[1]}) *\n                  (float(dyC) / float(${effectiveYSize[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${xHeight}) - 1),\n                ${alignCorners} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${xWidth}) - 1),\n                ${alignCorners} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighborGrad } from '@tensorflow/tfjs-core';\nimport { ResizeNearestNeigborBackpropProgram } from '../resize_nearest_neighbor_backprop_gpu';\nexport function resizeNearestNeighborGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images,\n    dy\n  } = inputs;\n  const {\n    alignCorners\n  } = attrs;\n  const program = new ResizeNearestNeigborBackpropProgram(dy.shape, images.shape, alignCorners);\n  return backend.runWebGLProgram(program, [dy], dy.dtype);\n}\nexport const resizeNearestNeighborGradConfig = {\n  kernelName: ResizeNearestNeighborGrad,\n  backendName: 'webgl',\n  kernelFunc: resizeNearestNeighborGrad\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReverseProgram {\n  constructor(xShape, axis) {\n    this.variableNames = ['x'];\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    if (rank === 1) {\n      this.userCode = `\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${xShape[0]} - coord - 1));\n        }\n      `;\n      return;\n    }\n    const getInCoord = i => {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - coords[${i}] - 1`;\n      }\n      return `coords[${i}]`;\n    };\n    const inCoords = xShape.map((_, i) => getInCoord(i)).join(',');\n    const type = getCoordsDataType(rank);\n    this.userCode = `\n      void main() {\n        ${type} coords = getOutputCoords();\n        setOutput(getX(${inCoords}));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ReversePackedProgram {\n  constructor(xShape, axis) {\n    this.variableNames = ['x'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    const rank = xShape.length;\n    if (rank > 4) {\n      throw new Error(`WebGL backend: Reverse of rank-${rank} tensor is not yet supported`);\n    }\n    this.outputShape = xShape;\n    const channels = getChannels('rc', rank);\n    const nextColumn = `${channels[rank - 1]} + 1 < ${this.outputShape[rank - 1]}`;\n    const nextRow = `${channels[rank - 2]} + 1 < ${this.outputShape[rank - 2]}`;\n    const type = getCoordsDataType(rank);\n    if (rank === 1) {\n      this.userCode = `\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${xShape[0]} - rc - 1),\n            ${xShape[0]} - rc - 1);\n          if(${nextColumn}){\n              result.g = getChannel(getX(${xShape[0]} - (rc  + 1) - 1),\n                ${xShape[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `;\n    } else {\n      this.userCode = `\n        void main() {\n          ${type} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${getR(channels.slice())};\n          if(${nextColumn}){\n            result.g = ${getG(channels.slice())};\n          }\n          if(${nextRow}) {\n            result.b = ${getB(channels.slice())};\n            if(${nextColumn}) {\n              result.a = ${getA(channels.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `;\n    }\n    function getR(channels) {\n      return getChannel(channels);\n    }\n    function getG(channels) {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      return getChannel(channels);\n    }\n    function getB(channels) {\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n    function getA(channels) {\n      channels[rank - 1] = '(' + channels[rank - 1] + ` + 1)`;\n      channels[rank - 2] = '(' + channels[rank - 2] + ` + 1)`;\n      return getChannel(channels);\n    }\n    function getChannel(channels) {\n      const inCoordsArray = xShape.map((_, i) => getInCoord(i, channels));\n      const inCoords = inCoordsArray.join(',');\n      const innerDims = inCoordsArray.slice(-2).join(',');\n      return `getChannel(getX(${inCoords}), vec2(${innerDims}))`;\n    }\n    function getInCoord(i, channels1) {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return `${xShape[i]} - ${channels1[i]} - 1`;\n      } else {\n        return `${channels1[i]}`;\n      }\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Reverse, util } from '@tensorflow/tfjs-core';\nimport { ReverseProgram } from '../reverse_gpu';\nimport { ReversePackedProgram } from '../reverse_packed_gpu';\nimport { identity } from './Identity';\nexport function reverse(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dims\n  } = attrs;\n  const xRank = x.shape.length;\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new ReversePackedProgram(x.shape, $dims) : new ReverseProgram(x.shape, $dims);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const reverseConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class RotateProgram {\n  constructor(imageShape, fillValue) {\n    this.variableNames = ['Image'];\n    this.outputShape = [];\n    this.customUniforms = [{\n      name: 'params',\n      type: 'vec4'\n    }];\n    const imageHeight = imageShape[1];\n    const imageWidth = imageShape[2];\n    this.outputShape = imageShape;\n    let fillSnippet = '';\n    if (typeof fillValue === 'number') {\n      fillSnippet = `float outputValue = ${fillValue.toFixed(2)};`;\n    } else {\n      fillSnippet = `\n        vec3 fill = vec3(${fillValue.join(',')});\n        float outputValue = fill[coords[3]];`;\n    }\n    this.userCode = `\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${fillSnippet}\n          if(coordX >= 0 && coordX < ${imageWidth} && coordY >= 0 && coordY < ${imageHeight}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { RotateWithOffset } from '@tensorflow/tfjs-core';\nimport { RotateProgram } from '../rotate_gpu';\nexport const rotateWithOffsetConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'webgl',\n  kernelFunc: ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      image\n    } = inputs;\n    const {\n      radians,\n      fillValue,\n      center\n    } = attrs;\n    const webglBackend = backend;\n    const program = new RotateProgram(image.shape, fillValue);\n    const [centerX, centerY] = backend_util.getImageCenter(center, image.shape[1], image.shape[2]);\n    const customValues = [[centerX, centerY, Math.sin(radians), Math.cos(radians)]];\n    const output = webglBackend.runWebGLProgram(program, [image], image.dtype, customValues);\n    return output;\n  }\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Round } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst ROUND = `\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n`;\nexport const round = unaryKernelFunc({\n  opSnippet: ROUND\n});\nexport const roundConfig = {\n  kernelName: Round,\n  backendName: 'webgl',\n  kernelFunc: round\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { rsqrtImplCPU } from '../kernel_utils/shared';\nconst RSQRT = `return inversesqrt(x);`;\nexport const rsqrt = unaryKernelFunc({\n  opSnippet: RSQRT,\n  cpuKernelImpl: rsqrtImplCPU\n});\nexport const rsqrtConfig = {\n  kernelName: Rsqrt,\n  backendName: 'webgl',\n  kernelFunc: rsqrt\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ScatterProgram {\n  constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true, defaultIsTensor = false) {\n    this.variableNames = ['updates', 'indices', 'defaultValue'];\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n    let defaultValuesString = '';\n    if (defaultIsTensor) {\n      defaultValuesString = 'coords[0], coords[1]';\n    }\n    const defaultValueSnippet = `getDefaultValue(${defaultValuesString})`;\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${updateSize}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${sliceDim}; j++) {\n              int index = round(${indicesSnippet});\n              flattenedIndex += index * ${strideString};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${updatesSnippet};\n              found = true;\n            }\n          }\n          setOutput(mix(${defaultValueSnippet}, sum, float(found)));\n        }\n      `;\n  }\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class ScatterPackedProgram {\n  constructor(updateSize, sliceDim, indicesRank, updatesRank, strides, shape, summingDupeIndex = true, defaultIsTensor = false) {\n    this.variableNames = ['updates', 'indices', 'defaultValue'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    let indicesString = '';\n    if (indicesRank === 1) {\n      indicesString = 'i';\n    } else if (indicesRank === 2) {\n      indicesString = 'i, j';\n    }\n    const indicesSnippet = `getIndices(${indicesString})`;\n    let updatesString = '';\n    if (updatesRank === 1) {\n      updatesString = 'i';\n    } else if (updatesRank === 2) {\n      updatesString = 'i, coords[1]';\n    }\n    const updatesSnippet = `getUpdates(${updatesString})`;\n    let defaultValuesString = '';\n    if (defaultIsTensor) {\n      defaultValuesString = 'coords[0], coords[1]';\n    }\n    const defaultValueSnippet = `getDefaultValue(${defaultValuesString})`;\n    const strideString = sliceDim > 1 ? 'strides[j]' : 'strides';\n    const strideString2 = sliceDim > 1 ? 'strides[j + 1]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${strides});\n\n        void main() {\n          ${dtype} coords = getOutputCoords();\n          vec4 sum = vec4(0.);\n          vec4 found = vec4(0.);\n          for (int i = 0; i < ${updateSize}; i+=2) {\n            ivec2 flattenedIndex = ivec2(0);\n            for (int j = 0; j < ${sliceDim}; j+=2) {\n              ivec4 index = round(${indicesSnippet});\n              flattenedIndex += index.xz * ${strideString};\n              if (j + 1 < ${sliceDim}) {\n                flattenedIndex += index.yw * ${strideString2};\n              }\n            }\n            if (flattenedIndex[0] == coords[0] || flattenedIndex[1] == coords[0] ||\n                flattenedIndex[0] == coords[0] + 1 || flattenedIndex[1] == coords[0] + 1) {\n              vec4 updVals = ${updatesSnippet};\n              if (flattenedIndex[0] == coords[0]) {\n                sum.xy += updVals.xy;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[0] == coords[0] + 1) {\n                sum.zw += updVals.xy;\n                found.zw = vec2(1.);\n              }\n              if (flattenedIndex[1] == coords[0]) {\n                sum.xy += updVals.zw;\n                found.xy = vec2(1.);\n              } else if (flattenedIndex[1] == coords[0] + 1) {\n                sum.zw += updVals.zw;\n                found.zw = vec2(1.);\n              }\n            }\n          }\n          setOutput(mix(${defaultValueSnippet}, sum, found));\n        }\n      `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, ScatterNd } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { ScatterPackedProgram } from '../scatter_packed_gpu';\nimport { reshape } from './Reshape';\nexport function scatterNd(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices,\n    updates\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(updates, indices, shape);\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceRank]\n    }\n  });\n  const flattenX = reshape({\n    inputs: {\n      x: updates\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceSize]\n    }\n  });\n  const defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)\n  let program;\n  if (env().getBool('WEBGL_PACK')) {\n    program = new ScatterPackedProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n  } else {\n    program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n  }\n  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n  return reshaped;\n}\nexport const scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nexport class SearchSortedProgram {\n  constructor(batchSize, numInputs, numValues, side) {\n    this.variableNames = ['sortedSequence', 'values'];\n    this.customUniforms = [{\n      name: 'numInputs',\n      type: 'int'\n    }];\n    this.outputShape = [batchSize, numValues];\n    const webGL2LoopHead = 'while (left < right) {';\n    // WebGL1 doesn't accept non constant loop conditions, so upper bound loop\n    // iterations.\n    const webGL1LoopHead = `for (int i = 0; i < ${Math.ceil(Math.log2(numInputs + 1))}; ++i) { if (left >= right) break;`;\n    const loopHead = env().getNumber('WEBGL_VERSION') === 2 ? webGL2LoopHead : webGL1LoopHead;\n    // left corresponds to lower bound and right to upper bound.\n    const boundComparator = side === 'left' ? '<' : '<=';\n    this.userCode = `\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${loopHead}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${boundComparator} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `;\n  }\n}\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SearchSorted } from '@tensorflow/tfjs-core';\nimport { SearchSortedProgram } from '../search_sorted_gpu';\nexport function searchSorted(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    sortedSequence,\n    values\n  } = inputs;\n  const {\n    side\n  } = attrs;\n  const program = new SearchSortedProgram(sortedSequence.shape[0], sortedSequence.shape[1], values.shape[1], side);\n  const customValues = [[sortedSequence.shape[1]]];\n  return backend.runWebGLProgram(program, [sortedSequence, values], 'int32', customValues);\n}\nexport const searchSortedConfig = {\n  kernelName: SearchSorted,\n  backendName: 'webgl',\n  kernelFunc: searchSorted\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SelectProgram {\n  constructor(cRank, shape, rank) {\n    this.variableNames = ['c', 'a', 'b'];\n    this.outputShape = shape;\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n    const dtype = getCoordsDataType(rank);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, upcastType } from '@tensorflow/tfjs-core';\nimport { SelectProgram } from '../select_gpu';\nexport function select(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    condition,\n    t,\n    e\n  } = inputs;\n  const program = new SelectProgram(condition.shape.length, t.shape, t.shape.length);\n  return backend.runWebGLProgram(program, [condition, t, e], upcastType(t.dtype, e.dtype));\n}\nexport const selectConfig = {\n  kernelName: Select,\n  backendName: 'webgl',\n  kernelFunc: select\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Selu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SELU = `\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${backend_util.SELU_SCALEALPHA};\n  float scale = ${backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`;\nexport const selu = unaryKernelFunc({\n  opSnippet: SELU\n});\nexport const seluConfig = {\n  kernelName: Selu,\n  backendName: 'webgl',\n  kernelFunc: selu\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sigmoid } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { sigmoidImplCPU } from '../kernel_utils/shared';\nconst SIGMOID = CHECK_NAN_SNIPPET_UNARY + `\n  return 1.0 / (1.0 + exp(-1.0 * x));\n`;\nconst SIGMOID_PACKED = `\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n`;\nexport const sigmoid = unaryKernelFunc({\n  opSnippet: SIGMOID,\n  packedOpSnippet: SIGMOID_PACKED,\n  cpuKernelImpl: sigmoidImplCPU\n});\nexport const sigmoidConfig = {\n  kernelName: Sigmoid,\n  backendName: 'webgl',\n  kernelFunc: sigmoid\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sign } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\n// Sign does not propagate NANs.\nconst SIGN = `\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n`;\nexport const sign = unaryKernelFunc({\n  opSnippet: SIGN\n});\nexport const signConfig = {\n  kernelName: Sign,\n  backendName: 'webgl',\n  kernelFunc: sign\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sin } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET_PACKED } from '../binaryop_packed_gpu';\nimport { CHECK_NAN_SNIPPET_UNARY, unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SIN = CHECK_NAN_SNIPPET_UNARY + `\n  return sin(x);\n`;\nconst SIN_PACKED = `\n  vec4 result = sin(x);\n  bvec4 isNaN = isnan(x);\n  ${CHECK_NAN_SNIPPET_PACKED}\n  return result;\n`;\nexport const sin = unaryKernelFunc({\n  opSnippet: SIN,\n  packedOpSnippet: SIN_PACKED\n});\nexport const sinConfig = {\n  kernelName: Sin,\n  backendName: 'webgl',\n  kernelFunc: sin\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sinh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SINH = `\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n`;\nexport const sinh = unaryKernelFunc({\n  opSnippet: SINH\n});\nexport const sinhConfig = {\n  kernelName: Sinh,\n  backendName: 'webgl',\n  kernelFunc: sinh\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softplus } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SOFTPLUS = `\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n`;\nexport const softplus = unaryKernelFunc({\n  opSnippet: SOFTPLUS\n});\nexport const softplusConfig = {\n  kernelName: Softplus,\n  backendName: 'webgl',\n  kernelFunc: softplus\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { padV2 } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport const spaceToBatchND = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    paddings\n  } = attrs;\n  util.assert(x.shape.length <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' + 'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n  const completePaddings = [[0, 0]];\n  completePaddings.push(...paddings);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n  const toDispose = [];\n  const paddedX = padV2({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      paddings: completePaddings,\n      constantValue: 0\n    }\n  });\n  const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n  const reshapedPaddedX = reshape({\n    inputs: {\n      x: paddedX\n    },\n    backend,\n    attrs: {\n      shape: reshapedPaddedShape\n    }\n  });\n  const paddedXT = transpose({\n    inputs: {\n      x: reshapedPaddedX\n    },\n    backend,\n    attrs: {\n      perm: permutedReshapedPaddedPermutation\n    }\n  });\n  const result = reshape({\n    inputs: {\n      x: paddedXT\n    },\n    backend,\n    attrs: {\n      shape: flattenShape\n    }\n  });\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n};\nexport const spaceToBatchNDConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseFillEmptyRows } from '@tensorflow/tfjs-core';\nimport { sparseFillEmptyRowsImplCPU } from '../kernel_utils/shared';\nexport function sparseFillEmptyRows(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    indices,\n    values,\n    denseShape,\n    defaultValue\n  } = inputs;\n  if (denseShape.shape.length !== 1) {\n    throw new Error(`Dense shape must be a vector, saw:\n         ${denseShape.shape}`);\n  }\n  if (indices.shape.length !== 2) {\n    throw new Error(`Indices must be a matrix, saw:\n         ${indices.shape}`);\n  }\n  if (values.shape.length !== 1) {\n    throw new Error(`Values must be a vector, saw:\n         ${values.shape}`);\n  }\n  if (defaultValue.shape.length !== 0) {\n    throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n  }\n  const $indices = backend.readSync(indices.dataId);\n  const $values = backend.readSync(values.dataId);\n  const $denseShape = backend.readSync(denseShape.dataId);\n  const $defaultValue = backend.readSync(defaultValue.dataId)[0];\n  const [outputIndices, outputIndicesShape, outputValues, emptyRowIndicator, reverseIndexMap] = sparseFillEmptyRowsImplCPU($indices, indices.shape, indices.dtype, $values, values.dtype, $denseShape, $defaultValue);\n  return [backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices), backend.makeTensorInfo([outputIndicesShape[0]], values.dtype, outputValues), backend.makeTensorInfo([emptyRowIndicator.length], 'bool', new Uint8Array(emptyRowIndicator.map(value => Number(value)))), backend.makeTensorInfo([reverseIndexMap.length], indices.dtype, new Int32Array(reverseIndexMap))];\n}\nexport const sparseFillEmptyRowsConfig = {\n  kernelName: SparseFillEmptyRows,\n  backendName: 'webgl',\n  kernelFunc: sparseFillEmptyRows\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseReshape } from '@tensorflow/tfjs-core';\nimport { sparseReshapeImplCPU } from '../kernel_utils/shared';\nexport function sparseReshape(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    inputIndices,\n    inputShape,\n    newShape\n  } = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${inputShape.shape}`);\n  }\n  if (newShape.shape.length !== 1) {\n    throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n  const $inputShape = Array.from(backend.readSync(inputShape.dataId));\n  const $inputIndices = backend.readSync(inputIndices.dataId);\n  const targetShape = Array.from(backend.readSync(newShape.dataId));\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);\n  return [backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices), backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape))];\n}\nexport const sparseReshapeConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentMean } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImplCPU } from '../kernel_utils/shared';\nexport function sparseSegmentMean(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    data,\n    indices,\n    segmentIds\n  } = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n              ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n              ${segmentIds.shape}`);\n  }\n  const $data = backend.readSync(data.dataId);\n  const $indices = backend.readSync(indices.dataId);\n  const $segmentIds = backend.readSync(segmentIds.dataId);\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds, true);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentMeanConfig = {\n  kernelName: SparseSegmentMean,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentMean\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentSum } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImplCPU } from '../kernel_utils/shared';\nexport function sparseSegmentSum(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    data,\n    indices,\n    segmentIds\n  } = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n  const $data = backend.readSync(data.dataId);\n  const $indices = backend.readSync(indices.dataId);\n  const $segmentIds = backend.readSync(segmentIds.dataId);\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentSumConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense, util } from '@tensorflow/tfjs-core';\nimport { scatterImplCPU } from '../kernel_utils/shared';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function sparseToDense(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    sparseIndices,\n    sparseValues,\n    defaultValue\n  } = inputs;\n  const {\n    outputShape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n  if (sparseValues.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(sparseIndices);\n    const updatesBuf = backend.bufferSync(sparseValues);\n    const $defaultValue = util.decodeString(backend.readSync(defaultValue.dataId)[0]);\n    const outBuf = scatterImplCPU(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n  }\n  const program = new ScatterProgram(numUpdates, sliceRank, sparseIndices.shape.length, sparseValues.shape.length, strides, [outputSize, 1], sumDupeIndices);\n  const res = backend.runWebGLProgram(program, [sparseValues, sparseIndices, defaultValue], sparseValues.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: outputShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nexport const sparseToDenseConfig = {\n  kernelName: SparseToDense,\n  backendName: 'webgl',\n  kernelFunc: sparseToDense\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SplitV, util } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nexport function splitV(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    numOrSizeSplits,\n    axis\n  } = attrs;\n  const $axis = util.parseAxisParam(axis, x.shape)[0];\n  const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n  const xRank = x.shape.length;\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  return splitSizes.map(s => {\n    const sliceSize = [...size];\n    sliceSize[$axis] = s;\n    const sliceT = slice({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        begin,\n        size: sliceSize\n      }\n    });\n    begin[$axis] += s;\n    return sliceT;\n  });\n}\nexport const splitVConfig = {\n  kernelName: SplitV,\n  backendName: 'webgl',\n  kernelFunc: splitV\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sqrt } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nimport { sqrtImplCPU } from '../kernel_utils/shared';\nconst SQRT = `return sqrt(x);`;\nexport const sqrt = unaryKernelFunc({\n  opSnippet: SQRT,\n  packedOpSnippet: SQRT,\n  cpuKernelImpl: sqrtImplCPU\n});\nexport const sqrtConfig = {\n  kernelName: Sqrt,\n  backendName: 'webgl',\n  kernelFunc: sqrt\n};\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Square } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SQUARE = `return x * x;`;\nexport const square = unaryKernelFunc({\n  opSnippet: SQUARE\n});\nexport const squareConfig = {\n  kernelName: Square,\n  backendName: 'webgl',\n  kernelFunc: square\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '@tensorflow/tfjs-core';\nimport { binaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst SQUARED_DIFFERENCE = 'return (a - b) * (a - b);';\nexport const squaredDifference = binaryKernelFunc({\n  opSnippet: SQUARED_DIFFERENCE,\n  packedOpSnippet: SQUARED_DIFFERENCE\n});\nexport const squaredDifferenceConfig = {\n  kernelName: SquaredDifference,\n  backendName: 'webgl',\n  kernelFunc: squaredDifference\n};\n", "/**\n * @license\n * Copyright 2023 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, StaticRegexReplace } from '@tensorflow/tfjs-core';\nimport { staticRegexReplaceImplCPU } from '../kernel_utils/shared';\nexport function staticRegexReplace(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  if (x.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  const $x = backend.readSync(x.dataId);\n  const stringInput = backend_util.fromUint8ToStringArray($x);\n  const output = staticRegexReplaceImplCPU(stringInput, 'string', attrs);\n  return backend.makeTensorInfo(x.shape, 'string', output);\n}\nexport const staticRegexReplaceConfig = {\n  kernelName: StaticRegexReplace,\n  backendName: 'webgl',\n  kernelFunc: staticRegexReplace\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Step } from '@tensorflow/tfjs-core';\nimport { CHECK_NAN_SNIPPET, UnaryOpProgram } from '../unaryop_gpu';\nexport function step({\n  inputs,\n  attrs,\n  backend\n}) {\n  const {\n    x\n  } = inputs;\n  const opSnippet = CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${attrs.alpha});\n  `;\n  const program = new UnaryOpProgram(x.shape, opSnippet);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const stepConfig = {\n  kernelName: Step,\n  backendName: 'webgl',\n  kernelFunc: step\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class StridedSliceProgram {\n  constructor(begin, strides, size) {\n    this.variableNames = ['x'];\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords = size.map((_, i) => {\n        outputAxis++;\n        return size.length === 1 ? `coords * strides[${i}] + begin[${i}]` : `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n      }).join(',');\n    }\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, slice_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { stridedSliceImplCPU } from '../kernel_utils/shared';\nimport { StridedSliceProgram } from '../strided_slice_gpu';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function stridedSlice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n  let result;\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        begin: $begin,\n        size\n      }\n    });\n    result = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const shouldExecuteOnCPU = backend.shouldExecuteOnCPU([x]);\n    if (shouldExecuteOnCPU) {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const values = backend.readSync(x.dataId);\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      const xBuf = buffer(x.shape, x.dtype, values);\n      const resultValues = stridedSliceImplCPU(finalShapeSparse, xBuf, $strides, $begin);\n      result = backend.makeTensorInfo(finalShape, x.dtype, resultValues.values);\n    } else {\n      const program = new StridedSliceProgram($begin, $strides, finalShapeSparse);\n      result = backend.runWebGLProgram(program, [x], x.dtype);\n    }\n  }\n  const resultReshaped = reshape({\n    inputs: {\n      x: result\n    },\n    backend,\n    attrs: {\n      shape: finalShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nexport const stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'webgl',\n  kernelFunc: stridedSlice\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringNGrams } from '@tensorflow/tfjs-core';\nimport { stringNGramsImplCPU } from '../kernel_utils/shared';\nexport function stringNGrams(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {\n    data,\n    dataSplits\n  } = inputs;\n  const $data = backend.readSync(data.dataId);\n  const $dataSplits = backend.readSync(dataSplits.dataId);\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);\n  return [backend.makeTensorInfo([nGrams.length], 'string', nGrams), backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits)];\n}\nexport const stringNGramsConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringSplit } from '@tensorflow/tfjs-core';\nimport { stringSplitImplCPU } from '../kernel_utils/shared';\nexport function stringSplit(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    skipEmpty\n  } = attrs;\n  const {\n    input,\n    delimiter\n  } = inputs;\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (input.shape.length !== 1) {\n    throw new Error(`Input must be a vector, got shape: ${input.shape}`);\n  }\n  if (delimiter.shape.length !== 0) {\n    throw new Error(`Delimiter must be a scalar, got shape: ${delimiter.shape}`);\n  }\n  const $input = backend.readSync(input.dataId);\n  const $delimiter = backend.readSync(delimiter.dataId)[0];\n  const [indices, values, shape] = stringSplitImplCPU($input, $delimiter, skipEmpty);\n  const outputSize = values.length;\n  return [backend.makeTensorInfo([outputSize, 2], 'int32', indices), backend.makeTensorInfo([outputSize], 'string', values), backend.makeTensorInfo([2], 'int32', new Int32Array(shape))];\n}\nexport const stringSplitConfig = {\n  kernelName: StringSplit,\n  backendName: 'webgl',\n  kernelFunc: stringSplit\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringToHashBucketFast } from '@tensorflow/tfjs-core';\nimport { stringToHashBucketFastImplCPU } from '../kernel_utils/shared';\nexport function stringToHashBucketFast(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    numBuckets\n  } = attrs;\n  const {\n    input\n  } = inputs;\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n  const $input = backend.readSync(input.dataId);\n  const output = stringToHashBucketFastImplCPU($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\nexport const stringToHashBucketFastConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'webgl',\n  kernelFunc: stringToHashBucketFast\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst TAN = `return tan(x);`;\nexport const tan = unaryKernelFunc({\n  opSnippet: TAN\n});\nexport const tanConfig = {\n  kernelName: Tan,\n  backendName: 'webgl',\n  kernelFunc: tan\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tanh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../kernel_utils/kernel_funcs_utils';\nconst TANH = `\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n`;\nexport const tanh = unaryKernelFunc({\n  opSnippet: TANH\n});\nexport const tanhConfig = {\n  kernelName: Tanh,\n  backendName: 'webgl',\n  kernelFunc: tanh\n};\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, TensorScatterUpdate } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function tensorScatterUpdate(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    tensor,\n    indices,\n    updates\n  } = inputs;\n  const {} = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(updates, indices, tensor.shape);\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(tensor.shape, indices.dtype);\n  }\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceRank]\n    }\n  });\n  const flattenX = reshape({\n    inputs: {\n      x: updates\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceSize]\n    }\n  });\n  const flattenTensor = reshape({\n    inputs: {\n      x: tensor\n    },\n    backend,\n    attrs: {\n      shape: flattenShape\n    }\n  });\n  const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape, false, true);\n  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, flattenTensor], flattenTensor.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: tensor.shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenTensor);\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nexport const tensorScatterUpdateConfig = {\n  kernelName: TensorScatterUpdate,\n  backendName: 'webgl',\n  kernelFunc: tensorScatterUpdate\n};\n", "/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TileProgram {\n  constructor(aShape, reps) {\n    this.variableNames = ['A'];\n    const outputShape = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\nfunction getSourceCoords(aShape) {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Tile, util } from '@tensorflow/tfjs-core';\nimport { tileImplCPU } from '../kernel_utils/shared';\nimport { TileProgram } from '../tile_gpu';\nexport function tile(params) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = params;\n  const {\n    x\n  } = inputs;\n  const {\n    reps\n  } = attrs;\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ? data.map(d => util.decodeString(d)) : data;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n  return output;\n}\nexport const tileConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile\n};\n", "// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\n// The original algorithm is based on computing the top K only, however\n// since for TFJS we require the indices of the top K values as well then the\n// algorithm found here is a bit modified. Rather than producing the values\n// at each step, the indices containing the top K are generated instead.\n// The output values are not generated to reduce the number of outputs in the\n// GPU, the values can easily be retrieved from the indices using a gather\n// op.\nexport class SwapProgram {\n  /**\n   * @param shape desired output shape (can be larger than input shape, output\n   *                                    will be padded with -Infinity)\n   */\n  constructor(shape) {\n    this.variableNames = ['x', 'indices'];\n    // |n| Size of the original input of TopK.\n    // |firstPass|indicates if this is the first time swap is being used which\n    // means no indices input containing the top K is present yet.\n    // |inc| Swaps pairs of indices (0, inc), (1, inc + 1), (2, inc + 2) ...\n    this.customUniforms = [{\n      name: 'n',\n      type: 'int'\n    }, {\n      name: 'firstPass',\n      type: 'int'\n    }, {\n      name: 'negativeInf',\n      type: 'float'\n    }, {\n      name: 'dir',\n      type: 'int'\n    }, {\n      name: 'inc',\n      type: 'int'\n    }];\n    this.outputShape = shape;\n    this.userCode = `\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     `;\n  }\n}\nexport class MergeProgram {\n  /**\n   * @param shape desired output shape (must be half of the input size)\n   */\n  constructor(shape) {\n    this.variableNames = ['x', 'indices'];\n    // |n| Size of the original input of TopK\n    // |firstPass| indicates if this is the first time swap is being used which\n    // means no indices input containing the top K is present yet.\n    // |k| Top k elements desired\n    this.customUniforms = [{\n      name: 'n',\n      type: 'int'\n    }, {\n      name: 'firstPass',\n      type: 'int'\n    }, {\n      name: 'k',\n      type: 'int'\n    }];\n    this.outputShape = shape;\n    this.userCode = `\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, TopK, util } from '@tensorflow/tfjs-core';\nimport { topKImplCPU } from '../kernel_utils/shared';\nimport { MergeProgram, SwapProgram } from '../top_k_gpu';\nimport { fill } from './Fill';\nimport { gatherV2 } from './GatherV2';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nfunction disposeIntermediateTensorInfoOrNull(backend, tensorInfo) {\n  if (tensorInfo !== null) {\n    backend.disposeIntermediateTensorInfo(tensorInfo);\n  }\n}\nfunction roundUpToPow2(num) {\n  let pow2 = 1;\n  while (pow2 < num) {\n    pow2 *= 2;\n  }\n  return pow2;\n}\n// Based on Algorithm 2 of Bitonic Top K, ref:\n// https://anilshanbhag.in/static/papers/gputopk_sigmod18.pdf\nexport function topK(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    k,\n    sorted\n  } = attrs;\n  // Empirically determined constant used to determine last dim threshold for\n  // handing off execution to the CPU.\n  const TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD');\n  // Empirically determined constant used to determine k threshold for handing\n  // off execution to the CPU.\n  const TOPK_K_CPU_HANDOFF_THRESHOLD = env().getNumber('TOPK_K_CPU_HANDOFF_THRESHOLD');\n  const xShape = x.shape;\n  const lastDim = xShape[xShape.length - 1];\n  if (backend.shouldExecuteOnCPU([x]) || lastDim < TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD || k > TOPK_K_CPU_HANDOFF_THRESHOLD) {\n    const xVals = backend.readSync(x.dataId);\n    const [allTopKVals, allTopKIndices] = topKImplCPU(xVals, xShape, x.dtype, k, sorted);\n    return [backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values), backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)];\n  }\n  if (k === 0) {\n    xShape[xShape.length - 1] = 0;\n    return [backend.makeTensorInfo(xShape, x.dtype, []), backend.makeTensorInfo(xShape, 'int32', [])];\n  }\n  if (lastDim === 1 /* firstPass */) {\n    return [x, fill({\n      attrs: {\n        shape: xShape,\n        dtype: 'int32',\n        value: 0\n      },\n      backend\n    })];\n  }\n  // Eagerly unpack x input since it is passed in to all the shaders which\n  // require unpacked inputs.\n  const xtexData = backend.texData.get(x.dataId);\n  const xIsPacked = xtexData !== null && xtexData.isPacked;\n  const xUnPacked = xIsPacked ? backend.unpackTensor(x) : x;\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const xSize = util.sizeFromShape(xShape);\n  const batch = xSize / lastDim;\n  const x2D = reshape({\n    inputs: {\n      x: xUnPacked\n    },\n    attrs: {\n      shape: [batch, lastDim]\n    },\n    backend\n  });\n  if (xIsPacked) {\n    disposeIntermediateTensorInfoOrNull(backend, xUnPacked);\n  }\n  const kPow2 = roundUpToPow2(k);\n  const lastDimPow2 = roundUpToPow2(lastDim);\n  // Only the indices containing the top K are kept at every step to reduce\n  // number of outputs in the GPU algorithms, so once the final set of indices\n  // is computed then gather is used to grab the corresponding values\n  // from the original input.\n  let indices = null;\n  // GPU algorithm always takes in an indices input but this input is not used\n  // on the first run of a GPU algorithm, therefore if indices is null we simply\n  // pass in x2D instead of it but the value will not actually be used\n  const getInputs = () => indices === null ? [x2D, x2D] : [x2D, indices];\n  const runSwap = (dir, inc, shape) => {\n    const inputs = getInputs();\n    const program = new SwapProgram(shape);\n    const fistPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [fistPass], [Number.NEGATIVE_INFINITY], [dir], [inc]];\n    const prevIndices = indices;\n    indices = backend.runWebGLProgram(program, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  };\n  // Step 1: local sort\n  for (let len = 1; len < kPow2; len *= 2) {\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, [batch, lastDimPow2]);\n    }\n  }\n  // Step 2: merge\n  for (let indicesSize = lastDimPow2; indicesSize > kPow2; indicesSize /= 2) {\n    const inputs = getInputs();\n    const mergeProgram = new MergeProgram([batch, indicesSize / 2]);\n    const firstPass = indices === null ? 1 : 0;\n    const customValues = [[lastDim], [firstPass], [kPow2]];\n    const prevIndices = indices;\n    indices = backend.runWebGLProgram(mergeProgram, inputs, 'int32', customValues);\n    disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n    // Step 3: rebuild\n    const len = kPow2 / 2;\n    const dir = len * 2;\n    for (let inc = len; inc >= 1; inc /= 2) {\n      runSwap(dir, inc, indices.shape);\n    }\n  }\n  // Keep only the requested top K results instead of kPow2\n  let prevIndices = indices;\n  indices = slice({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      begin: 0,\n      size: [batch, k]\n    }\n  });\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  // Gather values on last dimension\n  let values = gatherV2({\n    inputs: {\n      x: x2D,\n      indices\n    },\n    backend,\n    attrs: {\n      axis: 1,\n      batchDims: 1\n    }\n  });\n  disposeIntermediateTensorInfoOrNull(backend, x2D);\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const newShape = xShape.slice(0, -1);\n  newShape.push(k);\n  prevIndices = indices;\n  indices = reshape({\n    inputs: {\n      x: indices\n    },\n    attrs: {\n      shape: newShape\n    },\n    backend\n  });\n  disposeIntermediateTensorInfoOrNull(backend, prevIndices);\n  const prevValues = values;\n  values = reshape({\n    inputs: {\n      x: values\n    },\n    attrs: {\n      shape: newShape\n    },\n    backend\n  });\n  disposeIntermediateTensorInfoOrNull(backend, prevValues);\n  return [values, indices];\n}\nexport const topKConfig = {\n  kernelName: TopK,\n  backendName: 'webgl',\n  kernelFunc: topK\n};\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class TransformProgram {\n  constructor(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape) {\n    this.variableNames = ['Image', 'Transforms'];\n    this.outputShape = outShape;\n    const interpolationModeId = interpolation === 'nearest' ? 1 : 2;\n    let fillModeId;\n    switch (fillMode) {\n      case 'constant':\n        fillModeId = 1;\n        break;\n      case 'reflect':\n        fillModeId = 2;\n        break;\n      case 'wrap':\n        fillModeId = 3;\n        break;\n      case 'nearest':\n        fillModeId = 4;\n        break;\n      default:\n        fillModeId = 1;\n        break;\n    }\n    this.userCode = `\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${fillModeId} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${fillModeId} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${imageHeight} && 0 <= coordX && coordX < ${imageWidth}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${fillValue});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${fillValue});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${imageWidth}));\n                float mapY = mapCoord(inY, float(${imageHeight}));\n\n                if (${interpolationModeId} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `;\n  }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transform } from '@tensorflow/tfjs-core';\nimport { TransformProgram } from '../transform_gpu';\nexport function transform(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    image,\n    transforms\n  } = inputs;\n  const {\n    interpolation,\n    fillMode,\n    fillValue,\n    outputShape\n  } = attrs;\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n  const program = new TransformProgram(imageHeight, imageWidth, interpolation, fillMode, fillValue, outShape);\n  return backend.runWebGLProgram(program, [image, transforms], 'float32');\n}\nexport const transformConfig = {\n  kernelName: Transform,\n  backendName: 'webgl',\n  kernelFunc: transform\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unique } from '@tensorflow/tfjs-core';\nimport { uniqueImplCPU } from '../kernel_utils/shared';\nimport { assertNotComplex } from '../webgl_util';\nexport function unique(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    axis\n  } = attrs;\n  const {\n    x\n  } = inputs;\n  assertNotComplex(x, 'unique');\n  // For now, always forward calculation to the CPU backend.\n  console.warn('WARNING: ', 'UI might be locked temporarily as data is being downloaded');\n  const values = backend.readSync(x.dataId);\n  const {\n    outputValues,\n    outputShape,\n    indices\n  } = uniqueImplCPU(values, axis, x.shape, x.dtype);\n  return [backend.makeTensorInfo(outputShape, x.dtype, outputValues), backend.makeTensorInfo([indices.length], 'int32', indices)];\n}\nexport const uniqueConfig = {\n  kernelName: Unique,\n  backendName: 'webgl',\n  kernelFunc: unique\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function unpack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    value\n  } = inputs;\n  let {\n    axis\n  } = attrs;\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n  const x = value;\n  const xRank = x.shape.length;\n  const num = value.shape[axis];\n  const outShape = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n  const toDispose = [];\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        begin,\n        size\n      }\n    });\n    const reshaped = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    res[i] = reshaped;\n    toDispose.push(sliced);\n  }\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\nexport const unpackConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack\n};\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class SegmentOpProgram {\n  constructor(segOpInfo, segOpType) {\n    this.variableNames = ['x', 'segmentIds'];\n    const windowSize = segOpInfo.windowSize;\n    const batchSize = segOpInfo.batchSize;\n    const inSize = segOpInfo.inSize;\n    const numSegments = segOpInfo.numSegments;\n    const outSize = numSegments * Math.ceil(inSize / windowSize);\n    this.outputShape = [batchSize, outSize];\n    const initializationValue = '0.0';\n    const returnValue = `sumValue`;\n    const windowSizeNearestVec4 = Math.floor(windowSize / 4) * 4;\n    const windowSizeVec4Remainder = windowSize % 4;\n    const updateSnippet = `\n        sumValue += dot(values, segFilter);\n    `;\n    let checkValueOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkValueOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return initializationValue;\n        }\n      `;\n    }\n    let checkSegmentIdOutOfBounds = '';\n    if (inSize % windowSize > 0) {\n      checkSegmentIdOutOfBounds = `\n        if (inIdx < 0 || inIdx >= ${inSize}) {\n          return -1.0;\n        }\n      `;\n    }\n    this.userCode = `\n      const float initializationValue = ${initializationValue};\n\n      float getValue(int batch, int inIdx) {\n        ${checkValueOutOfBounds}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${checkSegmentIdOutOfBounds}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${numSegments})) * float(${windowSize}));\n        int currentSeg = int(mod(float(outIdx), float(${numSegments})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${windowSizeNearestVec4}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${updateSnippet}\n        }\n\n        int inIdx = inOffset + ${windowSizeNearestVec4};\n        if (${windowSizeVec4Remainder === 1}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 2}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${updateSnippet}\n        } else if (${windowSizeVec4Remainder === 3}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${updateSnippet}\n        }\n        setOutput(${returnValue});\n      }\n    `;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { SegmentOpProgram } from '../segment_gpu';\nimport { range } from './Range';\nimport { reshape } from './Reshape';\nimport { tile } from './Tile';\nimport { transpose } from './Transpose';\nexport function unsortedSegmentSum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    segmentIds\n  } = inputs;\n  const {\n    numSegments\n  } = attrs;\n  const xRank = x.shape.length;\n  const toDispose = [];\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n  const outShape = backend_util.segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D = reshape({\n    inputs: {\n      x: permutedX\n    },\n    backend,\n    attrs: {\n      shape: [-1, inSize]\n    }\n  });\n  toDispose.push(a2D);\n  const outputDType = sumOutType(x.dtype);\n  const segOpCompute = (x, segOpType, segmentIds, dtype, numSegments) => {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize = backend_util.segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n    const segOpInfo = {\n      windowSize,\n      inSize,\n      batchSize,\n      numSegments\n    };\n    const program = new SegmentOpProgram(segOpInfo, segOpType);\n    const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n    toDispose.push(output);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === numSegments) {\n      return output;\n    }\n    const rangeInfo = range({\n      backend,\n      attrs: {\n        start: 0,\n        stop: numSegments,\n        step: 1,\n        dtype: 'float32'\n      }\n    });\n    const tileInfo = tile({\n      inputs: {\n        x: rangeInfo\n      },\n      backend,\n      attrs: {\n        reps: [inSize / windowSize]\n      }\n    });\n    toDispose.push(rangeInfo);\n    toDispose.push(tileInfo);\n    const result = segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n    return result;\n  };\n  const segOpResult = segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n  const reshaped = reshape({\n    inputs: {\n      x: segOpResult\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        perm\n      }\n    });\n  }\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const unsortedSegmentSumConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum\n};\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { registerKernel } from '@tensorflow/tfjs-core';\nimport { _fusedMatMulConfig } from './kernels/_FusedMatMul';\nimport { absConfig } from './kernels/Abs';\nimport { acosConfig } from './kernels/Acos';\nimport { acoshConfig } from './kernels/Acosh';\nimport { addConfig } from './kernels/Add';\nimport { addNConfig } from './kernels/AddN';\nimport { allConfig } from './kernels/All';\nimport { anyConfig } from './kernels/Any';\nimport { argMaxConfig } from './kernels/ArgMax';\nimport { argMinConfig } from './kernels/ArgMin';\nimport { asinConfig } from './kernels/Asin';\nimport { asinhConfig } from './kernels/Asinh';\nimport { atanConfig } from './kernels/Atan';\nimport { atan2Config } from './kernels/Atan2';\nimport { atanhConfig } from './kernels/Atanh';\nimport { avgPoolConfig } from './kernels/AvgPool';\nimport { avgPool3DConfig } from './kernels/AvgPool3D';\nimport { avgPool3DGradConfig } from './kernels/AvgPool3DGrad';\nimport { avgPoolGradConfig } from './kernels/AvgPoolGrad';\nimport { batchMatMulConfig } from './kernels/BatchMatMul';\nimport { batchNormConfig } from './kernels/BatchNorm';\nimport { batchToSpaceNDConfig } from './kernels/BatchToSpaceND';\nimport { bincountConfig } from './kernels/Bincount';\nimport { bitwiseAndConfig } from './kernels/BitwiseAnd';\nimport { broadcastArgsConfig } from './kernels/BroadcastArgs';\nimport { castConfig } from './kernels/Cast';\nimport { ceilConfig } from './kernels/Ceil';\nimport { clipByValueConfig } from './kernels/ClipByValue';\nimport { complexConfig } from './kernels/Complex';\nimport { complexAbsConfig } from './kernels/ComplexAbs';\nimport { concatConfig } from './kernels/Concat';\nimport { conv2DConfig } from './kernels/Conv2D';\nimport { conv2DBackpropFilterConfig } from './kernels/Conv2DBackpropFilter';\nimport { conv2DBackpropInputConfig } from './kernels/Conv2DBackpropInput';\nimport { conv3DConfig } from './kernels/Conv3D';\nimport { conv3DBackpropFilterV2Config } from './kernels/Conv3DBackpropFilterV2';\nimport { conv3DBackpropInputConfig } from './kernels/Conv3DBackpropInputV2';\nimport { cosConfig } from './kernels/Cos';\nimport { coshConfig } from './kernels/Cosh';\nimport { cropAndResizeConfig } from './kernels/CropAndResize';\nimport { cumprodConfig } from './kernels/Cumprod';\nimport { cumsumConfig } from './kernels/Cumsum';\nimport { denseBincountConfig } from './kernels/DenseBincount';\nimport { depthToSpaceConfig } from './kernels/DepthToSpace';\nimport { depthwiseConv2dNativeConfig } from './kernels/DepthwiseConv2dNative';\nimport { depthwiseConv2dNativeBackpropFilterConfig } from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport { depthwiseConv2dNativeBackpropInputConfig } from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport { diagConfig } from './kernels/Diag';\nimport { dilation2DConfig } from './kernels/Dilation2D';\nimport { einsumConfig } from './kernels/Einsum';\nimport { eluConfig } from './kernels/Elu';\nimport { eluGradConfig } from './kernels/EluGrad';\nimport { equalConfig } from './kernels/Equal';\nimport { erfConfig } from './kernels/Erf';\nimport { expConfig } from './kernels/Exp';\nimport { expandDimsConfig } from './kernels/ExpandDims';\nimport { expm1Config } from './kernels/Expm1';\nimport { fftConfig } from './kernels/FFT';\nimport { fillConfig } from './kernels/Fill';\nimport { flipLeftRightConfig } from './kernels/FlipLeftRight';\nimport { floorConfig } from './kernels/Floor';\nimport { floorDivConfig } from './kernels/FloorDiv';\nimport { fromPixelsConfig } from './kernels/FromPixels';\nimport { fusedConv2DConfig } from './kernels/FusedConv2D';\nimport { fusedDepthwiseConv2DConfig } from './kernels/FusedDepthwiseConv2D';\nimport { gatherNdConfig } from './kernels/GatherNd';\nimport { gatherV2Config } from './kernels/GatherV2';\nimport { greaterConfig } from './kernels/Greater';\nimport { greaterEqualConfig } from './kernels/GreaterEqual';\nimport { identityConfig } from './kernels/Identity';\nimport { ifftConfig } from './kernels/IFFT';\nimport { imagConfig } from './kernels/Imag';\nimport { isFiniteConfig } from './kernels/IsFinite';\nimport { isInfConfig } from './kernels/IsInf';\nimport { isNaNConfig } from './kernels/IsNaN';\nimport { leakyReluConfig } from './kernels/LeakyRelu';\nimport { lessConfig } from './kernels/Less';\nimport { lessEqualConfig } from './kernels/LessEqual';\nimport { linSpaceConfig } from './kernels/LinSpace';\nimport { logConfig } from './kernels/Log';\nimport { log1pConfig } from './kernels/Log1p';\nimport { logicalAndConfig } from './kernels/LogicalAnd';\nimport { logicalNotConfig } from './kernels/LogicalNot';\nimport { logicalOrConfig } from './kernels/LogicalOr';\nimport { LRNConfig } from './kernels/LRN';\nimport { LRNGradConfig } from './kernels/LRNGrad';\nimport { maxConfig } from './kernels/Max';\nimport { maximumConfig } from './kernels/Maximum';\nimport { maxPoolConfig } from './kernels/MaxPool';\nimport { maxPool3DConfig } from './kernels/MaxPool3D';\nimport { maxPool3DGradConfig } from './kernels/MaxPool3DGrad';\nimport { maxPoolGradConfig } from './kernels/MaxPoolGrad';\nimport { maxPoolWithArgmaxConfig } from './kernels/MaxPoolWithArgmax';\nimport { meanConfig } from './kernels/Mean';\nimport { minConfig } from './kernels/Min';\nimport { minimumConfig } from './kernels/Minimum';\nimport { mirrorPadConfig } from './kernels/MirrorPad';\nimport { modConfig } from './kernels/Mod';\nimport { multinomialConfig } from './kernels/Multinomial';\nimport { multiplyConfig } from './kernels/Multiply';\nimport { negConfig } from './kernels/Neg';\nimport { nonMaxSuppressionV3Config } from './kernels/NonMaxSuppressionV3';\nimport { nonMaxSuppressionV4Config } from './kernels/NonMaxSuppressionV4';\nimport { nonMaxSuppressionV5Config } from './kernels/NonMaxSuppressionV5';\nimport { notEqualConfig } from './kernels/NotEqual';\nimport { oneHotConfig } from './kernels/OneHot';\nimport { onesLikeConfig } from './kernels/OnesLike';\nimport { packConfig } from './kernels/Pack';\nimport { padV2Config } from './kernels/PadV2';\nimport { powConfig } from './kernels/Pow';\nimport { preluConfig } from './kernels/Prelu';\nimport { prodConfig } from './kernels/Prod';\nimport { raggedGatherConfig } from './kernels/RaggedGather';\nimport { raggedRangeConfig } from './kernels/RaggedRange';\nimport { raggedTensorToTensorConfig } from './kernels/RaggedTensorToTensor';\nimport { rangeConfig } from './kernels/Range';\nimport { realConfig } from './kernels/Real';\nimport { realDivConfig } from './kernels/RealDiv';\nimport { reciprocalConfig } from './kernels/Reciprocal';\nimport { reluConfig } from './kernels/Relu';\nimport { relu6Config } from './kernels/Relu6';\nimport { reshapeConfig } from './kernels/Reshape';\nimport { resizeBilinearConfig } from './kernels/ResizeBilinear';\nimport { resizeBilinearGradConfig } from './kernels/ResizeBilinearGrad';\nimport { resizeNearestNeighborConfig } from './kernels/ResizeNearestNeighbor';\nimport { resizeNearestNeighborGradConfig } from './kernels/ResizeNearestNeighborGrad';\nimport { reverseConfig } from './kernels/Reverse';\nimport { rotateWithOffsetConfig } from './kernels/RotateWithOffset';\nimport { roundConfig } from './kernels/Round';\nimport { rsqrtConfig } from './kernels/Rsqrt';\nimport { scatterNdConfig } from './kernels/ScatterNd';\nimport { searchSortedConfig } from './kernels/SearchSorted';\nimport { selectConfig } from './kernels/Select';\nimport { seluConfig } from './kernels/Selu';\nimport { sigmoidConfig } from './kernels/Sigmoid';\nimport { signConfig } from './kernels/Sign';\nimport { sinConfig } from './kernels/Sin';\nimport { sinhConfig } from './kernels/Sinh';\nimport { sliceConfig } from './kernels/Slice';\nimport { softmaxConfig } from './kernels/Softmax';\nimport { softplusConfig } from './kernels/Softplus';\nimport { spaceToBatchNDConfig } from './kernels/SpaceToBatchND';\nimport { sparseFillEmptyRowsConfig } from './kernels/SparseFillEmptyRows';\nimport { sparseReshapeConfig } from './kernels/SparseReshape';\nimport { sparseSegmentMeanConfig } from './kernels/SparseSegmentMean';\nimport { sparseSegmentSumConfig } from './kernels/SparseSegmentSum';\nimport { sparseToDenseConfig } from './kernels/SparseToDense';\nimport { splitVConfig } from './kernels/SplitV';\nimport { sqrtConfig } from './kernels/Sqrt';\nimport { squareConfig } from './kernels/Square';\nimport { squaredDifferenceConfig } from './kernels/SquaredDifference';\nimport { staticRegexReplaceConfig } from './kernels/StaticRegexReplace';\nimport { stepConfig } from './kernels/Step';\nimport { stridedSliceConfig } from './kernels/StridedSlice';\nimport { stringNGramsConfig } from './kernels/StringNGrams';\nimport { stringSplitConfig } from './kernels/StringSplit';\nimport { stringToHashBucketFastConfig } from './kernels/StringToHashBucketFast';\nimport { subConfig } from './kernels/Sub';\nimport { sumConfig } from './kernels/Sum';\nimport { tanConfig } from './kernels/Tan';\nimport { tanhConfig } from './kernels/Tanh';\nimport { tensorScatterUpdateConfig } from './kernels/TensorScatterUpdate';\nimport { tileConfig } from './kernels/Tile';\nimport { topKConfig } from './kernels/TopK';\nimport { transformConfig } from './kernels/Transform';\nimport { transposeConfig } from './kernels/Transpose';\nimport { uniqueConfig } from './kernels/Unique';\nimport { unpackConfig } from './kernels/Unpack';\nimport { unsortedSegmentSumConfig } from './kernels/UnsortedSegmentSum';\nimport { zerosLikeConfig } from './kernels/ZerosLike';\n// List all kernel configs here\nconst kernelConfigs = [_fusedMatMulConfig, absConfig, acosConfig, acoshConfig, addConfig, addNConfig, allConfig, anyConfig, argMaxConfig, argMinConfig, asinConfig, asinhConfig, atanConfig, atan2Config, atanhConfig, avgPoolConfig, avgPool3DConfig, avgPool3DGradConfig, avgPoolGradConfig, batchMatMulConfig, batchNormConfig, batchToSpaceNDConfig, bincountConfig, bitwiseAndConfig, broadcastArgsConfig, castConfig, ceilConfig, clipByValueConfig, complexConfig, complexAbsConfig, concatConfig, conv2DConfig, conv2DBackpropFilterConfig, conv2DBackpropInputConfig, conv3DConfig, conv3DBackpropFilterV2Config, conv3DBackpropInputConfig, cosConfig, coshConfig, cropAndResizeConfig, cumprodConfig, cumsumConfig, denseBincountConfig, depthToSpaceConfig, depthwiseConv2dNativeConfig, depthwiseConv2dNativeBackpropFilterConfig, depthwiseConv2dNativeBackpropInputConfig, diagConfig, dilation2DConfig, einsumConfig, eluConfig, eluGradConfig, equalConfig, erfConfig, expConfig, expandDimsConfig, expm1Config, fftConfig, fillConfig, flipLeftRightConfig, floorConfig, floorDivConfig, fromPixelsConfig, fusedConv2DConfig, fusedDepthwiseConv2DConfig, gatherNdConfig, gatherV2Config, greaterConfig, greaterEqualConfig, identityConfig, ifftConfig, imagConfig, isFiniteConfig, isInfConfig, isNaNConfig, leakyReluConfig, lessConfig, lessEqualConfig, linSpaceConfig, logConfig, log1pConfig, logicalAndConfig, logicalNotConfig, logicalOrConfig, LRNConfig, LRNGradConfig, maxConfig, maximumConfig, maxPoolConfig, maxPool3DConfig, maxPool3DGradConfig, maxPoolGradConfig, maxPoolWithArgmaxConfig, meanConfig, minConfig, minimumConfig, mirrorPadConfig, modConfig, multinomialConfig, multiplyConfig, negConfig, nonMaxSuppressionV3Config, nonMaxSuppressionV4Config, nonMaxSuppressionV5Config, notEqualConfig, oneHotConfig, onesLikeConfig, packConfig, padV2Config, powConfig, preluConfig, prodConfig, raggedGatherConfig, raggedRangeConfig, raggedTensorToTensorConfig, rangeConfig, realConfig, realDivConfig, reciprocalConfig, reluConfig, relu6Config, reshapeConfig, resizeBilinearConfig, resizeBilinearGradConfig, resizeNearestNeighborConfig, resizeNearestNeighborGradConfig, reverseConfig, rotateWithOffsetConfig, roundConfig, rsqrtConfig, scatterNdConfig, searchSortedConfig, selectConfig, seluConfig, sigmoidConfig, signConfig, sinConfig, sinhConfig, sliceConfig, softmaxConfig, softplusConfig, spaceToBatchNDConfig, sparseFillEmptyRowsConfig, sparseReshapeConfig, sparseSegmentMeanConfig, sparseSegmentSumConfig, sparseToDenseConfig, splitVConfig, sqrtConfig, squareConfig, squaredDifferenceConfig, staticRegexReplaceConfig, stepConfig, stridedSliceConfig, stringNGramsConfig, stringSplitConfig, stringToHashBucketFastConfig, subConfig, sumConfig, tanConfig, tanhConfig, tensorScatterUpdateConfig, tileConfig, topKConfig, transformConfig, transposeConfig, uniqueConfig, unpackConfig, unsortedSegmentSumConfig, zerosLikeConfig];\nfor (const kernelConfig of kernelConfigs) {\n  registerKernel(kernelConfig);\n}\n"],
  "mappings": "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",
  "names": ["PackingScheme", "TextureUsage", "PhysicalTextureType", "lineNumber", "buffer", "max", "version", "coords", "coordsFromIndexSnippet", "coords", "texNumR", "texNumC", "createVertexShader", "createVertexShader", "buffer", "buffer", "createVertexShader", "ext", "query", "assertNotComplex", "assertNotComplex", "real", "imag", "complex", "zeros", "real", "imag", "real", "zeros", "assertNotComplex", "assertNotComplex", "step", "max", "assertNotComplex", "i", "assertNotComplex", "prod", "assertNotComplex", "slice", "step", "assertNotComplex", "i", "coords", "coords", "newTexture", "LINEAR", "ELU", "RELU", "RELU6", "SIGMOID", "coords", "slice", "subscribers", "buffer", "tmpData", "vals", "CHECK_NAN_SNIPPET", "identity", "identityConfig", "complex", "real", "imag", "identity", "complexConfig", "unaryKernelFunc", "binaryKernelFunc", "real", "imag", "program", "complex", "LINEAR", "RELU", "ELU", "RELU6", "SIGMOID", "multiply", "inputs", "complex", "multiplyConfig", "reshape", "transposeImpl", "transposeImpl", "reshape", "transpose", "transposeImpl", "transposeConfig", "reshape", "transpose", "multiply", "ABS", "abs", "absConfig", "unaryKernelFunc", "unaryKernelFunc", "binaryKernelFunc", "addConfig", "identity", "transpose", "reshape", "transpose", "reshape", "coords", "reshape", "transpose", "transpose", "unaryKernelFunc", "unaryKernelFunc", "unaryKernelFunc", "CHECK_NAN_SNIPPET", "binaryKernelFunc", "unaryKernelFunc", "compareOp", "identity", "coords", "slice", "sliceConfig", "prod", "reshape", "transpose", "slice", "bitwiseAnd", "bitwiseAndConfig", "notEqual", "binaryKernelFunc", "notEqualConfig", "real", "identity", "realConfig", "cast", "identity", "complex", "real", "notEqual", "castConfig", "ceil", "unaryKernelFunc", "ceilConfig", "coords", "shift", "identity", "concatImpl", "real", "result", "complex", "tensors2D", "reshape", "outShape", "program", "identity", "concatImpl", "reshape", "identity", "reshape", "unaryKernelFunc", "unaryKernelFunc", "CumOpType", "reverse", "getCoords", "reverse", "transpose", "identity", "reverse", "reverse", "reshape", "reshape", "transpose", "reshape", "multiply", "ELU", "unaryKernelFunc", "equal", "binaryKernelFunc", "equalConfig", "unaryKernelFunc", "exp", "unaryKernelFunc", "expConfig", "reshape", "expm1", "unaryKernelFunc", "expm1Config", "reshape", "complex", "floor", "unaryKernelFunc", "floorConfig", "floorDiv", "binaryKernelFunc", "floorDivConfig", "inputs", "dataFormat", "reshape", "reshape", "getSourceCoords", "reshape", "greater", "binaryKernelFunc", "greaterConfig", "greaterEqual", "binaryKernelFunc", "greaterEqualConfig", "unaryKernelFunc", "unaryKernelFunc", "unaryKernelFunc", "less", "binaryKernelFunc", "lessConfig", "lessEqual", "binaryKernelFunc", "lessEqualConfig", "log", "unaryKernelFunc", "logConfig", "unaryKernelFunc", "binaryKernelFunc", "unaryKernelFunc", "binaryKernelFunc", "maxImpl", "reshape", "transposeImpl", "maxImpl", "CHECK_NAN_SNIPPET", "maximum", "binaryKernelFunc", "maximumConfig", "identity", "reshape", "transposeImpl", "transpose", "reshape", "CHECK_NAN_SNIPPET", "minimum", "binaryKernelFunc", "minimumConfig", "coords", "binaryKernelFunc", "binaryKernelFunc", "sub", "binaryKernelFunc", "subConfig", "reshape", "sub", "exp", "neg", "negConfig", "reshape", "real", "complex", "real", "complex", "coords", "binaryKernelFunc", "prod", "transpose", "reshape", "prodConfig", "step", "unaryKernelFunc", "RELU", "unaryKernelFunc", "RELU6", "unaryKernelFunc", "channels", "identity", "unaryKernelFunc", "rsqrt", "unaryKernelFunc", "rsqrtConfig", "reshape", "select", "unaryKernelFunc", "SIGMOID", "sigmoid", "unaryKernelFunc", "sigmoidConfig", "unaryKernelFunc", "unaryKernelFunc", "unaryKernelFunc", "unaryKernelFunc", "prod", "reshape", "transpose", "reshape", "slice", "sqrt", "unaryKernelFunc", "sqrtConfig", "unaryKernelFunc", "squaredDifference", "binaryKernelFunc", "squaredDifferenceConfig", "staticRegexReplace", "staticRegexReplaceConfig", "reshape", "slice", "unaryKernelFunc", "unaryKernelFunc", "reshape", "getSourceCoords", "reshape", "inputs", "prevIndices", "slice", "slice", "reshape", "transpose", "reshape", "x", "segmentIds", "numSegments", "inSize", "result", "absConfig", "addConfig", "bitwiseAndConfig", "castConfig", "ceilConfig", "complexConfig", "equalConfig", "expConfig", "expm1Config", "floorConfig", "floorDivConfig", "greaterConfig", "greaterEqualConfig", "identityConfig", "lessConfig", "lessEqualConfig", "logConfig", "maximumConfig", "minimumConfig", "multiplyConfig", "negConfig", "notEqualConfig", "prodConfig", "realConfig", "rsqrtConfig", "sigmoidConfig", "sliceConfig", "sqrtConfig", "squaredDifferenceConfig", "staticRegexReplaceConfig", "subConfig", "transposeConfig"]
}

{
  "version": 3,
  "sources": ["../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/hash_table.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/sparse.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/string.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js", "../../../../../../node_modules/@tensorflow/tfjs-core/dist/ops/ops_for_converter.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/executor/hash_table.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/hash_table_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/ragged_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/sparse_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/string_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/version.js", "../../../../../../node_modules/@tensorflow/tfjs-converter/dist/flags.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst CUSTOM_OPS = {};\n/**\n * Register an Op for graph model executor. This allows you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object are based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function registerOp(name, opFunc) {\n  const opMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n  CUSTOM_OPS[name] = opMapper;\n}\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function getRegisteredOp(name) {\n  return CUSTOM_OPS[name];\n}\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function deregisterOp(name) {\n  delete CUSTOM_OPS[name];\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n/** DataType enum. */\nexport var DataType;\n(function (DataType) {\n  // These properties must be quoted since they are used by parseDtypeParam\n  // in tfjs-converter/src/operations/operation_mapper.ts to look up dtypes\n  // by string name. If they are not quoted, Closure will mangle their names.\n  // Not a legal value for DataType.  Used to indicate a DataType field\n  // has not been set.\n  DataType[DataType[\"DT_INVALID\"] = 0] = \"DT_INVALID\";\n  // Data types that all computation devices are expected to be\n  // capable to support.\n  DataType[DataType[\"DT_FLOAT\"] = 1] = \"DT_FLOAT\";\n  DataType[DataType[\"DT_DOUBLE\"] = 2] = \"DT_DOUBLE\";\n  DataType[DataType[\"DT_INT32\"] = 3] = \"DT_INT32\";\n  DataType[DataType[\"DT_UINT8\"] = 4] = \"DT_UINT8\";\n  DataType[DataType[\"DT_INT16\"] = 5] = \"DT_INT16\";\n  DataType[DataType[\"DT_INT8\"] = 6] = \"DT_INT8\";\n  DataType[DataType[\"DT_STRING\"] = 7] = \"DT_STRING\";\n  DataType[DataType[\"DT_COMPLEX64\"] = 8] = \"DT_COMPLEX64\";\n  DataType[DataType[\"DT_INT64\"] = 9] = \"DT_INT64\";\n  DataType[DataType[\"DT_BOOL\"] = 10] = \"DT_BOOL\";\n  DataType[DataType[\"DT_QINT8\"] = 11] = \"DT_QINT8\";\n  DataType[DataType[\"DT_QUINT8\"] = 12] = \"DT_QUINT8\";\n  DataType[DataType[\"DT_QINT32\"] = 13] = \"DT_QINT32\";\n  DataType[DataType[\"DT_BFLOAT16\"] = 14] = \"DT_BFLOAT16\";\n  DataType[DataType[\"DT_QINT16\"] = 15] = \"DT_QINT16\";\n  DataType[DataType[\"DT_QUINT16\"] = 16] = \"DT_QUINT16\";\n  DataType[DataType[\"DT_UINT16\"] = 17] = \"DT_UINT16\";\n  DataType[DataType[\"DT_COMPLEX128\"] = 18] = \"DT_COMPLEX128\";\n  DataType[DataType[\"DT_HALF\"] = 19] = \"DT_HALF\";\n  DataType[DataType[\"DT_RESOURCE\"] = 20] = \"DT_RESOURCE\";\n  DataType[DataType[\"DT_VARIANT\"] = 21] = \"DT_VARIANT\";\n  DataType[DataType[\"DT_UINT32\"] = 22] = \"DT_UINT32\";\n  DataType[DataType[\"DT_UINT64\"] = 23] = \"DT_UINT64\";\n  // Do not use!  These are only for parameters.  Every enum above\n  // should have a corresponding value below (verified by types_test).\n  DataType[DataType[\"DT_FLOAT_REF\"] = 101] = \"DT_FLOAT_REF\";\n  DataType[DataType[\"DT_DOUBLE_REF\"] = 102] = \"DT_DOUBLE_REF\";\n  DataType[DataType[\"DT_INT32_REF\"] = 103] = \"DT_INT32_REF\";\n  DataType[DataType[\"DT_UINT8_REF\"] = 104] = \"DT_UINT8_REF\";\n  DataType[DataType[\"DT_INT16_REF\"] = 105] = \"DT_INT16_REF\";\n  DataType[DataType[\"DT_INT8_REF\"] = 106] = \"DT_INT8_REF\";\n  DataType[DataType[\"DT_STRING_REF\"] = 107] = \"DT_STRING_REF\";\n  DataType[DataType[\"DT_COMPLEX64_REF\"] = 108] = \"DT_COMPLEX64_REF\";\n  DataType[DataType[\"DT_INT64_REF\"] = 109] = \"DT_INT64_REF\";\n  DataType[DataType[\"DT_BOOL_REF\"] = 110] = \"DT_BOOL_REF\";\n  DataType[DataType[\"DT_QINT8_REF\"] = 111] = \"DT_QINT8_REF\";\n  DataType[DataType[\"DT_QUINT8_REF\"] = 112] = \"DT_QUINT8_REF\";\n  DataType[DataType[\"DT_QINT32_REF\"] = 113] = \"DT_QINT32_REF\";\n  DataType[DataType[\"DT_BFLOAT16_REF\"] = 114] = \"DT_BFLOAT16_REF\";\n  DataType[DataType[\"DT_QINT16_REF\"] = 115] = \"DT_QINT16_REF\";\n  DataType[DataType[\"DT_QUINT16_REF\"] = 116] = \"DT_QUINT16_REF\";\n  DataType[DataType[\"DT_UINT16_REF\"] = 117] = \"DT_UINT16_REF\";\n  DataType[DataType[\"DT_COMPLEX128_REF\"] = 118] = \"DT_COMPLEX128_REF\";\n  DataType[DataType[\"DT_HALF_REF\"] = 119] = \"DT_HALF_REF\";\n  DataType[DataType[\"DT_RESOURCE_REF\"] = 120] = \"DT_RESOURCE_REF\";\n  DataType[DataType[\"DT_VARIANT_REF\"] = 121] = \"DT_VARIANT_REF\";\n  DataType[DataType[\"DT_UINT32_REF\"] = 122] = \"DT_UINT32_REF\";\n  DataType[DataType[\"DT_UINT64_REF\"] = 123] = \"DT_UINT64_REF\";\n})(DataType || (DataType = {}));\nexport var SaverDef;\n(function (SaverDef) {\n  /** CheckpointFormatVersion enum. */\n  let CheckpointFormatVersion;\n  (function (CheckpointFormatVersion) {\n    CheckpointFormatVersion[CheckpointFormatVersion[\"LEGACY\"] = 0] = \"LEGACY\";\n    CheckpointFormatVersion[CheckpointFormatVersion[\"V1\"] = 1] = \"V1\";\n    CheckpointFormatVersion[CheckpointFormatVersion[\"V2\"] = 2] = \"V2\";\n  })(CheckpointFormatVersion = SaverDef.CheckpointFormatVersion || (SaverDef.CheckpointFormatVersion = {}));\n})(SaverDef || (SaverDef = {}));\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { clone, util } from '@tensorflow/tfjs-core';\nexport function getParamValue(paramName, node, tensorMap, context, resourceManager) {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ? undefined : inputParam.inputIndexEnd === undefined ? start + 1 : inputParam.inputIndexEnd;\n    const shiftedStart = start < 0 ? node.inputNames.length + start : start;\n    if (inputParam.type === 'tensor') {\n      return getTensor(node.inputNames[shiftedStart], tensorMap, context, resourceManager);\n    }\n    if (inputParam.type === 'tensors') {\n      // TODO(mattSoulanille): This filters out NoOp nodes during execution, but\n      // these should really never be in the execution graph in the first place.\n      // They're necessary for ordering the graph, but should not be visible\n      // during execution. Perhaps have different sets of children, one for\n      // control dependencies and another for real dependencies.\n      const inputs = node.inputs.slice(start, end);\n      const inputNames = node.inputNames.slice(start, end).filter((_name, index) => {\n        var _a;\n        return ((_a = inputs[index]) === null || _a === void 0 ? void 0 : _a.op) !== 'NoOp';\n      });\n      return inputNames.map(name => getTensor(name, tensorMap, context, resourceManager));\n    }\n    const tensor = getTensor(node.inputNames[shiftedStart], tensorMap, context, resourceManager);\n    const data = tensor.dataSync();\n    return inputParam.type === 'number' ? data[0] : util.toNestedArray(tensor.shape, data);\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function getTensor(name, tensorsMap, context, resourceManager) {\n  const [nodeName, index] = parseNodeName(name, context);\n  if (resourceManager != null) {\n    const tensor = resourceManager.getHashTableHandleByName(nodeName);\n    if (tensor != null) {\n      return tensor;\n    }\n  }\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n  return contextId !== undefined ? tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] : undefined;\n}\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContext(name, tensorsMap, context) {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n/**\n * Returns the node name, outputName and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n * If the input name contains output name i.e. StringSplit:indices:0, it will\n * return ['StringSplit', 0, 'indices'].\n */\nexport function getNodeNameAndIndex(inputName, context) {\n  const [nodeName, index, outputName] = parseNodeName(inputName, context);\n  return [getNodeNameWithContextId(nodeName, context && context.currentContextId), index, outputName];\n}\nfunction getNodeNameWithContextId(name, contextId) {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\nexport function parseNodeName(name, context) {\n  if (name === '') {\n    return ['', 0, undefined];\n  }\n  const isCacheEnabled = context != null && context.parseNodeNameCache != null;\n  if (isCacheEnabled) {\n    const cachedResult = context.parseNodeNameCache.get(name);\n    if (cachedResult != null) {\n      return cachedResult;\n    }\n  }\n  const parts = name.split(':');\n  let result;\n  if (parts.length === 1) {\n    result = [name, 0, undefined];\n  } else {\n    const nodeName = parts[0];\n    const outputName = parts.length === 3 ? parts[1] : undefined;\n    const index = Number(parts[parts.length - 1]);\n    result = [nodeName, index, outputName];\n  }\n  if (isCacheEnabled) {\n    context.parseNodeNameCache.set(name, result);\n  }\n  return result;\n}\nexport function split(arr, size) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\nexport function getPadding(node, tensorMap, context) {\n  let pad = getParamValue('pad', node, tensorMap, context);\n  if (pad === 'explicit') {\n    // This is 1d array, we need to convert it to 2d array\n    pad = getParamValue('explicitPaddings', node, tensorMap, context);\n    const explicitPadding = [[0, 0], [0, 0], [0, 0], [0, 0]];\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = pad[i * 2];\n      explicitPadding[i][1] = pad[i * 2 + 1];\n    }\n    return explicitPadding;\n  }\n  return pad;\n}\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor) {\n  return tensor.kept ? tensor : clone(tensor);\n}\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'Add',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'AddV2',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'AddN',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'end': 0,\n    'name': 'tensors',\n    'type': 'tensors'\n  }]\n}, {\n  'tfOpName': 'BiasAdd',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Sub',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'RealDiv',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Div',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'DivNoNan',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'FloorDiv',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Mul',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Maximum',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Minimum',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Pow',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'SquaredDifference',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Mod',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'FloorMod',\n  'category': 'arithmetic',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'Abs',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Acos',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Asin',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Atan',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Atan2',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'y',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Ceil',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'ClipByValue',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'clipValueMin',\n    'type': 'number'\n  }, {\n    'start': 2,\n    'name': 'clipValueMax',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Complex',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'real',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'imag',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'ComplexAbs',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Cos',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Cosh',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Elu',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Exp',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Floor',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Log',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Imag',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'Tout',\n    'name': 'outputType',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Neg',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Real',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'Tout',\n    'name': 'outputType',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Prelu',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'alpha',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Relu',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Relu6',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Selu',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Sigmoid',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Sin',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Sinh',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Sqrt',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Rsqrt',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Square',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Tan',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Tanh',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Sign',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Round',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Expm1',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Log1p',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Reciprocal',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Softplus',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Asinh',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Acosh',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Atanh',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Erf',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LeakyRelu',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'alpha',\n    'name': 'alpha',\n    'type': 'number',\n    'defaultValue': 0.2\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'IsNan',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'IsFinite',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'IsInf',\n  'category': 'basic_math',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'EmptyTensorList',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'elementShape',\n    'type': 'shape'\n  }, {\n    'start': 1,\n    'name': 'maxNumElements',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'LoopCond',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'pred',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'Switch',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'data',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'pred',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'Merge',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'end': 0,\n    'name': 'tensors',\n    'type': 'tensors'\n  }]\n}, {\n  'tfOpName': 'Enter',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensor',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'frame_name',\n    'name': 'frameName',\n    'type': 'string'\n  }, {\n    'tfName': 'is_constant',\n    'name': 'isConstant',\n    'type': 'bool'\n  }]\n}, {\n  'tfOpName': 'Exit',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensor',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'NextIteration',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensor',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'TensorArrayV3',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'size',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'dtype',\n    'name': 'dtype',\n    'type': 'dtype'\n  }, {\n    'tfName': 'element_shape',\n    'name': 'elementShape',\n    'type': 'shape'\n  }, {\n    'tfName': 'dynamic_size',\n    'name': 'dynamicSize',\n    'type': 'bool'\n  }, {\n    'tfName': 'clear_after_read',\n    'name': 'clearAfterRead',\n    'type': 'bool'\n  }, {\n    'tfName': 'identical_element_shapes',\n    'name': 'identicalElementShapes',\n    'type': 'bool'\n  }, {\n    'tfName': 'tensor_array_name',\n    'name': 'name',\n    'type': 'string'\n  }]\n}, {\n  'tfOpName': 'TensorArrayWriteV3',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorArrayId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'index',\n    'type': 'number'\n  }, {\n    'start': 2,\n    'name': 'tensor',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'flowIn',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'TensorArrayReadV3',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorArrayId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'index',\n    'type': 'number'\n  }, {\n    'start': 2,\n    'name': 'flowIn',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'dtype',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'TensorArrayGatherV3',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorArrayId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'flowIn',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'dtype',\n    'name': 'dtype',\n    'type': 'dtype'\n  }, {\n    'tfName': 'element_shape',\n    'name': 'elementShape',\n    'type': 'shape'\n  }]\n}, {\n  'tfOpName': 'TensorArrayScatterV3',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorArrayId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'tensor',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'flowIn',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorArrayConcatV3',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorArrayId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'flowIn',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'dtype',\n    'name': 'dtype',\n    'type': 'dtype'\n  }, {\n    'tfName': 'element_shape_except0',\n    'name': 'elementShapeExcept0',\n    'type': 'shape',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'TensorArraySplitV3',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorArrayId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'tensor',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'lengths',\n    'type': 'number[]'\n  }, {\n    'start': 3,\n    'name': 'flowIn',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorArraySizeV3',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorArrayId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'flowIn',\n    'type': 'number'\n  }]\n}, {\n  'tfOpName': 'TensorArrayCloseV3',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorArrayId',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'StatelessIf',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'cond',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'end': 0,\n    'name': 'args',\n    'type': 'tensors'\n  }],\n  'attrs': [{\n    'tfName': 'then_branch',\n    'name': 'thenBranch',\n    'type': 'func'\n  }, {\n    'tfName': 'else_branch',\n    'name': 'elseBranch',\n    'type': 'func'\n  }]\n}, {\n  'tfOpName': 'If',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'cond',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'end': 0,\n    'name': 'args',\n    'type': 'tensors'\n  }],\n  'attrs': [{\n    'tfName': 'then_branch',\n    'name': 'thenBranch',\n    'type': 'func'\n  }, {\n    'tfName': 'else_branch',\n    'name': 'elseBranch',\n    'type': 'func'\n  }]\n}, {\n  'tfOpName': 'StatelessWhile',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'end': 0,\n    'name': 'args',\n    'type': 'tensors'\n  }],\n  'attrs': [{\n    'tfName': 'cond',\n    'name': 'cond',\n    'type': 'func'\n  }, {\n    'tfName': 'body',\n    'name': 'body',\n    'type': 'func'\n  }]\n}, {\n  'tfOpName': 'While',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'end': 0,\n    'name': 'args',\n    'type': 'tensors'\n  }],\n  'attrs': [{\n    'tfName': 'cond',\n    'name': 'cond',\n    'type': 'func'\n  }, {\n    'tfName': 'body',\n    'name': 'body',\n    'type': 'func'\n  }]\n}, {\n  'tfOpName': 'TensorListScatter',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensor',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'elementShape',\n    'type': 'shape'\n  }],\n  'attrs': [{\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorListScatterV2',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensor',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'elementShape',\n    'type': 'shape'\n  }, {\n    'start': 3,\n    'name': 'numElements',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorListGather',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorListId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'elementShape',\n    'type': 'shape'\n  }],\n  'attrs': [{\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorListGetItem',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorListId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'index',\n    'type': 'number'\n  }, {\n    'start': 2,\n    'name': 'elementShape',\n    'type': 'shape'\n  }],\n  'attrs': [{\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorListSetItem',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorListId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'index',\n    'type': 'number'\n  }, {\n    'start': 2,\n    'name': 'tensor',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorListReserve',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'elementShape',\n    'type': 'shape'\n  }, {\n    'start': 1,\n    'name': 'numElements',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorListFromTensor',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensor',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'elementShape',\n    'type': 'shape'\n  }],\n  'attrs': [{\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorListStack',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorListId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'elementShape',\n    'type': 'shape'\n  }],\n  'attrs': [{\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }, {\n    'tfName': 'num_elements',\n    'name': 'numElements',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorListSplit',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensor',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'elementShape',\n    'type': 'shape'\n  }, {\n    'start': 2,\n    'name': 'lengths',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorListConcat',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorListId',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'element_shape',\n    'name': 'elementShape',\n    'type': 'shape'\n  }, {\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorListConcatV2',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorListId',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'element_shape',\n    'name': 'elementShape',\n    'type': 'shape'\n  }, {\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorListPopBack',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorListId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'elementShape',\n    'type': 'shape'\n  }],\n  'attrs': [{\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorListPushBack',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorListId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'tensor',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'element_dtype',\n    'name': 'elementDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TensorListLength',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorListId',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'TensorListResize',\n  'category': 'control',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensorListId',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'size',\n    'type': 'number'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'AvgPool',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'strides',\n    'name': 'strides',\n    'type': 'number[]'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }, {\n    'tfName': 'ksize',\n    'name': 'kernelSize',\n    'type': 'number[]'\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'MaxPool',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'strides',\n    'name': 'strides',\n    'type': 'number[]'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }, {\n    'tfName': 'ksize',\n    'name': 'kernelSize',\n    'type': 'number[]'\n  }, {\n    'tfName': 'explicit_paddings',\n    'name': 'explicitPaddings',\n    'type': 'number[]',\n    'defaultValue': [],\n    'notSupported': true\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'MaxPoolWithArgmax',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'strides',\n    'name': 'strides',\n    'type': 'number[]'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }, {\n    'tfName': 'ksize',\n    'name': 'kernelSize',\n    'type': 'number[]'\n  }, {\n    'tfName': 'include_batch_in_index',\n    'name': 'includeBatchInIndex',\n    'type': 'bool'\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'AvgPool3D',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'strides',\n    'name': 'strides',\n    'type': 'number[]'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }, {\n    'tfName': 'ksize',\n    'name': 'kernelSize',\n    'type': 'number[]'\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'MaxPool3D',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'strides',\n    'name': 'strides',\n    'type': 'number[]'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }, {\n    'tfName': 'ksize',\n    'name': 'kernelSize',\n    'type': 'number[]'\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Conv1D',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'filter',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'stride',\n    'name': 'stride',\n    'type': 'number'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'defaultValue': 'NWC'\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'dilation',\n    'name': 'dilation',\n    'type': 'number',\n    'defaultValue': 1\n  }]\n}, {\n  'tfOpName': 'Conv2D',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'filter',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'strides',\n    'name': 'strides',\n    'type': 'number[]'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }, {\n    'tfName': 'useCudnnOnGpu',\n    'name': 'useCudnnOnGpu',\n    'type': 'bool'\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'defaultValue': 'NHWC'\n  }, {\n    'tfName': 'explicit_paddings',\n    'name': 'explicitPaddings',\n    'type': 'number[]',\n    'defaultValue': []\n  }, {\n    'tfName': 'dilations',\n    'name': 'dilations',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': '_FusedConv2D',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'filter',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'end': 0,\n    'name': 'args',\n    'type': 'tensors'\n  }],\n  'attrs': [{\n    'tfName': 'num_args',\n    'name': 'numArgs',\n    'type': 'number'\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'strides',\n    'name': 'strides',\n    'type': 'number[]'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }, {\n    'tfName': 'explicit_paddings',\n    'name': 'explicitPaddings',\n    'type': 'number[]',\n    'defaultValue': []\n  }, {\n    'tfName': 'use_cudnn_on_gpu',\n    'name': 'useCudnnOnGpu',\n    'type': 'bool',\n    'defaultValue': true\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'defaultValue': 'NHWC'\n  }, {\n    'tfName': 'dilations',\n    'name': 'dilations',\n    'type': 'number[]',\n    'defaultValue': [1, 1, 1, 1]\n  }, {\n    'tfName': 'fused_ops',\n    'name': 'fusedOps',\n    'type': 'string[]',\n    'defaultValue': []\n  }, {\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.0001\n  }, {\n    'tfName': 'leakyrelu_alpha',\n    'name': 'leakyreluAlpha',\n    'type': 'number',\n    'defaultValue': 0.2\n  }]\n}, {\n  'tfOpName': 'Conv2DBackpropInput',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 2,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'filter',\n    'type': 'tensor'\n  }, {\n    'start': 0,\n    'name': 'outputShape',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'strides',\n    'name': 'strides',\n    'type': 'number[]'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }, {\n    'tfName': 'explicit_paddings',\n    'name': 'explicitPaddings',\n    'type': 'number[]',\n    'defaultValue': []\n  }, {\n    'tfName': 'dilations',\n    'name': 'dilations',\n    'type': 'number[]',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'DepthwiseConv2d',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 0,\n    'name': 'input',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'filter',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'strides',\n    'name': 'strides',\n    'type': 'number[]'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'defaultValue': 'NHWC'\n  }, {\n    'tfName': 'explicit_paddings',\n    'name': 'explicitPaddings',\n    'type': 'number[]',\n    'defaultValue': []\n  }, {\n    'tfName': 'dilations',\n    'name': 'dilations',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'DepthwiseConv2dNative',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 0,\n    'name': 'input',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'filter',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'strides',\n    'name': 'strides',\n    'type': 'number[]'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'defaultValue': 'NHWC'\n  }, {\n    'tfName': 'explicit_paddings',\n    'name': 'explicitPaddings',\n    'type': 'number[]',\n    'defaultValue': []\n  }, {\n    'tfName': 'dilations',\n    'name': 'dilations',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'FusedDepthwiseConv2dNative',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'filter',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'end': 0,\n    'name': 'args',\n    'type': 'tensors'\n  }],\n  'attrs': [{\n    'tfName': 'num_args',\n    'name': 'numArgs',\n    'type': 'number'\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'strides',\n    'name': 'strides',\n    'type': 'number[]'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'defaultValue': 'NHWC'\n  }, {\n    'tfName': 'dilations',\n    'name': 'dilations',\n    'type': 'number[]',\n    'defaultValue': [1, 1, 1, 1]\n  }, {\n    'tfName': 'fused_ops',\n    'name': 'fusedOps',\n    'type': 'string[]',\n    'defaultValue': []\n  }, {\n    'tfName': 'explicit_paddings',\n    'name': 'explicitPaddings',\n    'type': 'number[]',\n    'defaultValue': []\n  }]\n}, {\n  'tfOpName': 'Conv3D',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'filter',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'strides',\n    'name': 'strides',\n    'type': 'number[]'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'defaultValue': 'NHWC'\n  }, {\n    'tfName': 'dilations',\n    'name': 'dilations',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'Dilation2D',\n  'category': 'convolution',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'filter',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'strides',\n    'name': 'strides',\n    'type': 'number[]'\n  }, {\n    'tfName': 'rates',\n    'name': 'dilations',\n    'type': 'number[]'\n  }, {\n    'tfName': 'padding',\n    'name': 'pad',\n    'type': 'string'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'Fill',\n  'category': 'creation',\n  'inputs': [{\n    'start': 0,\n    'name': 'shape',\n    'type': 'number[]'\n  }, {\n    'start': 1,\n    'name': 'value',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'LinSpace',\n  'category': 'creation',\n  'inputs': [{\n    'start': 0,\n    'name': 'start',\n    'type': 'number'\n  }, {\n    'start': 1,\n    'name': 'stop',\n    'type': 'number'\n  }, {\n    'start': 2,\n    'name': 'num',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'OneHot',\n  'category': 'creation',\n  'inputs': [{\n    'start': 0,\n    'name': 'indices',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'depth',\n    'type': 'number'\n  }, {\n    'start': 2,\n    'name': 'onValue',\n    'type': 'number',\n    'defaultValue': 1\n  }, {\n    'start': 3,\n    'name': 'offValue',\n    'type': 'number',\n    'defaultValue': 0\n  }],\n  'attrs': [{\n    'tfName': 'axis',\n    'name': 'axis',\n    'type': 'number',\n    'notSupported': true\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'Ones',\n  'category': 'creation',\n  'inputs': [{\n    'start': 0,\n    'name': 'shape',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'OnesLike',\n  'category': 'creation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'dtype',\n    'name': 'dtype',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'RandomStandardNormal',\n  'category': 'creation',\n  'inputs': [{\n    'start': 0,\n    'name': 'shape',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'seed',\n    'name': 'seed',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'seed2',\n    'name': 'seed2',\n    'type': 'number',\n    'defaultValue': 0,\n    'notSupported': true\n  }, {\n    'tfName': 'dtype',\n    'name': 'dtype',\n    'type': 'dtype'\n  }, {\n    'tfName': 'T',\n    'name': 'T',\n    'type': 'number',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'RandomUniform',\n  'category': 'creation',\n  'inputs': [{\n    'start': 0,\n    'name': 'shape',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'minval',\n    'name': 'minval',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'maxval',\n    'name': 'maxval',\n    'type': 'number',\n    'defaultValue': 1\n  }, {\n    'tfName': 'dtype',\n    'name': 'dtype',\n    'type': 'dtype'\n  }, {\n    'tfName': 'seed',\n    'name': 'seed',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'seed2',\n    'name': 'seed2',\n    'type': 'number',\n    'defaultValue': 0,\n    'notSupported': true\n  }, {\n    'tfName': 'T',\n    'name': 'T',\n    'type': 'number',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'RandomUniformInt',\n  'category': 'creation',\n  'inputs': [{\n    'start': 0,\n    'name': 'shape',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'minval',\n    'name': 'minval',\n    'type': 'number'\n  }, {\n    'tfName': 'maxval',\n    'name': 'maxval',\n    'type': 'number'\n  }, {\n    'tfName': 'seed',\n    'name': 'seed',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'seed2',\n    'name': 'seed2',\n    'type': 'number',\n    'defaultValue': 0,\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Range',\n  'category': 'creation',\n  'inputs': [{\n    'start': 0,\n    'name': 'start',\n    'type': 'number'\n  }, {\n    'start': 1,\n    'name': 'stop',\n    'type': 'number'\n  }, {\n    'start': 2,\n    'name': 'step',\n    'type': 'number',\n    'defaultValue': 0\n  }],\n  'attrs': [{\n    'tfName': 'Tidx',\n    'name': 'dtype',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'TruncatedNormal',\n  'category': 'creation',\n  'inputs': [{\n    'start': 0,\n    'name': 'shape',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'means',\n    'name': 'mean',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'stddev',\n    'name': 'stdDev',\n    'type': 'number',\n    'defaultValue': 1\n  }, {\n    'tfName': 'seed',\n    'name': 'seed',\n    'type': 'number'\n  }, {\n    'tfName': 'seed2',\n    'name': 'seed2',\n    'type': 'number',\n    'defaultValue': 0,\n    'notSupported': true\n  }, {\n    'tfName': 'dtype',\n    'name': 'dtype',\n    'type': 'dtype'\n  }, {\n    'tfName': 'T',\n    'name': 'T',\n    'type': 'number',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Zeros',\n  'category': 'creation',\n  'inputs': [{\n    'start': 0,\n    'name': 'shape',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'ZerosLike',\n  'category': 'creation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'Multinomial',\n  'category': 'creation',\n  'inputs': [{\n    'start': 0,\n    'name': 'logits',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'numSamples',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'seed',\n    'name': 'seed',\n    'type': 'number'\n  }, {\n    'tfName': 'seed2',\n    'name': 'seed2',\n    'type': 'number'\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype'\n  }, {\n    'tfName': 'output_dtype',\n    'name': 'output_dtype',\n    'type': 'dtype'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'NonMaxSuppressionV2',\n  'category': 'dynamic',\n  'inputs': [{\n    'start': 0,\n    'name': 'boxes',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scores',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'maxOutputSize',\n    'type': 'number'\n  }, {\n    'start': 3,\n    'name': 'iouThreshold',\n    'type': 'number'\n  }]\n}, {\n  'tfOpName': 'NonMaxSuppressionV3',\n  'category': 'dynamic',\n  'inputs': [{\n    'start': 0,\n    'name': 'boxes',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scores',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'maxOutputSize',\n    'type': 'number'\n  }, {\n    'start': 3,\n    'name': 'iouThreshold',\n    'type': 'number'\n  }, {\n    'start': 4,\n    'name': 'scoreThreshold',\n    'type': 'number'\n  }]\n}, {\n  'tfOpName': 'NonMaxSuppressionV4',\n  'category': 'dynamic',\n  'inputs': [{\n    'start': 0,\n    'name': 'boxes',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scores',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'maxOutputSize',\n    'type': 'number'\n  }, {\n    'start': 3,\n    'name': 'iouThreshold',\n    'type': 'number'\n  }, {\n    'start': 4,\n    'name': 'scoreThreshold',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'T_threshold',\n    'name': 'threshold',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'pad_to_max_output_size',\n    'name': 'padToMaxOutputSize',\n    'type': 'bool'\n  }]\n}, {\n  'tfOpName': 'NonMaxSuppressionV5',\n  'category': 'dynamic',\n  'inputs': [{\n    'start': 0,\n    'name': 'boxes',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scores',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'maxOutputSize',\n    'type': 'number'\n  }, {\n    'start': 3,\n    'name': 'iouThreshold',\n    'type': 'number'\n  }, {\n    'start': 4,\n    'name': 'scoreThreshold',\n    'type': 'number'\n  }, {\n    'start': 5,\n    'name': 'softNmsSigma',\n    'type': 'number'\n  }]\n}, {\n  'tfOpName': 'Where',\n  'category': 'dynamic',\n  'inputs': [{\n    'start': 0,\n    'name': 'condition',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'ListDiff',\n  'category': 'dynamic',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'y',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'LowerBound',\n  'category': 'evaluation',\n  'inputs': [{\n    'start': 0,\n    'name': 'sortedSequence',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'values',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'TopKV2',\n  'category': 'evaluation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'k',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'sorted',\n    'name': 'sorted',\n    'type': 'bool'\n  }]\n}, {\n  'tfOpName': 'UpperBound',\n  'category': 'evaluation',\n  'inputs': [{\n    'start': 0,\n    'name': 'sortedSequence',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'values',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'Unique',\n  'category': 'evaluation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'UniqueV2',\n  'category': 'evaluation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'PlaceholderWithDefault',\n  'category': 'graph',\n  'inputs': [{\n    'start': 0,\n    'name': 'default',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'shape',\n    'name': 'shape',\n    'type': 'shape'\n  }, {\n    'tfName': 'dtype',\n    'name': 'dtype',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'Placeholder',\n  'category': 'graph',\n  'attrs': [{\n    'tfName': 'shape',\n    'name': 'shape',\n    'type': 'shape'\n  }, {\n    'tfName': 'dtype',\n    'name': 'dtype',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'Const',\n  'category': 'graph'\n}, {\n  'tfOpName': 'Identity',\n  'category': 'graph',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'IdentityN',\n  'category': 'graph',\n  'inputs': [{\n    'start': 0,\n    'end': 0,\n    'name': 'x',\n    'type': 'tensors'\n  }]\n}, {\n  'tfOpName': 'Snapshot',\n  'category': 'graph',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'Rank',\n  'category': 'graph',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'Size',\n  'category': 'graph',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'Shape',\n  'category': 'graph',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'ShapeN',\n  'category': 'graph',\n  'inputs': [{\n    'start': 0,\n    'end': 0,\n    'name': 'x',\n    'type': 'tensors'\n  }]\n}, {\n  'tfOpName': 'Print',\n  'category': 'graph',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'data',\n    'type': 'tensors'\n  }],\n  'attrs': [{\n    'tfName': 'message',\n    'name': 'message',\n    'type': 'string'\n  }, {\n    'tfName': 'first_n',\n    'name': 'firstN',\n    'type': 'number',\n    'notSupported': true\n  }, {\n    'tfName': 'summarize',\n    'name': 'summarize',\n    'type': 'number',\n    'defaultValue': 3\n  }]\n}, {\n  'tfOpName': 'NoOp',\n  'category': 'graph',\n  'inputs': []\n}, {\n  'tfOpName': 'StopGradient',\n  'category': 'graph',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'FakeQuantWithMinMaxVars',\n  'category': 'graph',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'min',\n    'name': 'min',\n    'type': 'number'\n  }, {\n    'tfName': 'max',\n    'name': 'max',\n    'type': 'number'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'HashTable',\n  'category': 'hash_table',\n  'inputs': [],\n  'attrs': [{\n    'tfName': 'shared_name',\n    'name': 'sharedName',\n    'type': 'string'\n  }, {\n    'tfName': 'use_node_name_sharing',\n    'name': 'useNodeNameSharing',\n    'type': 'bool'\n  }, {\n    'tfName': 'key_dtype',\n    'name': 'keyDType',\n    'type': 'dtype'\n  }, {\n    'tfName': 'value_dtype',\n    'name': 'valueDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'HashTableV2',\n  'category': 'hash_table',\n  'inputs': [],\n  'attrs': [{\n    'tfName': 'shared_name',\n    'name': 'sharedName',\n    'type': 'string'\n  }, {\n    'tfName': 'use_node_name_sharing',\n    'name': 'useNodeNameSharing',\n    'type': 'bool'\n  }, {\n    'tfName': 'key_dtype',\n    'name': 'keyDType',\n    'type': 'dtype'\n  }, {\n    'tfName': 'value_dtype',\n    'name': 'valueDType',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'LookupTableImport',\n  'category': 'hash_table',\n  'inputs': [{\n    'start': 0,\n    'name': 'tableHandle',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'keys',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'values',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'Tin',\n    'name': 'tIn',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'Tout',\n    'name': 'tOut',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LookupTableImportV2',\n  'category': 'hash_table',\n  'inputs': [{\n    'start': 0,\n    'name': 'tableHandle',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'keys',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'values',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'Tin',\n    'name': 'tIn',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'Tout',\n    'name': 'tOut',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LookupTableFind',\n  'category': 'hash_table',\n  'inputs': [{\n    'start': 0,\n    'name': 'tableHandle',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'keys',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'defaultValue',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'Tin',\n    'name': 'tIn',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'Tout',\n    'name': 'tOut',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LookupTableFindV2',\n  'category': 'hash_table',\n  'inputs': [{\n    'start': 0,\n    'name': 'tableHandle',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'keys',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'defaultValue',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'Tin',\n    'name': 'tIn',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'Tout',\n    'name': 'tOut',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LookupTableSize',\n  'category': 'hash_table',\n  'inputs': [{\n    'start': 0,\n    'name': 'tableHandle',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'LookupTableSizeV2',\n  'category': 'hash_table',\n  'inputs': [{\n    'start': 0,\n    'name': 'tableHandle',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'InitializeTable',\n  'category': 'hash_table',\n  'inputs': [{\n    'start': 0,\n    'name': 'tableHandle',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'keys',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'values',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'InitializeTableV2',\n  'category': 'hash_table',\n  'inputs': [{\n    'start': 0,\n    'name': 'tableHandle',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'keys',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'values',\n    'type': 'tensor'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'ResizeBilinear',\n  'category': 'image',\n  'inputs': [{\n    'start': 0,\n    'name': 'images',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'size',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'align_corners',\n    'name': 'alignCorners',\n    'type': 'bool'\n  }, {\n    'tfName': 'half_pixel_centers',\n    'name': 'halfPixelCenters',\n    'type': 'bool'\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'ResizeNearestNeighbor',\n  'category': 'image',\n  'inputs': [{\n    'start': 0,\n    'name': 'images',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'size',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'align_corners',\n    'name': 'alignCorners',\n    'type': 'bool'\n  }, {\n    'tfName': 'half_pixel_centers',\n    'name': 'halfPixelCenters',\n    'type': 'bool'\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'CropAndResize',\n  'category': 'image',\n  'inputs': [{\n    'start': 0,\n    'name': 'image',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'boxes',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'boxInd',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'cropSize',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'method',\n    'name': 'method',\n    'type': 'string'\n  }, {\n    'tfName': 'extrapolation_value',\n    'name': 'extrapolationValue',\n    'type': 'number'\n  }]\n}, {\n  'tfOpName': 'ImageProjectiveTransformV3',\n  'category': 'image',\n  'inputs': [{\n    'start': 0,\n    'name': 'images',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'transforms',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'outputShape',\n    'type': 'number[]'\n  }, {\n    'start': 3,\n    'name': 'fillValue',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'interpolation',\n    'name': 'interpolation',\n    'type': 'string'\n  }, {\n    'tfName': 'fill_mode',\n    'name': 'fillMode',\n    'type': 'string'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'Equal',\n  'category': 'logical',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'NotEqual',\n  'category': 'logical',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Greater',\n  'category': 'logical',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'GreaterEqual',\n  'category': 'logical',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Less',\n  'category': 'logical',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LessEqual',\n  'category': 'logical',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LogicalAnd',\n  'category': 'logical',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LogicalNot',\n  'category': 'logical',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LogicalOr',\n  'category': 'logical',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Select',\n  'category': 'logical',\n  'inputs': [{\n    'start': 0,\n    'name': 'condition',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'SelectV2',\n  'category': 'logical',\n  'inputs': [{\n    'start': 0,\n    'name': 'condition',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'BitwiseAnd',\n  'category': 'logical',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'y',\n    'type': 'tensor'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': '_FusedMatMul',\n  'category': 'matrices',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'end': 0,\n    'name': 'args',\n    'type': 'tensors'\n  }],\n  'attrs': [{\n    'tfName': 'num_args',\n    'name': 'numArgs',\n    'type': 'number'\n  }, {\n    'tfName': 'fused_ops',\n    'name': 'fusedOps',\n    'type': 'string[]',\n    'defaultValue': []\n  }, {\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.0001\n  }, {\n    'tfName': 'transpose_a',\n    'name': 'transposeA',\n    'type': 'bool',\n    'defaultValue': false\n  }, {\n    'tfName': 'transpose_b',\n    'name': 'transposeB',\n    'type': 'bool',\n    'defaultValue': false\n  }, {\n    'tfName': 'leakyrelu_alpha',\n    'name': 'leakyreluAlpha',\n    'type': 'number',\n    'defaultValue': 0.2\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'MatMul',\n  'category': 'matrices',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'transpose_a',\n    'name': 'transposeA',\n    'type': 'bool',\n    'defaultValue': false\n  }, {\n    'tfName': 'transpose_b',\n    'name': 'transposeB',\n    'type': 'bool',\n    'defaultValue': false\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'BatchMatMul',\n  'category': 'matrices',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'adj_x',\n    'name': 'transposeA',\n    'type': 'bool',\n    'defaultValue': false\n  }, {\n    'tfName': 'adj_y',\n    'name': 'transposeB',\n    'type': 'bool',\n    'defaultValue': false\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'BatchMatMulV2',\n  'category': 'matrices',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'b',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'adj_x',\n    'name': 'transposeA',\n    'type': 'bool',\n    'defaultValue': false\n  }, {\n    'tfName': 'adj_y',\n    'name': 'transposeB',\n    'type': 'bool',\n    'defaultValue': false\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Transpose',\n  'category': 'matrices',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'perm',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Einsum',\n  'category': 'matrices',\n  'inputs': [{\n    'start': 0,\n    'end': 0,\n    'name': 'tensors',\n    'type': 'tensors'\n  }],\n  'attrs': [{\n    'tfName': 'equation',\n    'name': 'equation',\n    'type': 'string'\n  }, {\n    'tfName': 'N',\n    'name': 'n',\n    'type': 'number',\n    'defaultValue': 2\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'MatrixBandPart',\n  'category': 'matrices',\n  'inputs': [{\n    'start': 0,\n    'name': 'a',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'numLower',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'numUpper',\n    'type': 'tensor'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'EuclideanNorm',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'keep_dims',\n    'name': 'keepDims',\n    'type': 'bool',\n    'defaultValue': false\n  }]\n}, {\n  'tfOpName': 'FusedBatchNorm',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'FusedBatchNormV2',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'FusedBatchNormV3',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'scale',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'offset',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'mean',\n    'type': 'tensor'\n  }, {\n    'start': 4,\n    'name': 'variance',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'epsilon',\n    'name': 'epsilon',\n    'type': 'number',\n    'defaultValue': 0.001\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'LRN',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'depth_radius',\n    'name': 'radius',\n    'type': 'number',\n    'defaultValue': 5\n  }, {\n    'tfName': 'bias',\n    'name': 'bias',\n    'type': 'number',\n    'defaultValue': 1\n  }, {\n    'tfName': 'alpha',\n    'name': 'alpha',\n    'type': 'number',\n    'defaultValue': 1\n  }, {\n    'tfName': 'beta',\n    'name': 'beta',\n    'type': 'number',\n    'defaultValue': 0.5\n  }]\n}, {\n  'tfOpName': 'Softmax',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'LogSoftmax',\n  'category': 'normalization',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'Bincount',\n  'category': 'reduction',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'size',\n    'type': 'number'\n  }, {\n    'start': 2,\n    'name': 'weights',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'DenseBincount',\n  'category': 'reduction',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'size',\n    'type': 'number'\n  }, {\n    'start': 2,\n    'name': 'weights',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'binary_output',\n    'name': 'binaryOutput',\n    'type': 'bool'\n  }]\n}, {\n  'tfOpName': 'Max',\n  'category': 'reduction',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'keep_dims',\n    'name': 'keepDims',\n    'type': 'bool'\n  }]\n}, {\n  'tfOpName': 'Mean',\n  'category': 'reduction',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'keep_dims',\n    'name': 'keepDims',\n    'type': 'bool'\n  }]\n}, {\n  'tfOpName': 'Min',\n  'category': 'reduction',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'keep_dims',\n    'name': 'keepDims',\n    'type': 'bool'\n  }]\n}, {\n  'tfOpName': 'Sum',\n  'category': 'reduction',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'keep_dims',\n    'name': 'keepDims',\n    'type': 'bool'\n  }]\n}, {\n  'tfOpName': 'All',\n  'category': 'reduction',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'keep_dims',\n    'name': 'keepDims',\n    'type': 'bool'\n  }]\n}, {\n  'tfOpName': 'Any',\n  'category': 'reduction',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'keep_dims',\n    'name': 'keepDims',\n    'type': 'bool'\n  }]\n}, {\n  'tfOpName': 'ArgMax',\n  'category': 'reduction',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number'\n  }]\n}, {\n  'tfOpName': 'ArgMin',\n  'category': 'reduction',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number'\n  }]\n}, {\n  'tfOpName': 'Prod',\n  'category': 'reduction',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'keep_dims',\n    'name': 'keepDims',\n    'type': 'bool'\n  }, {\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Cumprod',\n  'category': 'reduction',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'exclusive',\n    'name': 'exclusive',\n    'type': 'bool'\n  }, {\n    'tfName': 'reverse',\n    'name': 'reverse',\n    'type': 'bool'\n  }]\n}, {\n  'tfOpName': 'Cumsum',\n  'category': 'reduction',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'exclusive',\n    'name': 'exclusive',\n    'type': 'bool'\n  }, {\n    'tfName': 'reverse',\n    'name': 'reverse',\n    'type': 'bool'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'ConcatV2',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'end': -1,\n    'name': 'tensors',\n    'type': 'tensors'\n  }, {\n    'start': -1,\n    'name': 'axis',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'N',\n    'name': 'n',\n    'type': 'number',\n    'defaultValue': 2\n  }]\n}, {\n  'tfOpName': 'Concat',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 1,\n    'end': 0,\n    'name': 'tensors',\n    'type': 'tensors'\n  }, {\n    'start': 0,\n    'name': 'axis',\n    'type': 'number'\n  }],\n  'attrs': [{\n    'tfName': 'N',\n    'name': 'n',\n    'type': 'number',\n    'defaultValue': 2\n  }]\n}, {\n  'tfOpName': 'GatherV2',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'axis',\n    'type': 'number',\n    'defaultValue': 0\n  }],\n  'attrs': [{\n    'tfName': 'batch_dims',\n    'name': 'batchDims',\n    'type': 'number',\n    'defaultValue': 0\n  }]\n}, {\n  'tfOpName': 'Gather',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'validate_indices',\n    'name': 'validateIndices',\n    'type': 'bool',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Reverse',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'dims',\n    'type': 'bool[]'\n  }]\n}, {\n  'tfOpName': 'ReverseV2',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'Slice',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'begin',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'size',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'StridedSlice',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'begin',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'end',\n    'type': 'number[]'\n  }, {\n    'start': 3,\n    'name': 'strides',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'begin_mask',\n    'name': 'beginMask',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'end_mask',\n    'name': 'endMask',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'new_axis_mask',\n    'name': 'newAxisMask',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'ellipsis_mask',\n    'name': 'ellipsisMask',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'shrink_axis_mask',\n    'name': 'shrinkAxisMask',\n    'type': 'number',\n    'defaultValue': 0\n  }]\n}, {\n  'tfOpName': 'Pack',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'end': 0,\n    'name': 'tensors',\n    'type': 'tensors'\n  }],\n  'attrs': [{\n    'tfName': 'axis',\n    'name': 'axis',\n    'type': 'number',\n    'defaultValue': 0\n  }]\n}, {\n  'tfOpName': 'Unpack',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensor',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'axis',\n    'name': 'axis',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'tfName': 'num',\n    'name': 'num',\n    'type': 'number',\n    'defaultValue': 0,\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'Tile',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'reps',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'Split',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'axis',\n    'type': 'number',\n    'defaultValue': 0\n  }, {\n    'start': 1,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'num_split',\n    'name': 'numOrSizeSplits',\n    'type': 'number',\n    'defaultValue': 1\n  }]\n}, {\n  'tfOpName': 'SplitV',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'numOrSizeSplits',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'axis',\n    'type': 'number',\n    'defaultValue': 0\n  }]\n}, {\n  'tfOpName': 'ScatterNd',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'indices',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'values',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'shape',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'GatherNd',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'SparseToDense',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'sparseIndices',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'outputShape',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'sparseValues',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'defaultValue',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'validate_indices',\n    'name': 'validateIndices',\n    'type': 'bool',\n    'defaultValue': false,\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'TensorScatterUpdate',\n  'category': 'slice_join',\n  'inputs': [{\n    'start': 0,\n    'name': 'tensor',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'values',\n    'type': 'tensor'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'SparseFillEmptyRows',\n  'category': 'sparse',\n  'inputs': [{\n    'start': 0,\n    'name': 'indices',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'values',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'denseShape',\n    'type': 'tensor'\n  }, {\n    'start': 3,\n    'name': 'defaultValue',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'SparseReshape',\n  'category': 'sparse',\n  'inputs': [{\n    'start': 0,\n    'name': 'inputIndices',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'inputShape',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'newShape',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'T',\n    'name': 'dtype',\n    'type': 'dtype',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'SparseSegmentMean',\n  'category': 'sparse',\n  'inputs': [{\n    'start': 0,\n    'name': 'data',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'segmentIds',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'SparseSegmentSum',\n  'category': 'sparse',\n  'inputs': [{\n    'start': 0,\n    'name': 'data',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'indices',\n    'type': 'tensor'\n  }, {\n    'start': 2,\n    'name': 'segmentIds',\n    'type': 'tensor'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'FFT',\n  'category': 'spectral',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'IFFT',\n  'category': 'spectral',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }]\n}, {\n  'tfOpName': 'RFFT',\n  'category': 'spectral',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'fft_length',\n    'type': 'number',\n    'notSupported': true\n  }]\n}, {\n  'tfOpName': 'IRFFT',\n  'category': 'spectral',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'fft_length',\n    'type': 'number',\n    'notSupported': true\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'StaticRegexReplace',\n  'category': 'string',\n  'inputs': [{\n    'start': 0,\n    'name': 'input',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'pattern',\n    'name': 'pattern',\n    'type': 'string'\n  }, {\n    'tfName': 'rewrite',\n    'name': 'rewrite',\n    'type': 'string'\n  }, {\n    'tfName': 'replace_global',\n    'name': 'replaceGlobal',\n    'type': 'bool'\n  }]\n}, {\n  'tfOpName': 'StringNGrams',\n  'category': 'string',\n  'inputs': [{\n    'start': 0,\n    'name': 'data',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'dataSplits',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'separator',\n    'name': 'separator',\n    'type': 'string'\n  }, {\n    'tfName': 'ngram_widths',\n    'name': 'nGramWidths',\n    'type': 'number[]'\n  }, {\n    'tfName': 'left_pad',\n    'name': 'leftPad',\n    'type': 'string'\n  }, {\n    'tfName': 'right_pad',\n    'name': 'rightPad',\n    'type': 'string'\n  }, {\n    'tfName': 'pad_width',\n    'name': 'padWidth',\n    'type': 'number'\n  }, {\n    'tfName': 'preserve_short_sequences',\n    'name': 'preserveShortSequences',\n    'type': 'bool'\n  }],\n  'outputs': ['ngrams', 'ngrams_splits']\n}, {\n  'tfOpName': 'StringSplit',\n  'category': 'string',\n  'inputs': [{\n    'start': 0,\n    'name': 'input',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'delimiter',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'skip_empty',\n    'name': 'skipEmpty',\n    'type': 'bool'\n  }],\n  'outputs': ['indices', 'values', 'shape']\n}, {\n  'tfOpName': 'StringToHashBucketFast',\n  'category': 'string',\n  'inputs': [{\n    'start': 0,\n    'name': 'input',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'num_buckets',\n    'name': 'numBuckets',\n    'type': 'number'\n  }]\n}];\n", "/**\n * @license\n * Copyright 2023 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [{\n  'tfOpName': 'Cast',\n  'category': 'transformation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'SrcT',\n    'name': 'sdtype',\n    'type': 'dtype',\n    'notSupported': true\n  }, {\n    'tfName': 'DstT',\n    'name': 'dtype',\n    'type': 'dtype'\n  }]\n}, {\n  'tfOpName': 'ExpandDims',\n  'category': 'transformation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'axis',\n    'type': 'number'\n  }]\n}, {\n  'tfOpName': 'MirrorPad',\n  'category': 'transformation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'padding',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'mode',\n    'name': 'mode',\n    'type': 'string'\n  }]\n}, {\n  'tfOpName': 'Pad',\n  'category': 'transformation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'padding',\n    'type': 'number[]'\n  }],\n  'attrs': [{\n    'tfName': 'constant_value',\n    'name': 'constantValue',\n    'type': 'number',\n    'defaultValue': 0\n  }]\n}, {\n  'tfOpName': 'PadV2',\n  'category': 'transformation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'padding',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'constantValue',\n    'type': 'number',\n    'defaultValue': 0\n  }]\n}, {\n  'tfOpName': 'Reshape',\n  'category': 'transformation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'shape',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'EnsureShape',\n  'category': 'transformation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'shape',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'Squeeze',\n  'category': 'transformation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'axis',\n    'tfDeprecatedName': 'squeeze_dims',\n    'name': 'axis',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'SpaceToBatchND',\n  'category': 'transformation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'blockShape',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'paddings',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'BatchToSpaceND',\n  'category': 'transformation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'blockShape',\n    'type': 'number[]'\n  }, {\n    'start': 2,\n    'name': 'crops',\n    'type': 'number[]'\n  }]\n}, {\n  'tfOpName': 'DepthToSpace',\n  'category': 'transformation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }],\n  'attrs': [{\n    'tfName': 'block_size',\n    'name': 'blockSize',\n    'type': 'number'\n  }, {\n    'tfName': 'data_format',\n    'name': 'dataFormat',\n    'type': 'string'\n  }]\n}, {\n  'tfOpName': 'BroadcastTo',\n  'category': 'transformation',\n  'inputs': [{\n    'start': 0,\n    'name': 'x',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 'shape',\n    'type': 'number[]'\n  }],\n  'attrs': []\n}, {\n  'tfOpName': 'BroadcastArgs',\n  'category': 'transformation',\n  'inputs': [{\n    'start': 0,\n    'name': 's0',\n    'type': 'tensor'\n  }, {\n    'start': 1,\n    'name': 's1',\n    'type': 'tensor'\n  }],\n  'attrs': []\n}];\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport * as tensorflow from '../data/compiled_api';\nimport { getRegisteredOp } from './custom_op/register';\nimport { getNodeNameAndIndex } from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as sparse from './op_list/sparse';\nimport * as spectral from './op_list/spectral';\nimport * as string from './op_list/string';\nimport * as transformation from './op_list/transformation';\nexport class OperationMapper {\n  // Singleton instance for the mapper\n  static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n  // Loads the op mapping from the JSON file.\n  constructor() {\n    const ops = [arithmetic, basicMath, control, convolution, creation, dynamic, evaluation, graph, hashTable, image, logical, matrices, normalization, reduction, sliceJoin, sparse, spectral, string, transformation];\n    const mappersJson = [].concat(...ops.map(op => op.json));\n    this.opMappers = mappersJson.reduce((map, mapper) => {\n      map[mapper.tfOpName] = mapper;\n      return map;\n    }, {});\n  }\n  // Converts the model inference graph from Tensorflow GraphDef to local\n  // representation for TensorFlow.js API\n  transformGraph(graph, signature = {}) {\n    const tfNodes = graph.node;\n    const placeholders = [];\n    const weights = [];\n    const initNodes = [];\n    const nodes = tfNodes.reduce((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      } else if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      } else if (node.input == null || node.input.length === 0) {\n        initNodes.push(map[node.name]);\n      }\n      return map;\n    }, {});\n    let inputs = [];\n    const outputs = [];\n    let inputNodeNameToKey = {};\n    let outputNodeNameToKey = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName,, outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            // update the input name to use the mapped output index directly.\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n    let functions = {};\n    if (graph.library != null && graph.library.function != null) {\n      functions = graph.library.function.reduce((functions, func) => {\n        functions[func.signature.name] = this.mapFunction(func);\n        return functions;\n      }, {});\n    }\n    const result = {\n      nodes,\n      inputs,\n      outputs,\n      weights,\n      placeholders,\n      signature,\n      functions\n    };\n    if (initNodes.length > 0) {\n      result.initNodes = initNodes;\n    }\n    return result;\n  }\n  mapSignatureEntries(entries) {\n    return Object.keys(entries || {}).reduce((prev, curr) => {\n      prev[entries[curr].name] = curr;\n      return prev;\n    }, {});\n  }\n  mapNode(node) {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper = getRegisteredOp(node.op) || this.opMappers[node.op] || {};\n    if (node.attr == null) {\n      node.attr = {};\n    }\n    const newNode = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames: (node.input || []).map(input => input.startsWith('^') ? input.slice(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr,\n      outputs: mapper.outputs\n    };\n    if (mapper.inputs != null) {\n      newNode.inputParams = mapper.inputs.reduce((map, param) => {\n        map[param.name] = {\n          type: param.type,\n          inputIndexStart: param.start,\n          inputIndexEnd: param.end\n        };\n        return map;\n      }, {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams = mapper.attrs.reduce((map, param) => {\n        const type = param.type;\n        let value = undefined;\n        switch (param.type) {\n          case 'string':\n            value = getStringParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'string[]':\n            value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'number':\n            value = getNumberParam(node.attr, param.tfName, param.defaultValue || 0);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'number[]':\n            value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'bool':\n            value = getBoolParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'bool[]':\n            value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'shape':\n            value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'shape[]':\n            value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'dtype':\n            value = getDtypeParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'dtype[]':\n            value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'func':\n            value = getFuncParam(node.attr, param.tfName, param.defaultValue);\n            if (value === undefined && !!param.tfDeprecatedName) {\n              value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n            }\n            break;\n          case 'tensor':\n          case 'tensors':\n            break;\n          default:\n            throw new Error(`Unsupported param type: ${param.type} for op: ${node.op}`);\n        }\n        map[param.name] = {\n          value,\n          type\n        };\n        return map;\n      }, {});\n    }\n    return newNode;\n  }\n  // map the TFunctionDef to TFJS graph object\n  mapFunction(functionDef) {\n    const tfNodes = functionDef.nodeDef;\n    const placeholders = [];\n    const weights = [];\n    let nodes = {};\n    if (tfNodes != null) {\n      nodes = tfNodes.reduce((map, node) => {\n        map[node.name] = this.mapNode(node);\n        if (node.op === 'Const') {\n          weights.push(map[node.name]);\n        }\n        return map;\n      }, {});\n    }\n    const inputs = [];\n    const outputs = [];\n    functionDef.signature.inputArg.forEach(arg => {\n      const [nodeName] = getNodeNameAndIndex(arg.name);\n      const node = {\n        name: nodeName,\n        op: 'Placeholder',\n        inputs: [],\n        inputNames: [],\n        category: 'graph',\n        inputParams: {},\n        attrParams: {\n          dtype: {\n            value: parseDtypeParam(arg.type),\n            type: 'dtype'\n          }\n        },\n        children: []\n      };\n      node.signatureKey = arg.name;\n      inputs.push(node);\n      nodes[nodeName] = node;\n    });\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach((name, index) => {\n        const [nodeName,, outputName] = getNodeNameAndIndex(name);\n        const inputNode = nodes[nodeName];\n        if (inputNode.outputs != null) {\n          const outputIndex = inputNode.outputs.indexOf(outputName);\n          if (outputIndex !== -1) {\n            const inputName = `${nodeName}:${outputIndex}`;\n            // update the input name to use the mapped output index directly.\n            node.inputNames[index] = inputName;\n          }\n        }\n        node.inputs.push(inputNode);\n        inputNode.children.push(node);\n      });\n    });\n    const returnNodeMap = functionDef.ret;\n    functionDef.signature.outputArg.forEach(output => {\n      const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n      const node = nodes[nodeName];\n      if (node != null) {\n        node.defaultOutput = index;\n        outputs.push(node);\n      }\n    });\n    const signature = this.mapArgsToSignature(functionDef);\n    return {\n      nodes,\n      inputs,\n      outputs,\n      weights,\n      placeholders,\n      signature\n    };\n  }\n  mapArgsToSignature(functionDef) {\n    return {\n      methodName: functionDef.signature.name,\n      inputs: functionDef.signature.inputArg.reduce((map, arg) => {\n        map[arg.name] = this.mapArgToTensorInfo(arg);\n        return map;\n      }, {}),\n      outputs: functionDef.signature.outputArg.reduce((map, arg) => {\n        map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n        return map;\n      }, {})\n    };\n  }\n  mapArgToTensorInfo(arg, nameMap) {\n    let name = arg.name;\n    if (nameMap != null) {\n      name = nameMap[name];\n    }\n    return {\n      name,\n      dtype: arg.type\n    };\n  }\n}\nexport function decodeBase64(text) {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error('Unable to decode base64 in this environment. ' + 'Missing built-in atob() or Buffer()');\n  }\n}\nexport function parseStringParam(s, keepCase) {\n  const value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\nexport function getStringParam(attrs, name, def, keepCase = false) {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\nexport function getBoolParam(attrs, name, def) {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\nexport function getNumberParam(attrs, name, def) {\n  const param = attrs[name] || {};\n  const value = param['i'] != null ? param['i'] : param['f'] != null ? param['f'] : def;\n  return typeof value === 'number' ? value : parseInt(value, 10);\n}\nexport function parseDtypeParam(value) {\n  if (typeof value === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n    case tensorflow.DataType.DT_HALF:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n    case tensorflow.DataType.DT_INT8:\n    case tensorflow.DataType.DT_UINT8:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    case tensorflow.DataType.DT_COMPLEX64:\n    case tensorflow.DataType.DT_COMPLEX128:\n      return 'complex64';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\nexport function getFuncParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.func) {\n    return param.func.name;\n  }\n  return def;\n}\nexport function getDtypeParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\nexport function getDtypeArrayParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\nexport function parseTensorShapeParam(shape) {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(dim => typeof dim.size === 'number' ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\nexport function getTensorShapeParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\nexport function getNumericArrayParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f : param.list.i) || []).map(v => typeof v === 'number' ? v : parseInt(v, 10));\n  }\n  return def;\n}\nexport function getStringArrayParam(attrs, name, def, keepCase = false) {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map(v => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\nexport function getTensorShapeArrayParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map(v => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\nexport function getBoolArrayParam(attrs, name, def) {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getTensor } from '../executors/utils';\nimport { getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam } from '../operation_mapper';\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl {\n  constructor(node, tensorMap, context) {\n    this.node = node;\n    this.tensorMap = tensorMap;\n    this.context = context;\n    this.inputs = [];\n    this.attrs = {};\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs).reduce((attrs, key) => {\n        attrs[key] = this.getAttr(key);\n        return attrs;\n      }, {});\n    }\n  }\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  getInput(name) {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  getAttr(name, defaultValue) {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n    }\n    return defaultValue;\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This file exports ops used by the converters executors. By default it\n * re-exports all ops. In a custom build this is aliased to a file that will\n * only exports ops for a given model.json.\n */\nexport * from './ops';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'BiasAdd':\n    case 'AddV2':\n    case 'Add':\n      {\n        return [ops.add(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'AddN':\n      {\n        return [ops.addN(getParamValue('tensors', node, tensorMap, context))];\n      }\n    case 'FloorMod':\n    case 'Mod':\n      return [ops.mod(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n    case 'Mul':\n      return [ops.mul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n    case 'RealDiv':\n    case 'Div':\n      {\n        return [ops.div(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'DivNoNan':\n      {\n        return [ops.divNoNan(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'FloorDiv':\n      {\n        return [ops.floorDiv(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'Sub':\n      {\n        return [ops.sub(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'Minimum':\n      {\n        return [ops.minimum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'Maximum':\n      {\n        return [ops.maximum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'Pow':\n      {\n        return [ops.pow(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'SquaredDifference':\n      {\n        return [ops.squaredDifference(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'arithmetic';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [ops.abs(getParamValue('x', node, tensorMap, context))];\n    case 'Acos':\n      return [ops.acos(getParamValue('x', node, tensorMap, context))];\n    case 'Acosh':\n      return [ops.acosh(getParamValue('x', node, tensorMap, context))];\n    case 'Asin':\n      return [ops.asin(getParamValue('x', node, tensorMap, context))];\n    case 'Asinh':\n      return [ops.asinh(getParamValue('x', node, tensorMap, context))];\n    case 'Atan':\n      return [ops.atan(getParamValue('x', node, tensorMap, context))];\n    case 'Atan2':\n      return [ops.atan2(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context))];\n    case 'Atanh':\n      return [ops.atanh(getParamValue('x', node, tensorMap, context))];\n    case 'Ceil':\n      return [ops.ceil(getParamValue('x', node, tensorMap, context))];\n    case 'Complex':\n      return [ops.complex(getParamValue('real', node, tensorMap, context), getParamValue('imag', node, tensorMap, context))];\n    case 'Cos':\n      return [ops.cos(getParamValue('x', node, tensorMap, context))];\n    case 'Cosh':\n      return [ops.cosh(getParamValue('x', node, tensorMap, context))];\n    case 'Elu':\n      return [ops.elu(getParamValue('x', node, tensorMap, context))];\n    case 'Erf':\n      return [ops.erf(getParamValue('x', node, tensorMap, context))];\n    case 'Exp':\n      return [ops.exp(getParamValue('x', node, tensorMap, context))];\n    case 'Expm1':\n      {\n        return [ops.expm1(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Floor':\n      return [ops.floor(getParamValue('x', node, tensorMap, context))];\n    case 'Log':\n      return [ops.log(getParamValue('x', node, tensorMap, context))];\n    case 'Log1p':\n      {\n        return [ops.log1p(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Imag':\n      return [ops.imag(getParamValue('x', node, tensorMap, context))];\n    case 'Neg':\n      return [ops.neg(getParamValue('x', node, tensorMap, context))];\n    case 'Reciprocal':\n      {\n        return [ops.reciprocal(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Real':\n      return [ops.real(getParamValue('x', node, tensorMap, context))];\n    case 'Relu':\n      return [ops.relu(getParamValue('x', node, tensorMap, context))];\n    case 'Round':\n      {\n        return [ops.round(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Selu':\n      return [ops.selu(getParamValue('x', node, tensorMap, context))];\n    case 'Sigmoid':\n      return [ops.sigmoid(getParamValue('x', node, tensorMap, context))];\n    case 'Sin':\n      return [ops.sin(getParamValue('x', node, tensorMap, context))];\n    case 'Sign':\n      {\n        return [ops.sign(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Sinh':\n      {\n        return [ops.sinh(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Softplus':\n      {\n        return [ops.softplus(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Sqrt':\n      {\n        return [ops.sqrt(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Square':\n      {\n        return [ops.square(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Tanh':\n      {\n        return [ops.tanh(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'Tan':\n      return [ops.tan(getParamValue('x', node, tensorMap, context))];\n    case 'ClipByValue':\n      return [ops.clipByValue(getParamValue('x', node, tensorMap, context), getParamValue('clipValueMin', node, tensorMap, context), getParamValue('clipValueMax', node, tensorMap, context))];\n    case 'Relu6':\n      return [ops.relu6(getParamValue('x', node, tensorMap, context))];\n    case 'Rsqrt':\n      return [ops.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'LeakyRelu':\n      return [ops.leakyRelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n    case 'Prelu':\n      return [ops.prelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n    case 'IsNan':\n      return [ops.isNaN(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'IsInf':\n      return [ops.isInf(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'IsFinite':\n      return [ops.isFinite(getTensor(node.inputNames[0], tensorMap, context))];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'basic_math';\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {\n  // constant shape means unknown rank\n  if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n    return;\n  }\n  util.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  for (let i = 0; i < shapeA.length; i++) {\n    const dim0 = shapeA[i];\n    const dim1 = shapeB[i];\n    util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n}\nexport function fullDefinedShape(elementShape) {\n  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n    return false;\n  }\n  return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(listElementShape, tensors, elementShape) {\n  let partialShape = mergeElementShape(listElementShape, elementShape);\n  const notfullDefinedShape = !fullDefinedShape(partialShape);\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(`Tried to calculate elements of an empty list` + ` with non-fully-defined elementShape: ${partialShape}`);\n  }\n  if (notfullDefinedShape) {\n    tensors.forEach(tensor => {\n      partialShape = mergeElementShape(tensor.shape, partialShape);\n    });\n  }\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n  }\n  return partialShape;\n}\nexport function mergeElementShape(elementShapeA, elementShapeB) {\n  if (typeof elementShapeA === 'number') {\n    return elementShapeB;\n  }\n  if (typeof elementShapeB === 'number') {\n    return elementShapeA;\n  }\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);\n  }\n  const result = [];\n  for (let i = 0; i < elementShapeA.length; ++i) {\n    const dim0 = elementShapeA[i];\n    const dim1 = elementShapeB[i];\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);\n    }\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n  return result;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n    this.name = name;\n    this.dtype = dtype;\n    this.maxSize = maxSize;\n    this.elementShape = elementShape;\n    this.identicalElementShapes = identicalElementShapes;\n    this.dynamicSize = dynamicSize;\n    this.clearAfterRead = clearAfterRead;\n    this.tensors = [];\n    this.closed_ = false;\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n  get id() {\n    return this.idTensor.id;\n  }\n  get closed() {\n    return this.closed_;\n  }\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose(keepIds) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n  size() {\n    return this.tensors.length;\n  }\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);\n    }\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` + `(perhaps try setting clear_after_read = false?).`);\n    }\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices) {\n    return indices.map(index => this.read(index));\n  }\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index, tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n    const t = this.tensors[index] || {};\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);\n    if (t.read) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);\n    }\n    if (t.written) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);\n    }\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n    this.tensors[index] = t;\n  }\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices, tensors) {\n    if (indices.length !== tensors.length) {\n      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` + `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);\n    }\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices, dtype) {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);\n    }\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n    return stack(tensors, 0);\n  }\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype) {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);\n    }\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n    return concat(tensors, 0);\n  }\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices number[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices, tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n    }\n    const maxIndex = Math.max(...indices);\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length, tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` + 'and the TensorArray is not marked as dynamically resizeable');\n    }\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\nexport class TensorList {\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {\n    this.tensors = tensors;\n    this.elementShape = elementShape;\n    this.elementDtype = elementDtype;\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy() {\n    return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n  }\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape, elementDtype, numElements = -1) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors = this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n    tensor.kept = false;\n    assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n    return reshape(tensor, outputElementShape);\n  }\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n    assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size) {\n    if (size < 0) {\n      throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n    const destTensorList = new TensorList([], this.elementShape, this.elementDtype, this.maxNumElements);\n    destTensorList.tensors.length = size;\n    for (let i = 0; i < Math.min(this.tensors.length, size); ++i) {\n      destTensorList.tensors[i] = this.tensors[i];\n    }\n    return destTensorList;\n  }\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex, elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n    assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex, tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    // dispose the previous value if it is replacing.\n    if (this.tensors[elementIndex] != null) {\n      this.tensors[elementIndex].kept = false;\n    }\n    this.tensors[elementIndex] = tensor;\n  }\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices, elementDtype, elementShape) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype, elementShape) {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(tensor, elementShape, elementDtype) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n * @param maxNumElements the maximum number of elements in th list\n */\nexport function reserve(elementShape, elementDtype, numElements, maxNumElements) {\n  return new TensorList([], elementShape, elementDtype, maxNumElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(tensor, indices, elementShape, numElements) {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n  }\n  const maxIndex = Math.max(...indices);\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(tensor, length, elementShape) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(slice(tensor, indices, sizes), outputElementShape);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = async (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf':\n      {\n        const thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n        const elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n        const cond = getParamValue('cond', node, tensorMap, context);\n        const args = getParamValue('args', node, tensorMap, context);\n        const condValue = await cond.data();\n        if (condValue[0]) {\n          return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        } else {\n          return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        }\n      }\n    case 'While':\n    case 'StatelessWhile':\n      {\n        const bodyFunc = getParamValue('body', node, tensorMap, context);\n        const condFunc = getParamValue('cond', node, tensorMap, context);\n        const args = getParamValue('args', node, tensorMap, context);\n        // Calculate the condition of the loop\n        const condResult = await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        const argIds = args.map(tensor => tensor.id);\n        let condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n        let result = args;\n        while (condValue[0]) {\n          // Record the previous result for intermediate tensor tracking\n          const origResult = result;\n          // Execution the body of the loop\n          result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n          const resultIds = result.map(tensor => tensor.id);\n          // Dispose the intermediate tensor for body function that is not global\n          // kept, not input/output of the body function\n          origResult.forEach(tensor => {\n            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n              tensor.dispose();\n            }\n          });\n          // Recalcuate the condition of the loop using the latest results.\n          const condResult = await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n          condValue = await condResult[0].data();\n          // Dispose the intermediate tensors for condition function\n          condResult.forEach(tensor => {\n            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n              tensor.dispose();\n            }\n          });\n        }\n        return result;\n      }\n    case 'LoopCond':\n      {\n        const pred = getParamValue('pred', node, tensorMap, context);\n        return [cloneTensor(pred)];\n      }\n    case 'Switch':\n      {\n        const pred = getParamValue('pred', node, tensorMap, context);\n        let data = getParamValue('data', node, tensorMap, context);\n        if (!data.kept) {\n          data = cloneTensor(data);\n        }\n        // Outputs nodes :0 => false, :1 => true\n        return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n      }\n    case 'Merge':\n      {\n        const inputName = node.inputNames.find(name => getTensor(name, tensorMap, context) !== undefined);\n        if (inputName) {\n          const data = getTensor(inputName, tensorMap, context);\n          return [cloneTensor(data)];\n        }\n        return undefined;\n      }\n    case 'Enter':\n      {\n        const frameId = getParamValue('frameName', node, tensorMap, context);\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.enterFrame(frameId);\n        return [cloneTensor(data)];\n      }\n    case 'Exit':\n      {\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.exitFrame();\n        return [cloneTensor(data)];\n      }\n    case 'NextIteration':\n      {\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.nextIteration();\n        return [cloneTensor(data)];\n      }\n    case 'TensorArrayV3':\n      {\n        const size = getParamValue('size', node, tensorMap, context);\n        const dtype = getParamValue('dtype', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n        const clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n        const identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n        const name = getParamValue('name', node, tensorMap, context);\n        const tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n        context.addTensorArray(tensorArray);\n        return [tensorArray.idTensor, scalar(1.0)];\n      }\n    case 'TensorArrayWriteV3':\n      {\n        const id = getParamValue('tensorArrayId', node, tensorMap, context);\n        const index = getParamValue('index', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const writeTensorArray = context.getTensorArray(id.id);\n        writeTensorArray.write(index, writeTensor);\n        return [writeTensorArray.idTensor];\n      }\n    case 'TensorArrayReadV3':\n      {\n        const readId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const readIndex = getParamValue('index', node, tensorMap, context);\n        const readTensorArray = context.getTensorArray(readId.id);\n        return [readTensorArray.read(readIndex)];\n      }\n    case 'TensorArrayGatherV3':\n      {\n        const gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const gatherIndices = getParamValue('indices', node, tensorMap, context);\n        const gatherDtype = getParamValue('dtype', node, tensorMap, context);\n        const gatherTensorArray = context.getTensorArray(gatherId.id);\n        return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n      }\n    case 'TensorArrayScatterV3':\n      {\n        const scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const scatterIndices = getParamValue('indices', node, tensorMap, context);\n        const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n        const scatterTensorArray = context.getTensorArray(scatterId.id);\n        scatterTensorArray.scatter(scatterIndices, scatterTensor);\n        return [scatterTensorArray.idTensor];\n      }\n    case 'TensorArrayConcatV3':\n      {\n        const concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const concatTensorArray = context.getTensorArray(concatId.id);\n        const concatDtype = getParamValue('dtype', node, tensorMap, context);\n        return [concatTensorArray.concat(concatDtype)];\n      }\n    case 'TensorArraySplitV3':\n      {\n        const splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const splitTensor = getParamValue('tensor', node, tensorMap, context);\n        const lengths = getParamValue('lengths', node, tensorMap, context);\n        const splitTensorArray = context.getTensorArray(splitId.id);\n        splitTensorArray.split(lengths, splitTensor);\n        return [splitTensorArray.idTensor];\n      }\n    case 'TensorArraySizeV3':\n      {\n        const sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const sizeTensorArray = context.getTensorArray(sizeId.id);\n        return [scalar(sizeTensorArray.size(), 'int32')];\n      }\n    case 'TensorArrayCloseV3':\n      {\n        const closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const closeTensorArray = context.getTensorArray(closeId.id);\n        closeTensorArray.clearAndClose();\n        return [closeTensorArray.idTensor];\n      }\n    case 'TensorListSetItem':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const index = getParamValue('index', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        tensorList.setItem(index, writeTensor);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListGetItem':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const readIndex = getParamValue('index', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDType = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.getItem(readIndex, elementShape, elementDType)];\n      }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter':\n      {\n        const scatterIndices = getParamValue('indices', node, tensorMap, context);\n        const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const numElements = getParamValue('numElements', node, tensorMap, context);\n        const tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListReserve':\n    case 'EmptyTensorList':\n      {\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        let numElementsParam;\n        if (node.op === 'TensorListReserve') {\n          numElementsParam = 'numElements';\n        } else {\n          numElementsParam = 'maxNumElements';\n        }\n        const numElements = getParamValue(numElementsParam, node, tensorMap, context);\n        const maxNumElements = node.op === 'TensorListReserve' ? -1 : numElements;\n        const tensorList = reserve(elementShape, elementDtype, numElements, maxNumElements);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListGather':\n      {\n        const gatherId = getParamValue('tensorListId', node, tensorMap, context);\n        const gatherIndices = getParamValue('indices', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(gatherId.id);\n        return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n      }\n    case 'TensorListStack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const numElements = getParamValue('numElements', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.stack(elementShape, elementDtype, numElements)];\n      }\n    case 'TensorListFromTensor':\n      {\n        const tensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = fromTensor(tensor, elementShape, elementDtype);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListConcat':\n    case 'TensorListConcatV2':\n      {\n        const concatId = getParamValue('tensorListId', node, tensorMap, context);\n        const tensorList = context.getTensorList(concatId.id);\n        const concatDtype = getParamValue('dtype', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        return [tensorList.concat(concatDtype, elementShape)];\n      }\n    case 'TensorListPushBack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        tensorList.pushBack(writeTensor);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListPopBack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDType = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.popBack(elementShape, elementDType)];\n      }\n    case 'TensorListSplit':\n      {\n        const splitTensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const lengths = getParamValue('lengths', node, tensorMap, context);\n        const tensorList = split(splitTensor, lengths, elementShape);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n    case 'TensorListLength':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [scalar(tensorList.size(), 'int32')];\n      }\n    case 'TensorListResize':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const size = getParamValue('size', node, tensorMap, context);\n        const srcTensorList = context.getTensorList(idTensor.id);\n        const destTensorList = srcTensorList.resize(size);\n        context.addTensorList(destTensorList);\n        return [destTensorList.idTensor];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'control';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getPadding, getParamValue } from './utils';\nfunction fusedConvAndDepthWiseParams(node, tensorMap, context) {\n  const [extraOp, activationFunc] = getParamValue('fusedOps', node, tensorMap, context);\n  const isBiasAdd = extraOp === 'biasadd';\n  const noBiasAdd = !isBiasAdd;\n  const isPrelu = activationFunc === 'prelu';\n  const isBatchNorm = extraOp === 'fusedbatchnorm';\n  const numArgs = getParamValue('numArgs', node, tensorMap, context);\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' + 'must have two extra arguments: bias and alpha.');\n    }\n    if (!isPrelu && isBiasAdd && numArgs !== 1) {\n      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' + 'one extra argument: bias.');\n    }\n  }\n  if (isBatchNorm) {\n    throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n  }\n  const stride = getParamValue('strides', node, tensorMap, context);\n  const pad = getPadding(node, tensorMap, context);\n  const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n  const dilations = getParamValue('dilations', node, tensorMap, context);\n  let [biasArg, preluArg] = getParamValue('args', node, tensorMap, context);\n  if (noBiasAdd) {\n    preluArg = biasArg;\n    biasArg = undefined;\n  }\n  const leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n  return {\n    stride,\n    pad,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc,\n    leakyreluAlpha\n  };\n}\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'Conv1D':\n      {\n        const stride = getParamValue('stride', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        const dilation = getParamValue('dilation', node, tensorMap, context);\n        return [ops.conv1d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];\n      }\n    case 'Conv2D':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getPadding(node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        const dilations = getParamValue('dilations', node, tensorMap, context);\n        return [ops.conv2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n      }\n    case '_FusedConv2D':\n      {\n        const {\n          stride,\n          pad,\n          dataFormat,\n          dilations,\n          biasArg,\n          preluArg,\n          activationFunc,\n          leakyreluAlpha\n        } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n        return [ops.fused.conv2d({\n          x: getParamValue('x', node, tensorMap, context),\n          filter: getParamValue('filter', node, tensorMap, context),\n          strides: [stride[1], stride[2]],\n          pad: pad,\n          dataFormat: dataFormat,\n          dilations: [dilations[1], dilations[2]],\n          bias: biasArg,\n          activation: activationFunc,\n          preluActivationWeights: preluArg,\n          leakyreluAlpha\n        })];\n      }\n    case 'FusedDepthwiseConv2dNative':\n      {\n        const {\n          stride,\n          pad,\n          dataFormat,\n          dilations,\n          biasArg,\n          preluArg,\n          activationFunc,\n          leakyreluAlpha\n        } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n        return [ops.fused.depthwiseConv2d({\n          x: getParamValue('x', node, tensorMap, context),\n          filter: getParamValue('filter', node, tensorMap, context),\n          strides: [stride[1], stride[2]],\n          pad: pad,\n          dataFormat: dataFormat,\n          dilations: [dilations[1], dilations[2]],\n          bias: biasArg,\n          activation: activationFunc,\n          preluActivationWeights: preluArg,\n          leakyreluAlpha\n        })];\n      }\n    case 'Conv2DBackpropInput':\n    case 'Conv2dTranspose':\n      {\n        const shape = getParamValue('outputShape', node, tensorMap, context);\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getPadding(node, tensorMap, context);\n        return [ops.conv2dTranspose(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];\n      }\n    case 'DepthwiseConv2dNative':\n    case 'DepthwiseConv2d':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getPadding(node, tensorMap, context);\n        const dilations = getParamValue('dilations', node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        return [ops.depthwiseConv2d(getParamValue('input', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n      }\n    case 'Conv3D':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        const dilations = getParamValue('dilations', node, tensorMap, context);\n        return [ops.conv3d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];\n      }\n    case 'AvgPool':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [ops.avgPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n      }\n    case 'MaxPool':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [ops.maxPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n      }\n    case 'MaxPoolWithArgmax':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        const includeBatchInIndex = getParamValue('includeBatchInIndex', node, tensorMap, context);\n        const {\n          result,\n          indexes\n        } = ops.maxPoolWithArgmax(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex);\n        return [result, indexes];\n      }\n    case 'AvgPool3D':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [ops.avgPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n      }\n    case 'MaxPool3D':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [ops.maxPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n      }\n    case 'Dilation2D':\n      {\n        const strides = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const dilations = getParamValue('dilations', node, tensorMap, context);\n        // strides: [1, stride_height, stride_width, 1].\n        const strideHeight = strides[1];\n        const strideWidth = strides[2];\n        // dilations: [1, dilation_height, dilation_width, 1].\n        const dilationHeight = dilations[1];\n        const dilationWidth = dilations[2];\n        return [ops.dilation2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'convolution';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'Fill':\n      {\n        const shape = getParamValue('shape', node, tensorMap, context);\n        const dtype = getParamValue('dtype', node, tensorMap, context);\n        const value = getParamValue('value', node, tensorMap, context);\n        return [ops.fill(shape, value, dtype)];\n      }\n    case 'LinSpace':\n      {\n        const start = getParamValue('start', node, tensorMap, context);\n        const stop = getParamValue('stop', node, tensorMap, context);\n        const num = getParamValue('num', node, tensorMap, context);\n        return [ops.linspace(start, stop, num)];\n      }\n    case 'Multinomial':\n      {\n        const logits = getParamValue('logits', node, tensorMap, context);\n        const numSamples = getParamValue('numSamples', node, tensorMap, context);\n        const seed = getParamValue('seed', node, tensorMap, context);\n        return [ops.multinomial(logits, numSamples, seed)];\n      }\n    case 'OneHot':\n      {\n        const indices = getParamValue('indices', node, tensorMap, context);\n        const depth = getParamValue('depth', node, tensorMap, context);\n        const onValue = getParamValue('onValue', node, tensorMap, context);\n        const offValue = getParamValue('offValue', node, tensorMap, context);\n        const dtype = getParamValue('dtype', node, tensorMap, context);\n        return [ops.oneHot(indices, depth, onValue, offValue, dtype)];\n      }\n    case 'Ones':\n      {\n        return [ops.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'OnesLike':\n      {\n        return [ops.onesLike(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'RandomStandardNormal':\n      {\n        return [ops.randomStandardNormal(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context), getParamValue('seed', node, tensorMap, context))];\n      }\n    case 'RandomUniform':\n      {\n        return [ops.randomUniform(\n        // tslint:disable-next-line:no-any\n        getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'RandomUniformInt':\n      {\n        return [ops.randomUniformInt(getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('seed', node, tensorMap, context))];\n      }\n    case 'Range':\n      {\n        const start = getParamValue('start', node, tensorMap, context);\n        const stop = getParamValue('stop', node, tensorMap, context);\n        const step = getParamValue('step', node, tensorMap, context);\n        return [ops.range(start, stop, step, getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'TruncatedNormal':\n      {\n        const shape = getParamValue('shape', node, tensorMap, context);\n        const mean = getParamValue('mean', node, tensorMap, context);\n        const stdDev = getParamValue('stdDev', node, tensorMap, context);\n        const seed = getParamValue('seed', node, tensorMap, context);\n        return [ops.truncatedNormal(shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), seed)];\n      }\n    case 'Zeros':\n      {\n        return [ops.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'ZerosLike':\n      {\n        return [ops.zerosLike(getParamValue('x', node, tensorMap, context))];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'creation';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nfunction nmsParams(node, tensorMap, context) {\n  const boxes = getParamValue('boxes', node, tensorMap, context);\n  const scores = getParamValue('scores', node, tensorMap, context);\n  const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n  const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n  const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n  const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\nexport const executeOp = async (node, tensorMap, context, resourceManager, ops = tfOps) => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold,\n          softNmsSigma\n        } = nmsParams(node, tensorMap, context);\n        const result = await ops.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n        return [result.selectedIndices, result.selectedScores];\n      }\n    case 'NonMaxSuppressionV4':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        const padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n        const result = await ops.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n        return [result.selectedIndices, result.validOutputs];\n      }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        return [await ops.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n      }\n    case 'Where':\n      {\n        const condition = ops.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n        const result = [await ops.whereAsync(condition)];\n        condition.dispose();\n        return result;\n      }\n    case 'ListDiff':\n      {\n        return ops.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context));\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'dynamic';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'LowerBound':\n      {\n        const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        return [ops.lowerBound(sortedSequence, values)];\n      }\n    case 'TopKV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const k = getParamValue('k', node, tensorMap, context);\n        const sorted = getParamValue('sorted', node, tensorMap, context);\n        const result = ops.topk(x, k, sorted);\n        return [result.values, result.indices];\n      }\n    case 'UpperBound':\n      {\n        const sortedSequence = getParamValue('sortedSequence', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        return [ops.upperBound(sortedSequence, values)];\n      }\n    case 'Unique':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const result = ops.unique(x);\n        return [result.values, result.indices];\n      }\n    case 'UniqueV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const result = ops.unique(x, axis);\n        return [result.values, result.indices];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'evaluation';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'Const':\n      {\n        return tensorMap[node.name];\n      }\n    case 'PlaceholderWithDefault':\n      const def = getParamValue('default', node, tensorMap, context);\n      return [getTensor(node.name, tensorMap, context) || def];\n    case 'Placeholder':\n      return [getTensor(node.name, tensorMap, context)];\n    case 'Identity':\n    case 'StopGradient':\n    case 'FakeQuantWithMinMaxVars':\n      {\n        // This op is currently ignored.\n        const data = getParamValue('x', node, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n    case 'IdentityN':\n      return getParamValue('x', node, tensorMap, context).map(t => cloneTensor(t));\n    case 'Snapshot':\n      const snapshot = getParamValue('x', node, tensorMap, context);\n      return [cloneTensor(snapshot)];\n    case 'Shape':\n      return [ops.tensor1d(getParamValue('x', node, tensorMap, context).shape, 'int32')];\n    case 'ShapeN':\n      return getParamValue('x', node, tensorMap, context).map(t => ops.tensor1d(t.shape));\n    case 'Size':\n      return [ops.scalar(getParamValue('x', node, tensorMap, context).size, 'int32')];\n    case 'Rank':\n      return [ops.scalar(getParamValue('x', node, tensorMap, context).rank, 'int32')];\n    case 'NoOp':\n      return [ops.scalar(1)];\n    case 'Print':\n      const input = getParamValue('x', node, tensorMap, context);\n      const data = getParamValue('data', node, tensorMap, context);\n      const message = getParamValue('message', node, tensorMap, context);\n      const summarize = getParamValue('summarize', node, tensorMap, context);\n      console.warn('The graph has a tf.print() operation,' + 'usually used for debugging, which slows down performance.');\n      console.log(message);\n      for (let i = 0; i < data.length; i++) {\n        console.log(Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));\n      }\n      return [input];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'graph';\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  get id() {\n    return this.handle.id;\n  }\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(keyDType, valueDType) {\n    this.keyDType = keyDType;\n    this.valueDType = valueDType;\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map();\n    keep(this.handle);\n  }\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n  /**\n   * The number of items in the hash table.\n   */\n  size() {\n    return this.tensorMap.size;\n  }\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n  tensorSize() {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys, values) {\n    this.checkKeyAndValueTensor(keys, values);\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    return tidy(() => {\n      const $values = unstack(values);\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n      util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` + `${keysLength} elements, the values has ${valuesLength} ` + `elements.`);\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n      return this.handle;\n    });\n  }\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys, defaultValue) {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n    const $keys = await keys.data();\n    return tidy(() => {\n      const result = [];\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n      return stack(result);\n    });\n  }\n  // tslint:disable-next-line: no-any\n  findWithDefault(key, defaultValue) {\n    const result = this.tensorMap.get(key);\n    return result != null ? result : defaultValue;\n  }\n  checkKeyAndValueTensor(key, value) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(`Expect key dtype ${this.keyDType}, but got ` + `${key.dtype}`);\n    }\n    if (value.dtype !== this.valueDType) {\n      throw new Error(`Expect value dtype ${this.valueDType}, but got ` + `${value.dtype}`);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = async (node, tensorMap, context, resourceManager) => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2':\n      {\n        const existingTableHandle = resourceManager.getHashTableHandleByName(node.name);\n        // Table is shared with initializer.\n        if (existingTableHandle != null) {\n          return [existingTableHandle];\n        } else {\n          const keyDType = getParamValue('keyDType', node, tensorMap, context);\n          const valueDType = getParamValue('valueDType', node, tensorMap, context);\n          const hashTable = new HashTable(keyDType, valueDType);\n          resourceManager.addHashTable(node.name, hashTable);\n          return [hashTable.handle];\n        }\n      }\n    case 'InitializeTable':\n    case 'InitializeTableV2':\n    case 'LookupTableImport':\n    case 'LookupTableImportV2':\n      {\n        const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n        const keys = getParamValue('keys', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        const hashTable = resourceManager.getHashTableById(handle.id);\n        return [await hashTable.import(keys, values)];\n      }\n    case 'LookupTableFind':\n    case 'LookupTableFindV2':\n      {\n        const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n        const keys = getParamValue('keys', node, tensorMap, context);\n        const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n        const hashTable = resourceManager.getHashTableById(handle.id);\n        return [await hashTable.find(keys, defaultValue)];\n      }\n    case 'LookupTableSize':\n    case 'LookupTableSizeV2':\n      {\n        const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n        const hashTable = resourceManager.getHashTableById(handle.id);\n        return [hashTable.tensorSize()];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'hash_table';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'ResizeBilinear':\n      {\n        const images = getParamValue('images', node, tensorMap, context);\n        const size = getParamValue('size', node, tensorMap, context);\n        const alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n        const halfPixelCenters = getParamValue('halfPixelCenters', node, tensorMap, context);\n        return [ops.image.resizeBilinear(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n      }\n    case 'ResizeNearestNeighbor':\n      {\n        const images = getParamValue('images', node, tensorMap, context);\n        const size = getParamValue('size', node, tensorMap, context);\n        const alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n        const halfPixelCenters = getParamValue('halfPixelCenters', node, tensorMap, context);\n        return [ops.image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n      }\n    case 'CropAndResize':\n      {\n        const image = getParamValue('image', node, tensorMap, context);\n        const boxes = getParamValue('boxes', node, tensorMap, context);\n        const boxInd = getParamValue('boxInd', node, tensorMap, context);\n        const cropSize = getParamValue('cropSize', node, tensorMap, context);\n        const method = getParamValue('method', node, tensorMap, context);\n        const extrapolationValue = getParamValue('extrapolationValue', node, tensorMap, context);\n        return [ops.image.cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)];\n      }\n    case 'ImageProjectiveTransformV3':\n      {\n        const images = getParamValue('images', node, tensorMap, context);\n        const transforms = getParamValue('transforms', node, tensorMap, context);\n        const outputShape = getParamValue('outputShape', node, tensorMap, context);\n        const fillValue = getParamValue('fillValue', node, tensorMap, context);\n        const interpolation = getParamValue('interpolation', node, tensorMap, context);\n        const fillMode = getParamValue('fillMode', node, tensorMap, context);\n        return [ops.image.transform(images, transforms, interpolation.toLowerCase(), fillMode.toLowerCase(), fillValue, outputShape)];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'image';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'Equal':\n      {\n        return [ops.equal(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'NotEqual':\n      {\n        return [ops.notEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'Greater':\n      {\n        return [ops.greater(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'GreaterEqual':\n      {\n        return [ops.greaterEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'Less':\n      {\n        return [ops.less(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'LessEqual':\n      {\n        return [ops.lessEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'LogicalAnd':\n      {\n        return [ops.logicalAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'LogicalNot':\n      {\n        return [ops.logicalNot(getParamValue('a', node, tensorMap, context))];\n      }\n    case 'LogicalOr':\n      {\n        return [ops.logicalOr(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'Select':\n    case 'SelectV2':\n      {\n        return [ops.where(getParamValue('condition', node, tensorMap, context), getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    case 'BitwiseAnd':\n      {\n        return [ops.bitwiseAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'logical';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'BatchMatMul':\n    case 'BatchMatMulV2':\n    case 'MatMul':\n      return [ops.matMul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context), getParamValue('transposeA', node, tensorMap, context), getParamValue('transposeB', node, tensorMap, context))];\n    case 'Einsum':\n      return [ops.einsum(getParamValue('equation', node, tensorMap, context), ...getParamValue('tensors', node, tensorMap, context))];\n    case 'Transpose':\n      return [ops.transpose(getParamValue('x', node, tensorMap, context), getParamValue('perm', node, tensorMap, context))];\n    case '_FusedMatMul':\n      const [extraOp, activationFunc] = getParamValue('fusedOps', node, tensorMap, context);\n      const isBiasAdd = extraOp === 'biasadd';\n      const isPrelu = activationFunc === 'prelu';\n      const numArgs = getParamValue('numArgs', node, tensorMap, context);\n      const leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error('Fused MatMul with BiasAdd and Prelu must have two ' + 'extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error('Fused MatMul with BiasAdd must have one extra argument: bias.');\n        }\n      }\n      const [biasArg, preluArg] = getParamValue('args', node, tensorMap, context);\n      return [ops.fused.matMul({\n        a: getParamValue('a', node, tensorMap, context),\n        b: getParamValue('b', node, tensorMap, context),\n        transposeA: getParamValue('transposeA', node, tensorMap, context),\n        transposeB: getParamValue('transposeB', node, tensorMap, context),\n        bias: biasArg,\n        activation: activationFunc,\n        preluActivationWeights: preluArg,\n        leakyreluAlpha\n      })];\n    case 'MatrixBandPart':\n      return [ops.linalg.bandPart(getParamValue('a', node, tensorMap, context), getParamValue('numLower', node, tensorMap, context), getParamValue('numUpper', node, tensorMap, context))];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'matrices';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'EuclideanNorm':\n      return [ops.euclideanNorm(getParamValue('x', node, tensorMap, context), getParamValue('axis', node, tensorMap, context), getParamValue('keepDims', node, tensorMap, context))];\n    case 'FusedBatchNorm':\n    case 'FusedBatchNormV2':\n      {\n        return [ops.batchNorm(getParamValue('x', node, tensorMap, context), getParamValue('mean', node, tensorMap, context), getParamValue('variance', node, tensorMap, context), getParamValue('offset', node, tensorMap, context), getParamValue('scale', node, tensorMap, context), getParamValue('epsilon', node, tensorMap, context))];\n      }\n    case 'FusedBatchNormV3':\n      {\n        return [ops.batchNorm(getParamValue('x', node, tensorMap, context), getParamValue('mean', node, tensorMap, context), getParamValue('variance', node, tensorMap, context), getParamValue('offset', node, tensorMap, context), getParamValue('scale', node, tensorMap, context), getParamValue('epsilon', node, tensorMap, context))];\n      }\n    case 'LRN':\n      {\n        return [ops.localResponseNormalization(getParamValue('x', node, tensorMap, context), getParamValue('radius', node, tensorMap, context), getParamValue('bias', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context), getParamValue('beta', node, tensorMap, context))];\n      }\n    case 'Softmax':\n      {\n        return [ops.softmax(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'LogSoftmax':\n      {\n        return [ops.logSoftmax(getParamValue('x', node, tensorMap, context))];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'normalization';\n", "/**\n * @license\n * Copyright 2022 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'RaggedGather':\n      {\n        const {\n          outputNestedSplits,\n          outputDenseValues\n        } = ops.raggedGather(getParamValue('paramsNestedSplits', node, tensorMap, context), getParamValue('paramsDenseValues', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('outputRaggedRank', node, tensorMap, context));\n        return outputNestedSplits.concat(outputDenseValues);\n      }\n    case 'RaggedRange':\n      {\n        const {\n          rtNestedSplits,\n          rtDenseValues\n        } = ops.raggedRange(getParamValue('starts', node, tensorMap, context), getParamValue('limits', node, tensorMap, context), getParamValue('splits', node, tensorMap, context));\n        return [rtNestedSplits, rtDenseValues];\n      }\n    case 'RaggedTensorToTensor':\n      {\n        return [ops.raggedTensorToTensor(getParamValue('shape', node, tensorMap, context), getParamValue('values', node, tensorMap, context), getParamValue('defaultValue', node, tensorMap, context), getParamValue('rowPartitionTensors', node, tensorMap, context), getParamValue('rowPartitionTypes', node, tensorMap, context))];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'ragged';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'Max':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n    case 'Mean':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.mean(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n    case 'Min':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.min(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n    case 'Sum':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.sum(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n    case 'All':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.all(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n    case 'Any':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.any(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n    case 'ArgMax':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [ops.argMax(getParamValue('x', node, tensorMap, context), axis)];\n      }\n    case 'ArgMin':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [ops.argMin(getParamValue('x', node, tensorMap, context), axis)];\n      }\n    case 'Prod':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [ops.prod(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n    case 'Cumprod':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const exclusive = getParamValue('exclusive', node, tensorMap, context);\n        const reverse = getParamValue('reverse', node, tensorMap, context);\n        return [ops.cumprod(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\n      }\n    case 'Cumsum':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const exclusive = getParamValue('exclusive', node, tensorMap, context);\n        const reverse = getParamValue('reverse', node, tensorMap, context);\n        return [ops.cumsum(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\n      }\n    case 'Bincount':\n      const x = getParamValue('x', node, tensorMap, context);\n      const weights = getParamValue('weights', node, tensorMap, context);\n      const size = getParamValue('size', node, tensorMap, context);\n      return [ops.bincount(x, weights, size)];\n    case 'DenseBincount':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const weights = getParamValue('weights', node, tensorMap, context);\n        const size = getParamValue('size', node, tensorMap, context);\n        const binaryOutput = getParamValue('binaryOutput', node, tensorMap, context);\n        return [ops.denseBincount(x, weights, size, binaryOutput)];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'reduction';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tidy, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat':\n      {\n        const n = getParamValue('n', node, tensorMap, context);\n        const axis = getParamValue('axis', node, tensorMap, context);\n        let inputs = getParamValue('tensors', node, tensorMap, context);\n        inputs = inputs.slice(0, n);\n        return [ops.concat(inputs, axis)];\n      }\n    case 'Gather':\n      {\n        const input = getParamValue('x', node, tensorMap, context);\n        const indices = getParamValue('indices', node, tensorMap, context);\n        return [ops.gather(input, ops.cast(indices, 'int32'), 0)];\n      }\n    case 'GatherV2':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const batchDims = getParamValue('batchDims', node, tensorMap, context);\n        const input = getParamValue('x', node, tensorMap, context);\n        const indices = getParamValue('indices', node, tensorMap, context);\n        return [ops.gather(input, ops.cast(indices, 'int32'), axis, batchDims)];\n      }\n    case 'Reverse':\n      {\n        const dims = getParamValue('dims', node, tensorMap, context);\n        const axis = [];\n        for (let i = 0; i < dims.length; i++) {\n          if (dims[i]) {\n            axis.push(i);\n          }\n        }\n        const input = getParamValue('x', node, tensorMap, context);\n        return [ops.reverse(input, axis)];\n      }\n    case 'ReverseV2':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const input = getParamValue('x', node, tensorMap, context);\n        return [ops.reverse(input, axis)];\n      }\n    case 'Slice':\n      {\n        // tslint:disable-next-line:no-any\n        const begin = getParamValue('begin', node, tensorMap, context);\n        // tslint:disable-next-line:no-any\n        const size = getParamValue('size', node, tensorMap, context);\n        return [ops.slice(getParamValue('x', node, tensorMap, context), begin, size)];\n      }\n    case 'StridedSlice':\n      {\n        const begin = getParamValue('begin', node, tensorMap, context);\n        const end = getParamValue('end', node, tensorMap, context);\n        const strides = getParamValue('strides', node, tensorMap, context);\n        const beginMask = getParamValue('beginMask', node, tensorMap, context);\n        const endMask = getParamValue('endMask', node, tensorMap, context);\n        const ellipsisMask = getParamValue('ellipsisMask', node, tensorMap, context);\n        const newAxisMask = getParamValue('newAxisMask', node, tensorMap, context);\n        const shrinkAxisMask = getParamValue('shrinkAxisMask', node, tensorMap, context);\n        const tensor = getParamValue('x', node, tensorMap, context);\n        return [ops.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];\n      }\n    case 'Pack':\n      {\n        return tidy(() => {\n          const axis = getParamValue('axis', node, tensorMap, context);\n          const tensors = getParamValue('tensors', node, tensorMap, context);\n          // Reshape the tensors to the first tensor's shape if they don't\n          // match.\n          const shape = tensors[0].shape;\n          const squeezedShape = ops.squeeze(tensors[0]).shape;\n          const mapped = tensors.map(tensor => {\n            const sameShape = util.arraysEqual(tensor.shape, shape);\n            if (!sameShape && !util.arraysEqual(ops.squeeze(tensor).shape, squeezedShape)) {\n              throw new Error('the input tensors shape does not match');\n            }\n            return sameShape ? tensor : ops.reshape(tensor, shape);\n          });\n          return [ops.stack(mapped, axis)];\n        });\n      }\n    case 'Unpack':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const tensor = getParamValue('tensor', node, tensorMap, context);\n        return ops.unstack(tensor, axis);\n      }\n    case 'Tile':\n      {\n        const reps = getParamValue('reps', node, tensorMap, context);\n        return [ops.tile(getParamValue('x', node, tensorMap, context), reps)];\n      }\n    case 'Split':\n    case 'SplitV':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);\n        const tensor = getParamValue('x', node, tensorMap, context);\n        return ops.split(tensor, numOrSizeSplits, axis);\n      }\n    case 'ScatterNd':\n      {\n        const indices = getParamValue('indices', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        const shape = getParamValue('shape', node, tensorMap, context);\n        return [ops.scatterND(indices, values, shape)];\n      }\n    case 'GatherNd':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const indices = getParamValue('indices', node, tensorMap, context);\n        return [ops.gatherND(x, indices)];\n      }\n    case 'SparseToDense':\n      {\n        const indices = getParamValue('sparseIndices', node, tensorMap, context);\n        const shape = getParamValue('outputShape', node, tensorMap, context);\n        const sparseValues = getParamValue('sparseValues', node, tensorMap, context);\n        const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n        return [ops.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ? defaultValue : ops.cast(defaultValue, sparseValues.dtype))];\n      }\n    case 'TensorScatterUpdate':\n      {\n        const indices = getParamValue('indices', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        const tensor = getParamValue('tensor', node, tensorMap, context);\n        return [ops.tensorScatterUpdate(tensor, indices, values)];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'slice_join';\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'SparseFillEmptyRows':\n      {\n        const {\n          outputIndices,\n          outputValues,\n          emptyRowIndicator,\n          reverseIndexMap\n        } = ops.sparse.sparseFillEmptyRows(getParamValue('indices', node, tensorMap, context), getParamValue('values', node, tensorMap, context), getParamValue('denseShape', node, tensorMap, context), getParamValue('defaultValue', node, tensorMap, context));\n        return [outputIndices, outputValues, emptyRowIndicator, reverseIndexMap];\n      }\n    case 'SparseReshape':\n      {\n        const {\n          outputIndices,\n          outputShape\n        } = ops.sparse.sparseReshape(getParamValue('inputIndices', node, tensorMap, context), getParamValue('inputShape', node, tensorMap, context), getParamValue('newShape', node, tensorMap, context));\n        return [outputIndices, outputShape];\n      }\n    case 'SparseSegmentMean':\n      {\n        const outputData = ops.sparse.sparseSegmentMean(getParamValue('data', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('segmentIds', node, tensorMap, context));\n        return [outputData];\n      }\n    case 'SparseSegmentSum':\n      {\n        const outputData = ops.sparse.sparseSegmentSum(getParamValue('data', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('segmentIds', node, tensorMap, context));\n        return [outputData];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'sparse';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'FFT':\n      {\n        return [ops.fft(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'IFFT':\n      {\n        return [ops.ifft(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'RFFT':\n      {\n        return [ops.rfft(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'IRFFT':\n      {\n        return [ops.irfft(getParamValue('x', node, tensorMap, context))];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'spectral';\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'StaticRegexReplace':\n      {\n        return [ops.string.staticRegexReplace(getParamValue('input', node, tensorMap, context), getParamValue('pattern', node, tensorMap, context), getParamValue('rewrite', node, tensorMap, context), getParamValue('replaceGlobal', node, tensorMap, context))];\n      }\n    case 'StringNGrams':\n      {\n        const {\n          nGrams,\n          nGramsSplits\n        } = ops.string.stringNGrams(getParamValue('data', node, tensorMap, context), getParamValue('dataSplits', node, tensorMap, context), getParamValue('separator', node, tensorMap, context), getParamValue('nGramWidths', node, tensorMap, context), getParamValue('leftPad', node, tensorMap, context), getParamValue('rightPad', node, tensorMap, context), getParamValue('padWidth', node, tensorMap, context), getParamValue('preserveShortSequences', node, tensorMap, context));\n        return [nGrams, nGramsSplits];\n      }\n    case 'StringSplit':\n      {\n        const {\n          indices,\n          values,\n          shape\n        } = ops.string.stringSplit(getParamValue('input', node, tensorMap, context), getParamValue('delimiter', node, tensorMap, context), getParamValue('skipEmpty', node, tensorMap, context));\n        return [indices, values, shape];\n      }\n    case 'StringToHashBucketFast':\n      {\n        const output = ops.string.stringToHashBucketFast(getParamValue('input', node, tensorMap, context), getParamValue('numBuckets', node, tensorMap, context));\n        return [output];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'string';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context, ops = tfOps) => {\n  switch (node.op) {\n    case 'Cast':\n      {\n        return [ops.cast(getParamValue('x', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'ExpandDims':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [ops.expandDims(getParamValue('x', node, tensorMap, context), axis)];\n      }\n    case 'Squeeze':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [ops.squeeze(getParamValue('x', node, tensorMap, context), axis)];\n      }\n    case 'Reshape':\n      {\n        return [ops.reshape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n      }\n    case 'EnsureShape':\n      {\n        return [ops.ensureShape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n      }\n    case 'MirrorPad':\n      {\n        return [ops.mirrorPad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('mode', node, tensorMap, context))];\n      }\n    case 'PadV2':\n    case 'Pad':\n      {\n        return [ops.pad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('constantValue', node, tensorMap, context))];\n      }\n    case 'SpaceToBatchND':\n      {\n        const blockShape = getParamValue('blockShape', node, tensorMap, context);\n        const paddings = getParamValue('paddings', node, tensorMap, context);\n        return [ops.spaceToBatchND(getParamValue('x', node, tensorMap, context), blockShape, paddings)];\n      }\n    case 'BatchToSpaceND':\n      {\n        const blockShape = getParamValue('blockShape', node, tensorMap, context);\n        const crops = getParamValue('crops', node, tensorMap, context);\n        return [ops.batchToSpaceND(getParamValue('x', node, tensorMap, context), blockShape, crops)];\n      }\n    case 'DepthToSpace':\n      {\n        const blockSize = getParamValue('blockSize', node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        return [ops.depthToSpace(getParamValue('x', node, tensorMap, context), blockSize, dataFormat)];\n      }\n    case 'BroadcastTo':\n      {\n        return [ops.broadcastTo(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n      }\n    case 'BroadcastArgs':\n      {\n        return [ops.broadcastArgs(getParamValue('s0', node, tensorMap, context), getParamValue('s1', node, tensorMap, context))];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'transformation';\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as ragged from './executors/ragged_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(node, tensorMap, context, resourceManager, tidy = tfc.tidy) {\n  const value = ((node, tensorMap, context) => {\n    switch (node.category) {\n      case 'arithmetic':\n        return tidy(() => arithmetic.executeOp(node, tensorMap, context));\n      case 'basic_math':\n        return tidy(() => basicMath.executeOp(node, tensorMap, context));\n      case 'control':\n        return control.executeOp(node, tensorMap, context);\n      case 'convolution':\n        return tidy(() => convolution.executeOp(node, tensorMap, context));\n      case 'creation':\n        return tidy(() => creation.executeOp(node, tensorMap, context));\n      case 'dynamic':\n        return dynamic.executeOp(node, tensorMap, context);\n      case 'evaluation':\n        return tidy(() => evaluation.executeOp(node, tensorMap, context));\n      case 'image':\n        return tidy(() => image.executeOp(node, tensorMap, context));\n      case 'graph':\n        return tidy(() => graph.executeOp(node, tensorMap, context));\n      case 'logical':\n        return tidy(() => logical.executeOp(node, tensorMap, context));\n      case 'matrices':\n        return tidy(() => matrices.executeOp(node, tensorMap, context));\n      case 'normalization':\n        return tidy(() => normalization.executeOp(node, tensorMap, context));\n      case 'ragged':\n        return tidy(() => ragged.executeOp(node, tensorMap, context));\n      case 'reduction':\n        return tidy(() => reduction.executeOp(node, tensorMap, context));\n      case 'slice_join':\n        return tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n      case 'sparse':\n        return tidy(() => sparse.executeOp(node, tensorMap, context));\n      case 'spectral':\n        return tidy(() => spectral.executeOp(node, tensorMap, context));\n      case 'string':\n        return tidy(() => string.executeOp(node, tensorMap, context));\n      case 'transformation':\n        return tidy(() => transformation.executeOp(node, tensorMap, context));\n      case 'hash_table':\n        return hashTable.executeOp(node, tensorMap, context, resourceManager);\n      case 'custom':\n        const opMapper = getRegisteredOp(node.op);\n        if (opMapper && opMapper.customExecutor) {\n          return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n        } else {\n          throw TypeError(`Custom op ${node.op} is not registered.`);\n        }\n      default:\n        throw TypeError(`Unknown op '${node.op}'. File an issue at ` + `https://github.com/tensorflow/tfjs/issues so we can add it` + `, or register a custom execution with tf.registerOp()`);\n    }\n  })(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return value.then(data => [].concat(data));\n  }\n  return [].concat(value);\n}\n", "/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  constructor(weightMap = {}, tensorArrayMap = {}, tensorListMap = {}, functionMap = {}, parseNodeNameCache) {\n    this.weightMap = weightMap;\n    this.tensorArrayMap = tensorArrayMap;\n    this.tensorListMap = tensorListMap;\n    this.functionMap = functionMap;\n    this.parseNodeNameCache = parseNodeNameCache;\n    this.rootContext = {\n      id: 0,\n      frameName: '',\n      iterationId: 0\n    };\n    this.contexts = [this.rootContext];\n    this.lastId = 0;\n    this.generateCurrentContextIds();\n  }\n  newFrame(id, frameName) {\n    return {\n      id,\n      frameName,\n      iterationId: 0\n    };\n  }\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n  get currentContext() {\n    return this.contexts;\n  }\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId() {\n    return this._currentContextIds[0];\n  }\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds() {\n    return this._currentContextIds;\n  }\n  generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n  contextIdforContexts(contexts) {\n    return contexts ? contexts.map(context => context.id === 0 && context.iterationId === 0 ? '' : `${context.frameName}-${context.iterationId}`).join('/') : '';\n  }\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context = Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n  getWeight(name) {\n    return this.weightMap[name];\n  }\n  addTensorArray(tensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n  getTensorArray(id) {\n    return this.tensorArrayMap[id];\n  }\n  addTensorList(tensorList) {\n    this.tensorListMap[tensorList.id] = tensorList;\n  }\n  getTensorList(id) {\n    return this.tensorListMap[id];\n  }\n  dispose(keepIds) {\n    for (const key in this.tensorArrayMap) {\n      this.tensorArrayMap[key].clearAndClose(keepIds);\n    }\n    for (const key in this.tensorListMap) {\n      this.tensorListMap[key].clearAndClose(keepIds);\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { parseNodeName } from '../operations/executors/utils';\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(inputs, outputs, weightMap, initNodes) {\n  const usedNodes = new Set();\n  const missingInputs = [];\n  let dynamicNode = null;\n  let syncInputs = null;\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set();\n  const inputNodeNames = new Set(Object.keys(inputs).map(name => parseNodeName(name)[0]));\n  initNodes = initNodes || [];\n  const initNodeNames = new Set(initNodes.map(node => parseNodeName(node.name)[0]));\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name).filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n    if (inputNodeNames.has(node.name)) {\n      continue;\n    }\n    // This node is a dead end since it doesn't have any inputs.\n    if (initNodeNames.has(node.name)) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {\n    inputs,\n    outputs,\n    usedNodes,\n    missingInputs,\n    dynamicNode,\n    syncInputs\n  };\n}\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(graph, executionInfo) {\n  const {\n    usedNodes,\n    inputs\n  } = executionInfo;\n  const inputNodes = Object.keys(inputs).map(name => parseNodeName(name)[0]).map(name => graph.nodes[name]);\n  const initNodes = graph.initNodes || [];\n  const isUsed = node => usedNodes.has(typeof node === 'string' ? node : node.name);\n  function unique(nodes) {\n    return [...new Map(nodes.map(node => [node.name, node])).values()];\n  }\n  const predefinedNodes = unique([...inputNodes, ...graph.weights, ...initNodes]).filter(isUsed);\n  const allNodes = unique([...predefinedNodes, ...Object.values(graph.nodes)]).filter(isUsed);\n  const nameToNode = new Map(allNodes.map(node => [node.name, node]));\n  const inCounts = {};\n  for (const node of allNodes) {\n    inCounts[node.name] = inCounts[node.name] || 0;\n    for (const child of node.children) {\n      // When the child is unused, set in counts to infinity so that it will\n      // never be decreased to 0 and added to the execution list.\n      if (!isUsed(child)) {\n        inCounts[child.name] = Number.POSITIVE_INFINITY;\n      }\n      inCounts[child.name] = (inCounts[child.name] || 0) + 1;\n    }\n  }\n  // Build execution order for all used nodes regardless whether they are\n  // predefined or not.\n  const frontier = Object.entries(inCounts).filter(([, inCount]) => inCount === 0).map(([name]) => name);\n  const orderedNodeNames = [...frontier];\n  while (frontier.length > 0) {\n    const nodeName = frontier.pop();\n    const node = nameToNode.get(nodeName);\n    for (const child of node.children.filter(isUsed)) {\n      if (--inCounts[child.name] === 0) {\n        orderedNodeNames.push(child.name);\n        frontier.push(child.name);\n      }\n    }\n  }\n  const orderedNodes = orderedNodeNames.map(name => nameToNode.get(name));\n  const filteredOrderedNodes = filterPredefinedReachableNodes(orderedNodes, predefinedNodes);\n  // TODO: Turn validation on/off with tf env flag.\n  validateNodesExecutionOrder(filteredOrderedNodes, predefinedNodes);\n  return filteredOrderedNodes;\n}\n/**\n * This is a helper function of `getNodesInTopologicalOrder`.\n * Returns ordered nodes reachable by at least one predefined node.\n * This can help us filter out redundant nodes from the returned node list.\n * For example:\n * If we have four nodes with dependencies like this:\n *   a --> b --> c --> d\n * when node `c` is predefined (e.g. given as an input tensor), we can\n * skip node `a` and `b` since their outputs will never be used.\n *\n * @param orderedNodes Graph nodes in execution order.\n * @param predefinedNodes Graph inputs, weights, and init nodes. Nodes in this\n *     list must have distinct names.\n */\nfunction filterPredefinedReachableNodes(orderedNodes, predefinedNodes) {\n  const nameToNode = new Map(orderedNodes.map(node => [node.name, node]));\n  // TODO: Filter out more nodes when >=2 nodes are predefined in a path.\n  const stack = predefinedNodes.map(node => node.name);\n  const predefinedReachableNodeNames = new Set(stack);\n  // Perform a DFS starting from the set of all predefined nodes\n  // to find the set of all nodes reachable from the predefined nodes.\n  while (stack.length > 0) {\n    const nodeName = stack.pop();\n    const node = nameToNode.get(nodeName);\n    for (const child of node.children) {\n      if (!nameToNode.has(child.name) || predefinedReachableNodeNames.has(child.name)) {\n        continue;\n      }\n      predefinedReachableNodeNames.add(child.name);\n      stack.push(child.name);\n    }\n  }\n  // Filter out unreachable nodes and build the ordered node list.\n  const filteredOrderedNodes = orderedNodes.filter(node => predefinedReachableNodeNames.has(node.name));\n  return filteredOrderedNodes;\n}\nclass NodesExecutionOrderError extends Error {\n  constructor(message) {\n    super(`NodesExecutionOrderError: ${message}`);\n  }\n}\n/**\n * This is a helper function of `getNodesInTopologicalOrder`.\n * Validates property: given nodes `a` and `b`, Order(a) > Order(b) if `a`\n * is a child of `b`. This function throws an error if validation fails.\n *\n * @param orderedNodes Graph nodes in execution order.\n * @param predefinedNodes Graph inputs, weights, and init nodes. Nodes in this\n *     list must have distinct names.\n */\nfunction validateNodesExecutionOrder(orderedNodes, predefinedNodes) {\n  const nodeNameToOrder = new Map(orderedNodes.map((node, order) => [node.name, order]));\n  const predefinedNodeNames = new Set(predefinedNodes.map(node => node.name));\n  const isPredefined = node => predefinedNodeNames.has(typeof node === 'string' ? node : node.name);\n  const willBeExecutedNodeNames = new Set(orderedNodes.map(node => node.name));\n  const willBeExecuted = node => willBeExecutedNodeNames.has(typeof node === 'string' ? node : node.name);\n  for (const node of orderedNodes) {\n    for (const child of node.children.filter(willBeExecuted)) {\n      if (!nodeNameToOrder.has(child.name)) {\n        throw new NodesExecutionOrderError(`Child ${child.name} of node ${node.name} is unreachable.`);\n      }\n      if (nodeNameToOrder.get(node.name) > nodeNameToOrder.get(child.name)) {\n        throw new NodesExecutionOrderError(`Node ${node.name} is scheduled to run after its child ${child.name}.`);\n      }\n    }\n    if (!isPredefined(node)) {\n      for (const input of node.inputs) {\n        if (!nodeNameToOrder.has(input.name)) {\n          throw new NodesExecutionOrderError(`Input ${input.name} of node ${node.name} is unreachable.`);\n        }\n        if (nodeNameToOrder.get(input.name) > nodeNameToOrder.get(node.name)) {\n          throw new NodesExecutionOrderError(`Node ${node.name} is scheduled to run before its input ${input.name}.`);\n        }\n      }\n    }\n  }\n}\n/**\n * Given the execution info, return a map from node name to the disposable\n * node name list after its execution.\n *\n * @returns A map from node name to disposable nodes after its\n *     execution. That is, for a node `x`, `nodeLiveUntilMap[x]` indicates\n *     all nodes which their intermediate tensors should be disposed after `x`\n *     being executed.\n */\nexport function getNodeLiveUntilMap(orderedNodes) {\n  const nodeNameToOrder = new Map(orderedNodes.map((node, order) => [node.name, order]));\n  const INF_LIFE = Number.MAX_SAFE_INTEGER;\n  // Make control flow nodes (and consequently their direct parents)\n  // live forever since they're tricky to track correctly.\n  const selfLifespans = orderedNodes.map((node, nodeOrder) => isControlFlow(node) ? INF_LIFE : nodeOrder);\n  const getSelfLifeSpan = node => {\n    const selfLife = selfLifespans[nodeNameToOrder.get(node.name)];\n    if (selfLife == null) {\n      // If nodeToOrder does not contain the node, it is unused or\n      // unreachable in graph.\n      return -1;\n    }\n    return selfLife;\n  };\n  // `liveUntil[i]` points to the last node in the `orderedNodes` array that\n  // may depend on tensors from node `i`. It indicates that all the\n  // intermediate tensors from `orderedNodes[i]` should be disposed after\n  // `orderedNodes[liveUntil[i]]` is executed.\n  // A node lives long enough to pass on its tensors to its children.\n  // It lives until at least `max(node's position, children's positions)`.\n  const liveUntilOrders = orderedNodes.map((node, nodeOrder) => {\n    return node.children.map(getSelfLifeSpan).reduce((a, b) => Math.max(a, b), selfLifespans[nodeOrder]);\n  });\n  // liveUntilMap:\n  // - Key: Name of a node `x`\n  // - Values: All nodes whose intermediate tensors should be disposed\n  //           after `x` is executed.\n  const liveUntilMap = new Map();\n  for (let nodeOrder = 0; nodeOrder < orderedNodes.length; ++nodeOrder) {\n    const liveUntilOrder = liveUntilOrders[nodeOrder];\n    if (liveUntilOrder === INF_LIFE) {\n      continue;\n    }\n    const node = orderedNodes[nodeOrder];\n    const liveUntilNode = orderedNodes[liveUntilOrder];\n    if (!liveUntilMap.has(liveUntilNode.name)) {\n      liveUntilMap.set(liveUntilNode.name, []);\n    }\n    liveUntilMap.get(liveUntilNode.name).push(node);\n  }\n  return liveUntilMap;\n}\nconst CONTROL_FLOW_OPS = new Set(['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf', 'StatelessWhile', 'if', 'While']);\nconst DYNAMIC_SHAPE_OPS = new Set(['NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where']);\nconst HASH_TABLE_OPS = new Set(['HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2', 'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2']);\nexport function isControlFlow(node) {\n  return CONTROL_FLOW_OPS.has(node.op);\n}\nexport function isDynamicShape(node) {\n  return DYNAMIC_SHAPE_OPS.has(node.op);\n}\nexport function isHashTable(node) {\n  return HASH_TABLE_OPS.has(node.op);\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, keep, tidy, util } from '@tensorflow/tfjs-core';\nimport { getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContext, parseNodeName } from '../operations/executors/utils';\nimport { executeOp } from '../operations/operation_executor';\nimport { ExecutionContext } from './execution_context';\nimport { getExecutionSubgraph, getNodeLiveUntilMap, getNodesInTopologicalOrder, isControlFlow } from './model_analysis';\nexport class GraphExecutor {\n  get weightIds() {\n    return this.parent ? this.parent.weightIds : this._weightIds;\n  }\n  get functionExecutorMap() {\n    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;\n  }\n  get weightMap() {\n    return this.parent ? this.parent.weightMap : this._weightMap;\n  }\n  set weightMap(weightMap) {\n    const weightIds = Object.keys(weightMap).map(key => weightMap[key].map(tensor => tensor.id));\n    this._weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n  /**\n   * Set `ResourceManager` shared by executors of a model.\n   * @param resourceManager: `ResourceManager` of the `GraphModel`.\n   */\n  set resourceManager(resourceManager) {\n    this._resourceManager = resourceManager;\n  }\n  get inputs() {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,\n        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined\n      };\n    });\n  }\n  get outputs() {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ? node.attrParams['shape'].value : undefined,\n        dtype: node.attrParams['dtype'] ? node.attrParams['dtype'].value : undefined\n      };\n    });\n  }\n  get inputNodes() {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n  get outputNodes() {\n    return this._outputs.map(node => {\n      const name = node.signatureKey || node.name;\n      return node.defaultOutput ? `${name}:${node.defaultOutput}` : name;\n    });\n  }\n  get functions() {\n    return Object.keys(this._functions).reduce((map, key) => {\n      map[key] = this._functions[key].signature;\n      return map;\n    }, {});\n  }\n  /**\n   *\n   * @param graph Graph the model or function graph to be executed.\n   * @param parent When building function exector you need to set the parent\n   * executor. Since the weights and function executor maps are set at parant\n   * level, that function executor can access the function maps and weight maps\n   * through the parent.\n   */\n  constructor(graph, parent) {\n    this.graph = graph;\n    this.parent = parent;\n    this.compiledMap = new Map();\n    this.parseNodeNameCache = new Map();\n    this._weightMap = {};\n    this.SEPARATOR = ',';\n    this._functions = {};\n    this._functionExecutorMap = {};\n    this.keepIntermediateTensors = false;\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._initNodes = graph.initNodes;\n    this._signature = graph.signature;\n    this._functions = graph.functions;\n    // create sub-graph executors\n    if (graph.functions != null) {\n      Object.keys(graph.functions).forEach(name => {\n        this._functionExecutorMap[name] = new GraphExecutor(graph.functions[name], this);\n      });\n    }\n  }\n  getCompilationKey(inputs, outputs) {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPARATOR) + '--' + sortedOutputs.join(this.SEPARATOR);\n  }\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   * @returns {Object} compilation The compile result.\n   * @returns {Node[]} compilation.orderedNodes Nodes in the correct execution\n   *     order.\n   * @returns {Map<string, Node[]>} compilation.nodeLiveUntilMap A map from node\n   *     to disposable nodes after its execution. That is, for a node `x`,\n   *     `nodeLiveUntilMap[x]` indicates all nodes whose intermediate\n   *     tensors should be disposed after `x` is executed.\n   */\n  compile(inputs, outputs) {\n    const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n    const {\n      missingInputs,\n      dynamicNode,\n      syncInputs\n    } = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(`This execution contains the node '${dynamicNode.name}', which has ` + `the dynamic op '${dynamicNode.op}'. Please use ` + `model.executeAsync() instead. Alternatively, to avoid the ` + `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(`Cannot compute the outputs [${outNames}] from the provided inputs ` + `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n    const orderedNodes = getNodesInTopologicalOrder(this.graph, executionInfo);\n    const nodeLiveUntilMap = getNodeLiveUntilMap(orderedNodes);\n    return {\n      orderedNodes,\n      nodeLiveUntilMap\n    };\n  }\n  cloneAndKeepTensor(tensor) {\n    if (tensor == null) {\n      return null;\n    }\n    const clone = tensor.clone();\n    // Keep the clone because`model.execute()` may be called within\n    // a `tidy()`, but the user may inspect these tensors after the\n    // tidy.\n    keep(clone);\n    return clone;\n  }\n  cloneTensorList(tensors) {\n    if (!tensors) {\n      return null;\n    }\n    const clonedTensor = tensors.map(tensor => {\n      return this.cloneAndKeepTensor(tensor);\n    });\n    return clonedTensor;\n  }\n  cloneTensorMap(tensorsMap) {\n    return Object.fromEntries(Object.entries(tensorsMap).map(([name, tensorsList]) => {\n      return [name, this.cloneTensorList(tensorsList)];\n    }));\n  }\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model, if\n   * no outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   */\n  execute(inputs, outputs) {\n    // Dispose any tensors from a prior run to avoid leaking them.\n    this.disposeIntermediateTensors();\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes = names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n    const outputNodeNameSet = new Set(outputNodeNames);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n    // Do nothing if the compiled graph cache contains the input.\n    let compilation = this.compiledMap.get(compilationKey);\n    if (compilation == null) {\n      compilation = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, compilation);\n    }\n    // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.\n    try {\n      this.keepIntermediateTensors = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n    } catch (e) {\n      this.keepIntermediateTensors = false;\n      console.warn(e.message);\n    }\n    const tensorArrayMap = {};\n    const tensorListMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap, this.parseNodeNameCache);\n      const tensorsMap = Object.assign({}, this.weightMap);\n      if (this.keepIntermediateTensors) {\n        this.clonedTensorsMap = this.cloneTensorMap(this.weightMap);\n      }\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name, context);\n        const tensors = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n        if (this.keepIntermediateTensors) {\n          this.clonedTensorsMap[nodeName] = this.cloneTensorList(tensors);\n        }\n      });\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const {\n        orderedNodes,\n        nodeLiveUntilMap\n      } = compilation;\n      for (const node of orderedNodes) {\n        if (tensorsMap[node.name]) {\n          continue;\n        }\n        const tensors = executeOp(node, tensorsMap, context, this._resourceManager);\n        if (util.isPromise(tensors)) {\n          throw new Error(`The execution of the op '${node.op}' returned a promise. ` + `Please use model.executeAsync() instead.`);\n        }\n        tensorsMap[node.name] = tensors;\n        if (this.keepIntermediateTensors) {\n          this.clonedTensorsMap[node.name] = this.cloneTensorList(tensors);\n        }\n        this.checkTensorForDisposalWithNodeLiveUntilInfo(node, tensorsMap, context, tensorsToKeep, outputNodeNameSet, nodeLiveUntilMap.get(node.name));\n      }\n      // dispose the context for the root executor\n      if (this.parent == null) {\n        context.dispose(tensorsToKeep);\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n  getFrozenTensorIds(tensorMap) {\n    const ids = [].concat.apply([], Object.keys(tensorMap).map(key => tensorMap[key]).map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (isControlFlow(node) || outputNodeNameSet.has(nodeName)) {\n      return;\n    }\n    for (const tensor of tensorMap[nodeName]) {\n      if (tensor == null) {\n        continue;\n      }\n      intermediateTensorConsumerCount[tensor.id] = (intermediateTensorConsumerCount[tensor.id] || 0) + node.children.length;\n    }\n    for (const input of node.inputs) {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (isControlFlow(input)) {\n        continue;\n      }\n      const tensors = getTensorsForCurrentContext(input.name, tensorMap, context);\n      if (tensors == null) {\n        continue;\n      }\n      for (const tensor of tensors) {\n        if (!tensor || tensor.kept || tensorsToKeep.has(tensor.id)) {\n          continue;\n        }\n        // Only intermediate nodes' tensors have counts set, not marked as\n        // kept, and not in `tensorsToKeep`.\n        // Input and weight nodes' tensors should exist in `tensorsToKeep`.\n        // Output and control flow nodes' tensors should never have count set.\n        const count = intermediateTensorConsumerCount[tensor.id];\n        if (count === 1) {\n          tensor.dispose();\n          delete intermediateTensorConsumerCount[tensor.id];\n        } else if (count != null) {\n          intermediateTensorConsumerCount[tensor.id]--;\n        }\n      }\n    }\n  }\n  checkTensorForDisposalWithNodeLiveUntilInfo(node, tensorMap, context, tensorsToKeep, outputNodeNameSet, liveUntilNodes) {\n    function isNonDisposableNode(node) {\n      // Skip output nodes and any control flow nodes, since its dependency is\n      // tricky to track correctly.\n      return isControlFlow(node) || outputNodeNameSet.has(node.name);\n    }\n    if (isControlFlow(node) || liveUntilNodes == null) {\n      return;\n    }\n    for (const nodeToDispose of liveUntilNodes) {\n      if (isNonDisposableNode(nodeToDispose)) {\n        continue;\n      }\n      const tensors = getTensorsForCurrentContext(nodeToDispose.name, tensorMap, context);\n      for (const tensor of tensors) {\n        if (!tensor || tensor.kept || tensorsToKeep.has(tensor.id)) {\n          continue;\n        }\n        tensor.dispose();\n      }\n    }\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs, outputs) {\n    return this._executeAsync(inputs, outputs);\n  }\n  disposeIntermediateTensors() {\n    if (!this.clonedTensorsMap) {\n      return;\n    }\n    Object.values(this.clonedTensorsMap).forEach(tensorsList => {\n      for (const tensor of tensorsList) {\n        if (tensor && !tensor.isDisposed) {\n          tensor.dispose();\n        }\n      }\n    });\n    this.clonedTensorsMap = null;\n  }\n  getIntermediateTensors() {\n    return this.clonedTensorsMap;\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to\n   * the outputs array.\n   * @param isFunctionExecution Optional. Flag for executing a function.\n   * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n   * function execution.\n   * @param tensorArrayMap Optional global TensorList map by id. Used for\n   * function execution.\n   */\n  async _executeAsync(inputs, outputs, isFunctionExecution = false, tensorArrayMap = {}, tensorListMap = {}) {\n    // Dispose any tensors from a prior run to avoid leaking them.\n    this.disposeIntermediateTensors();\n    if (!isFunctionExecution) {\n      inputs = this.mapInputs(inputs);\n      this.checkInputs(inputs);\n      this.checkInputShapeAndType(inputs);\n      outputs = this.mapOutputs(outputs);\n      this.checkOutputs(outputs);\n    }\n    // Keep tensors if KEEP_INTERMEDIATE_TENSORS is on.\n    try {\n      this.keepIntermediateTensors = env().getBool('KEEP_INTERMEDIATE_TENSORS');\n    } catch (e) {\n      this.keepIntermediateTensors = false;\n      console.warn(e.message);\n    }\n    const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap, this.parseNodeNameCache);\n    if (this.keepIntermediateTensors) {\n      this.clonedTensorsMap = this.cloneTensorMap(this.weightMap);\n    }\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorsMap = await this.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);\n    const results = outputs.map(name => getTensor(name, tensorsMap, context));\n    // dispose all the intermediate tensors\n    const outputIds = results.map(t => t.id);\n    const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n    const keepIds = new Set([...outputIds, ...inputIds, ...this.weightIds]);\n    Object.values(tensorsMap).forEach(tensorsList => {\n      tensorsList.forEach(tensor => {\n        if (tensor && !tensor.isDisposed && !keepIds.has(tensor.id)) {\n          tensor.dispose();\n        }\n      });\n    });\n    // dispose the context for the root executor\n    if (this.parent == null) {\n      context.dispose(keepIds);\n    }\n    return results;\n  }\n  async executeFunctionAsync(inputs, tensorArrayMap, tensorListMap) {\n    const mappedInputs = inputs.reduce((map, tensor, index) => {\n      map[this.inputs[index].name] = tensor;\n      return map;\n    }, {});\n    return this._executeAsync(mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n  }\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   * @param outputNames Optional. output node name from the Tensorflow model,\n   * if no outputs are specified, the default outputs of the model would be\n   * used. You can inspect intermediate nodes of the model by adding them to\n   * the outputs array.\n   * @param isFunctionExecution Flag for executing a function.\n   */\n  async executeWithControlFlow(inputs, context, outputNames, isFunctionExecution) {\n    const names = Object.keys(inputs);\n    const inputNodes = names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n    const outputNodeNameSet = new Set(outputNodeNames);\n    let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n    // If no outputs are specified, then use the default outputs of the model.\n    if (outputNodes.length === 0) {\n      outputNodes = this._outputs;\n    }\n    const {\n      usedNodes,\n      missingInputs,\n      dynamicNode,\n      syncInputs\n    } = getExecutionSubgraph(inputs, outputNodes, this.weightMap, this._initNodes);\n    // First nodes to execute include inputNodes, weights, and initNodes.\n    const stack = [...inputNodes, ...this.graph.weights, ...(this._initNodes || [])].map(node => {\n      return {\n        node,\n        contexts: context.currentContext\n      };\n    });\n    const tensorsMap = Object.assign({}, this.weightMap);\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null && !isFunctionExecution) {\n      console.warn(`This model execution did not contain any nodes with control flow ` + `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs = outputNodes.filter(node => !isControlFlow(node) && !getTensor(node.name, tensorsMap, context)).map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg = `Alternatively, to avoid the dynamic ops, use model.execute() ` + `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(`Cannot compute the outputs [${missingOutputs}] from the provided ` + `inputs [${names}]. Consider providing the following inputs: ` + `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n  processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount, usedNodes) {\n    const promises = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' && getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n      // only process nodes that are not in the tensorMap yet, this include\n      // inputNodes and internal initNodes.\n      if (tensorMap[item.node.name] == null) {\n        const tensors = executeOp(item.node, tensorMap, context, this._resourceManager);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (util.isPromise(tensors)) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            if (this.keepIntermediateTensors) {\n              this.clonedTensorsMap[nodeName] = this.cloneTensorList(t);\n            }\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount);\n            this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          if (this.keepIntermediateTensors) {\n            this.clonedTensorsMap[nodeName] = this.cloneTensorList(tensors);\n          }\n          this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNodeNameSet, intermediateTensorConsumerCount);\n          this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n  processChildNodes(node, stack, context, tensorMap, added, usedNodes) {\n    node.children.forEach(childNode => {\n      const [nodeName] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n          return !!getTensor(name, tensorMap, context);\n        })) {\n          added[nodeName] = true;\n          stack.push({\n            contexts: context.currentContext,\n            node: childNode\n          });\n        }\n      } else\n        // Otherwise all inputs must to have value.\n        if (childNode.inputNames.every(name => {\n          return !!getTensor(name, tensorMap, context);\n        })) {\n          added[nodeName] = true;\n          stack.push({\n            contexts: context.currentContext,\n            node: childNode\n          });\n        }\n    });\n  }\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap).forEach(key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n  checkInputShapeAndType(inputs) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value;\n        const match = shape.length === input.shape.length && input.shape.every((dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(match, () => `The shape of dict['${node.name}'] provided in ` + `model.execute(dict) must be [${shape}], but was ` + `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(input.dtype === node.attrParams['dtype'].value, () => `The dtype of dict['${node.name}'] provided in ` + `model.execute(dict) must be ` + `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n  mapInputs(inputs) {\n    var _a, _b;\n    const result = {};\n    for (const inputName in inputs) {\n      const tensor = (_b = (_a = this._signature) === null || _a === void 0 ? void 0 : _a.inputs) === null || _b === void 0 ? void 0 : _b[inputName];\n      if (tensor != null) {\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n  checkInputs(inputs) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(`The dict provided in model.execute(dict) has ` + `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n  mapOutputs(outputs) {\n    return outputs.map(name => {\n      var _a, _b;\n      const tensor = (_b = (_a = this._signature) === null || _a === void 0 ? void 0 : _a.outputs) === null || _b === void 0 ? void 0 : _b[name];\n      if (tensor != null) {\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n  checkOutputs(outputs) {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n", "/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n  constructor(hashTableNameToHandle = {}, hashTableMap = {}) {\n    this.hashTableNameToHandle = hashTableNameToHandle;\n    this.hashTableMap = hashTableMap;\n  }\n  /**\n   * Register a `HashTable` in the resource manager.\n   *\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n   * where id is the table handle tensor's id.\n   *\n   * @param name Op node name that creates the `HashTable`.\n   * @param hashTable The `HashTable` to be added to resource manager.\n   */\n  addHashTable(name, hashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n  /**\n   * Get the table handle by node name.\n   * @param name Op node name that creates the `HashTable`. This name is also\n   *     used in the inputs list of lookup and import `HashTable` ops.\n   */\n  getHashTableHandleByName(name) {\n    return this.hashTableNameToHandle[name];\n  }\n  /**\n   * Get the actual `HashTable` by its handle tensor's id.\n   * @param id The id of the handle tensor.\n   */\n  getHashTableById(id) {\n    return this.hashTableMap[id];\n  }\n  /**\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\n   */\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n}\n", "/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { dispose, io, Tensor, util } from '@tensorflow/tfjs-core';\nimport { OperationMapper } from '../operations/operation_mapper';\nimport { GraphExecutor } from './graph_executor';\nimport { ResourceManager } from './resource_manager';\n// tslint:disable-next-line: no-imports-from-dist\nimport { decodeWeightsStream } from '@tensorflow/tfjs-core/dist/io/io_utils';\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel {\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion() {\n    return this.version;\n  }\n  get inputNodes() {\n    return this.executor.inputNodes;\n  }\n  get outputNodes() {\n    return this.executor.outputNodes;\n  }\n  get inputs() {\n    return this.executor.inputs;\n  }\n  get outputs() {\n    return this.executor.outputs;\n  }\n  get weights() {\n    return this.executor.weightMap;\n  }\n  get metadata() {\n    return this.artifacts.userDefinedMetadata;\n  }\n  get modelSignature() {\n    return this.signature;\n  }\n  get modelStructuredOutputKeys() {\n    return this.structuredOutputKeys;\n  }\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(modelUrl, loadOptions = {}, tfio = io) {\n    this.modelUrl = modelUrl;\n    this.loadOptions = loadOptions;\n    this.version = 'n/a';\n    this.io = tfio;\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n    this.resourceManager = new ResourceManager();\n  }\n  findIOHandler() {\n    const path = this.modelUrl;\n    if (path.load != null) {\n      // Path is an IO Handler.\n      this.handler = path;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = this.io.browserHTTPRequest(path, this.loadOptions);\n    } else {\n      const handlers = this.io.getLoadHandlers(path, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(this.io.browserHTTPRequest(path, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(`Found more than one (${handlers.length}) load handlers for ` + `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  load() {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error('Cannot proceed with model loading because the IOHandler provided ' + 'does not have the `load` method implemented.');\n    }\n    const loadResult = this.handler.load();\n    if (util.isPromise(loadResult)) {\n      return loadResult.then(artifacts => {\n        if (artifacts.getWeightStream == null) {\n          return this.loadSync(artifacts);\n        }\n        return this.loadStreaming(artifacts);\n      });\n    }\n    return this.loadSync(loadResult);\n  }\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  loadSync(artifacts) {\n    const weightMap = this.io.decodeWeights(artifacts.weightData, artifacts.weightSpecs);\n    return this.loadWithWeightMap(artifacts, weightMap);\n  }\n  async loadStreaming(artifacts) {\n    if (artifacts.getWeightStream == null) {\n      throw new Error('Model artifacts missing streamWeights function');\n    }\n    const weightMap = await decodeWeightsStream(artifacts.getWeightStream(), artifacts.weightSpecs);\n    return this.loadWithWeightMap(artifacts, weightMap);\n  }\n  loadWithWeightMap(artifacts, weightMap) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology;\n    let signature = this.artifacts.signature;\n    if (this.artifacts.userDefinedMetadata != null) {\n      const metadata = this.artifacts.userDefinedMetadata;\n      if (metadata.signature != null) {\n        signature = metadata.signature;\n      }\n      if (metadata.structuredOutputKeys != null) {\n        this.structuredOutputKeys = metadata.structuredOutputKeys;\n      }\n    }\n    this.signature = signature;\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    // Attach a model-level resourceManager to each executor to share resources,\n    // such as `HashTable`.\n    this.executor.resourceManager = this.resourceManager;\n    if (artifacts.modelInitializer != null && artifacts.modelInitializer.node != null) {\n      const initializer = OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap;\n      // Attach a model-level resourceManager to the initializer, the\n      // hashTables created from when executing the initializer will be stored\n      // in the resourceManager.\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializerSignature = artifacts.initializerSignature;\n    }\n    return true;\n  }\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL, config) {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = this.io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(`Found more than one (${handlers.length}) save handlers for ` + `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error('GraphModel.save() cannot proceed because the IOHandler ' + 'provided does not have the `save` attribute defined.');\n    }\n    return handlerOrURL.save(this.artifacts);\n  }\n  addStructuredOutputNames(outputTensors) {\n    if (this.structuredOutputKeys) {\n      const outputTensorsArray = outputTensors instanceof Tensor ? [outputTensors] : outputTensors;\n      const outputTensorMap = {};\n      outputTensorsArray.forEach((outputTensor, i) => outputTensorMap[this.structuredOutputKeys[i]] = outputTensor);\n      return outputTensorMap;\n    }\n    return outputTensors;\n  }\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with multiple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size.\n   * Currently the batch size option is ignored for graph model.\n   *\n   * @returns Inference result tensors. If the model is converted and it\n   * originally had structured_outputs in tensorflow, then a NamedTensorMap\n   * will be returned matching the structured_outputs. If no structured_outputs\n   * are present, the output will be single `tf.Tensor` if the model has single\n   * output node, otherwise Tensor[].\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(inputs, config) {\n    const outputTensors = this.execute(inputs, this.outputNodes);\n    return this.addStructuredOutputNames(outputTensors);\n  }\n  /**\n   * Execute the inference for the input tensors in async fashion, use this\n   * method when your model contains control flow ops.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size.\n   * Currently the batch size option is ignored for graph model.\n   *\n   * @returns A Promise of inference result tensors. If the model is converted\n   * and it originally had structured_outputs in tensorflow, then a\n   * NamedTensorMap will be returned matching the structured_outputs. If no\n   * structured_outputs are present, the output will be single `tf.Tensor` if\n   * the model has single output node, otherwise Tensor[].\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async predictAsync(inputs, config) {\n    const outputTensors = await this.executeAsync(inputs, this.outputNodes);\n    return this.addStructuredOutputNames(outputTensors);\n  }\n  normalizeInputs(inputs) {\n    var _a;\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      const signatureInputs = (_a = this.signature) === null || _a === void 0 ? void 0 : _a.inputs;\n      if (signatureInputs != null) {\n        for (const input in signatureInputs) {\n          const tensor = signatureInputs[input];\n          if (tensor.resourceId != null) {\n            inputs[input] = this.resourceIdToCapturedInput[tensor.resourceId];\n          }\n        }\n      }\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    const numCapturedInputs = Object.keys(this.resourceIdToCapturedInput).length;\n    if (inputs.length + numCapturedInputs !== this.inputNodes.length) {\n      throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length - numCapturedInputs} non-resource placeholders, while there are ${inputs.length} input tensors provided.`);\n    }\n    let inputIndex = 0;\n    return this.inputNodes.reduce((map, inputName) => {\n      var _a, _b, _c;\n      const resourceId = (_c = (_b = (_a = this.signature) === null || _a === void 0 ? void 0 : _a.inputs) === null || _b === void 0 ? void 0 : _b[inputName]) === null || _c === void 0 ? void 0 : _c.resourceId;\n      if (resourceId != null) {\n        map[inputName] = this.resourceIdToCapturedInput[resourceId];\n      } else {\n        map[inputName] = inputs[inputIndex++];\n      }\n      return map;\n    }, {});\n  }\n  normalizeOutputs(outputs) {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n  executeInitializerGraph() {\n    if (this.initializer == null) {\n      return [];\n    }\n    if (this.initializerSignature == null) {\n      return this.initializer.execute({}, []);\n    } else {\n      return this.initializer.execute({}, Object.keys(this.initializerSignature.outputs));\n    }\n  }\n  async executeInitializerGraphAsync() {\n    if (this.initializer == null) {\n      return [];\n    }\n    if (this.initializerSignature == null) {\n      return this.initializer.executeAsync({}, []);\n    } else {\n      return this.initializer.executeAsync({}, Object.keys(this.initializerSignature.outputs));\n    }\n  }\n  setResourceIdToCapturedInput(outputs) {\n    this.resourceIdToCapturedInput = {};\n    if (this.initializerSignature) {\n      const signatureOutputs = this.initializerSignature.outputs;\n      const outputNames = Object.keys(signatureOutputs);\n      for (let i = 0; i < outputNames.length; i++) {\n        const outputName = outputNames[i];\n        const tensorInfo = signatureOutputs[outputName];\n        this.resourceIdToCapturedInput[tensorInfo.resourceId] = outputs[i];\n      }\n    }\n  }\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the TensorFlow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  execute(inputs, outputs) {\n    if (this.resourceIdToCapturedInput == null) {\n      this.setResourceIdToCapturedInput(this.executeInitializerGraph());\n    }\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the TensorFlow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async executeAsync(inputs, outputs) {\n    if (this.resourceIdToCapturedInput == null) {\n      this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync());\n    }\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Get intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  getIntermediateTensors() {\n    return this.executor.getIntermediateTensors();\n  }\n  /**\n   * Dispose intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  disposeIntermediateTensors() {\n    this.executor.disposeIntermediateTensors();\n  }\n  convertTensorMapToTensorsMap(map) {\n    return Object.keys(map).reduce((newMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n  /**\n   * Releases the memory used by the weight tensors and resourceManager.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  dispose() {\n    this.executor.dispose();\n    if (this.initializer) {\n      this.initializer.dispose();\n      if (this.resourceIdToCapturedInput) {\n        dispose(this.resourceIdToCapturedInput);\n      }\n    }\n    this.resourceManager.dispose();\n  }\n}\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction\n * with a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send\n *     credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(modelUrl, options = {}, tfio = io) {\n  if (modelUrl == null) {\n    throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' + 'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n  if (options.fromTFHub && typeof modelUrl === 'string') {\n    modelUrl = getTFHubUrl(modelUrl);\n  }\n  const model = new GraphModel(modelUrl, options, tfio);\n  await model.load();\n  return model;\n}\n/**\n * Load a graph model given a synchronous IO handler with a 'load' method.\n *\n * @param modelSource The `io.IOHandlerSync` that loads the model, or the\n *     `io.ModelArtifacts` that encode the model, or a tuple of\n *     `[io.ModelJSON, ArrayBuffer]` of which the first element encodes the\n *      model and the second contains the weights.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport function loadGraphModelSync(modelSource) {\n  if (modelSource == null) {\n    throw new Error('modelUrl in loadGraphModelSync() cannot be null. Please provide ' + 'model artifacts or an IOHandler that loads the model');\n  }\n  let ioHandler;\n  if (modelSource instanceof Array) {\n    const [modelJSON, weights] = modelSource;\n    if (!modelJSON) {\n      throw new Error('modelJSON must be the first element of the array');\n    }\n    if (!weights || !(weights instanceof ArrayBuffer)) {\n      throw new Error('An ArrayBuffer of weights must be the second element of' + ' the array');\n    }\n    if (!('modelTopology' in modelJSON)) {\n      throw new Error('Model JSON is missing \\'modelTopology\\'');\n    }\n    if (!('weightsManifest' in modelJSON)) {\n      throw new Error('Model JSON is missing \\'weightsManifest\\'');\n    }\n    const weightSpecs = io.getWeightSpecs(modelJSON.weightsManifest);\n    const modelArtifacts = io.getModelArtifactsForJSONSync(modelJSON, weightSpecs, weights);\n    ioHandler = io.fromMemorySync(modelArtifacts);\n  } else if ('load' in modelSource) {\n    // Then modelSource is already an IOHandlerSync.\n    ioHandler = modelSource;\n  } else if ('modelTopology' in modelSource && 'weightSpecs' in modelSource && 'weightData' in modelSource) {\n    // modelSource is of type ModelArtifacts.\n    ioHandler = io.fromMemorySync(modelSource);\n  } else {\n    throw new Error('Unknown model format');\n  }\n  const model = new GraphModel(ioHandler);\n  model.load();\n  return model;\n}\nfunction getTFHubUrl(modelUrl) {\n  if (!modelUrl.endsWith('/')) {\n    modelUrl = modelUrl + '/';\n  }\n  return `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n}\n", "/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport { version };\n", "/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nconst ENV = env();\n/** Whether to keep intermediate tensors. */\nENV.registerFlag('KEEP_INTERMEDIATE_TENSORS', () => false, debugValue => {\n  if (debugValue) {\n    console.warn('Keep intermediate tensors is ON. This will print the values of all ' + 'intermediate tensors during model inference. Not all models ' + 'support this mode. For details, check e2e/benchmarks/ ' + 'model_config.js. This significantly impacts performance.');\n  }\n});\n"],
  "mappings": "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",
  "names": ["DataType", "SaverDef", "CheckpointFormatVersion", "tensor", "contextId", "pad", "tensor", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "json", "op", "functions", "executeOp", "tensor", "tensor", "indices", "tensor", "split", "tensors", "executeOp", "tensor", "condResult", "split", "pad", "executeOp", "executeOp", "step", "mean", "executeOp", "executeOp", "executeOp", "data", "executeOp", "executeOp", "image", "executeOp", "executeOp", "executeOp", "executeOp", "executeOp", "reverse", "x", "weights", "size", "executeOp", "tensor", "executeOp", "executeOp", "executeOp", "executeOp", "executeOp", "tidy", "node", "tensorMap", "context", "unique", "stack", "tensor", "clone", "executeOp", "node", "stack", "tensor", "_a"]
}
